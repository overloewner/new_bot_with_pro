"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥."""

from aiogram import types, F
from aiogram.filters import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder

from bot.handlers.base import BaseHandler
from bot.core.exceptions import DatabaseError


class StartHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
        self.router.message(Command("start"))(self.cmd_start)
        self.router.message(F.text == "–ó–∞–ø—É—Å—Ç–∏—Ç—å")(self.start_bot)
        self.router.message(F.text == "–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")(self.pause_bot)
    
    async def cmd_start(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start."""
        try:
            user_data = await self.storage.get_user_data(message.from_user.id)
            await self._send_main_menu(message, user_data)
        except DatabaseError as e:
            await self._handle_error(e, "start command")
            await self._send_error_message(message)
        except Exception as e:
            await self._handle_error(e, "start command")
            await self._send_error_message(message)
    
    async def start_bot(self, message: types.Message):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            user_id = message.from_user.id
            user_data = await self.storage.get_user_data(user_id)
            
            if not user_data["active_presets"]:
                await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞")
                return
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
            await self.storage.remove_user_subscriptions(user_id)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
            added = await self._add_user_subscriptions(user_id, user_data)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            await self.storage.update_user_running_status(user_id, True)
            
            await message.answer(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –î–æ–±–∞–≤–ª–µ–Ω–æ {added} –ø–æ–¥–ø–∏—Å–æ–∫.")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
            user_data = await self.storage.get_user_data(user_id)
            await self._send_main_menu(message, user_data)
            
        except DatabaseError as e:
            await self._handle_error(e, "start bot")
            await self._send_error_message(message, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞")
        except Exception as e:
            await self._handle_error(e, "start bot")
            await self._send_error_message(message)
    
    async def pause_bot(self, message: types.Message):
        """–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            user_id = message.from_user.id
            
            # –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
            removed = await self.storage.remove_user_subscriptions(user_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            await self.storage.update_user_running_status(user_id, False)
            
            await message.answer(f"‚è∏Ô∏è –ë–æ—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –£–¥–∞–ª–µ–Ω–æ {removed} –ø–æ–¥–ø–∏—Å–æ–∫.")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
            user_data = await self.storage.get_user_data(user_id)
            await self._send_main_menu(message, user_data)
            
        except DatabaseError as e:
            await self._handle_error(e, "pause bot")
            await self._send_error_message(message, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞")
        except Exception as e:
            await self._handle_error(e, "pause bot")
            await self._send_error_message(message)
    
    async def _send_main_menu(self, message: types.Message, user_data: dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
        builder = ReplyKeyboardBuilder()
        
        if user_data.get("is_running", False):
            builder.button(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥–æ–≤ (–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)")
            builder.button(text="–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
        else:
            builder.button(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥–æ–≤")
            builder.button(text="–ó–∞–ø—É—Å—Ç–∏—Ç—å")
        
        builder.adjust(2)
        
        status = "üü¢ –ó–∞–ø—É—â–µ–Ω" if user_data.get("is_running") else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        active_presets = len(user_data.get("active_presets", set()))
        total_presets = len(user_data.get("presets", {}))
        
        text = (
            f"ü§ñ –ö—Ä–∏–ø—Ç–æ –ê–ª–µ—Ä—Ç –ë–æ—Ç\n\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n"
            f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤: {active_presets}/{total_presets}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        await message.answer(
            text,
            reply_markup=builder.as_markup(resize_keyboard=True)
        )
    
    async def _add_user_subscriptions(self, user_id: int, user_data: dict) -> int:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        added_count = 0
        
        for preset_id in user_data["active_presets"]:
            preset = user_data["presets"].get(preset_id)
            if not preset:
                continue
            
            for pair in preset["pairs"]:
                key = f"{pair.lower()}@kline_{preset['interval']}"
                await self.storage.add_subscription(key, user_id, preset_id)
                added_count += 1
        
        return added_count