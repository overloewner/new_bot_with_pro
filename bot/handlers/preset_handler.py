"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–∞–º–∏."""

import uuid
from aiogram import types, F
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.handlers.base import BaseHandler
from bot.storage import PresetStates
from bot.core.exceptions import DatabaseError, ValidationError
from bot.utils.validators import PresetValidator, VolumeValidator


class PresetHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–∞–º–∏."""
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
        # Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.router.callback_query(F.data == "add_preset")(self.add_preset)
        self.router.callback_query(F.data == "select_all_pairs")(self.select_all_pairs)
        self.router.callback_query(F.data == "select_by_volume")(self.select_by_volume)
        self.router.callback_query(F.data == "enter_manually")(self.enter_manually)
        self.router.callback_query(F.data.startswith("interval_"))(self.process_interval_callback)
        self.router.callback_query(F.data.startswith("activate_"))(self.activate_preset)
        self.router.callback_query(F.data.startswith("deactivate_"))(self.deactivate_preset)
        self.router.callback_query(F.data.startswith("delete_"))(self.delete_preset)
        self.router.callback_query(F.data.startswith("view_active_"))(self.view_active_preset)
        self.router.callback_query(F.data.startswith("view_inactive_"))(self.view_inactive_preset)
        
        # State –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.router.message(PresetStates.waiting_preset_name)(self.process_preset_name)
        self.router.message(PresetStates.waiting_pairs)(self.process_pairs)
        self.router.message(PresetStates.waiting_volume_input)(self.process_volume_input)
        self.router.message(PresetStates.waiting_percent)(self.process_percent)
    
    async def add_preset(self, callback: types.CallbackQuery, state: FSMContext):
        """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–∞."""
        try:
            await state.set_state(PresetStates.waiting_preset_name)
            await callback.message.edit_text(
                "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞:",
                reply_markup=None
            )
            await callback.answer()
        except Exception as e:
            await self._handle_error(e, "add preset")
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ—Å–µ—Ç–∞")
    
    async def process_preset_name(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –ø—Ä–µ—Å–µ—Ç–∞."""
        try:
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏–º—è
            preset_name = PresetValidator.validate_preset_name(message.text)
            
            await state.update_data(preset_name=preset_name)
            await state.set_state(PresetStates.waiting_pairs)
            
            builder = InlineKeyboardBuilder()
            builder.button(text="–í—ã–±—Ä–∞—Ç—å –≤—Å–µ –ø–∞—Ä—ã", callback_data="select_all_pairs")
            builder.button(text="–í—ã–±—Ä–∞—Ç—å –ø–æ –æ–±—ä–µ–º—É", callback_data="select_by_volume")
            builder.button(text="–í–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞—Ä –≤—Ä—É—á–Ω—É—é", callback_data="enter_manually")
            builder.adjust(1)
            
            await message.answer(
                "üí∞ –ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã?",
                reply_markup=builder.as_markup()
            )
            
        except ValidationError as e:
            await message.answer(f"‚ùå {str(e)}")
        except Exception as e:
            await self._handle_error(e, "process preset name")
            await self._send_error_message(message)
    
    async def select_all_pairs(self, callback: types.CallbackQuery, state: FSMContext):
        """–í—ã–±–æ—Ä –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä."""
        try:
            all_tokens = self.storage.get_all_tokens()
            await state.update_data(pairs=all_tokens)
            await self._show_interval_selection(callback, state)
            await callback.answer(f"–í—ã–±—Ä–∞–Ω–æ {len(all_tokens)} –ø–∞—Ä")
        except Exception as e:
            await self._handle_error(e, "select all pairs")
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–∞—Ä")
    
    async def select_by_volume(self, callback: types.CallbackQuery, state: FSMContext):
        """–í—ã–±–æ—Ä –ø–∞—Ä –ø–æ –æ–±—ä–µ–º—É —Ç–æ—Ä–≥–æ–≤."""
        try:
            await callback.message.answer(
                "üìä –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ –∑–∞ 24—á (–≤ USDT):\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 1000000 - –¥–ª—è –ø–∞—Ä —Å –æ–±—ä–µ–º–æ–º > $1M"
            )
            await state.set_state(PresetStates.waiting_volume_input)
            await callback.answer()
        except Exception as e:
            await self._handle_error(e, "select by volume")
            await callback.answer("–û—à–∏–±–∫–∞")
    
    async def process_volume_input(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–º–∞."""
        try:
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –æ–±—ä–µ–º
            min_volume = VolumeValidator.validate_volume(message.text)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä—ã –ø–æ –æ–±—ä–µ–º—É
            selected_pairs = await self.storage.get_tokens_by_volume(min_volume)
            
            if not selected_pairs:
                await message.answer(
                    f"‚ùå –ù–µ—Ç –ø–∞—Ä —Å –æ–±—ä–µ–º–æ–º –≤—ã—à–µ {min_volume:,.0f} USDT. "
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –º–µ–Ω—å—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:"
                )
                return
            
            await state.update_data(pairs=selected_pairs)
            await message.answer(
                f"‚úÖ –í—ã–±—Ä–∞–Ω–æ {len(selected_pairs)} –ø–∞—Ä —Å –æ–±—ä–µ–º–æ–º > {min_volume:,.0f} USDT"
            )
            await self._show_interval_selection_message(message, state)
            
        except ValidationError as e:
            await message.answer(f"‚ùå {str(e)}")
        except Exception as e:
            await self._handle_error(e, "process volume input")
            await self._send_error_message(message)
    
    async def enter_manually(self, callback: types.CallbackQuery, state: FSMContext):
        """–†—É—á–Ω–æ–π –≤–≤–æ–¥ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä."""
        try:
            await callback.message.answer(
                "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: BTCUSDT, ETHUSDT, ADAUSDT"
            )
            await state.set_state(PresetStates.waiting_pairs)
            await callback.answer()
        except Exception as e:
            await self._handle_error(e, "enter manually")
            await callback.answer("–û—à–∏–±–∫–∞")
    
    async def process_pairs(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ø–∞—Ä."""
        try:
            # –ü–∞—Ä—Å–∏–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–∞—Ä—ã
            pairs_input = [p.strip().upper() for p in message.text.split(",")]
            pairs = PresetValidator.validate_pairs(pairs_input)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–∞—Ä
            invalid_pairs = []
            for pair in pairs:
                if not await self.storage.is_valid_token(pair):
                    invalid_pairs.append(pair)
            
            if invalid_pairs:
                await message.answer(
                    f"‚ùå –°–ª–µ–¥—É—é—â–∏–µ –ø–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {', '.join(invalid_pairs)}\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä—ã:"
                )
                return
            
            await state.update_data(pairs=pairs)
            await message.answer(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ {len(pairs)} –ø–∞—Ä")
            await self._show_interval_selection_message(message, state)
            
        except ValidationError as e:
            await message.answer(f"‚ùå {str(e)}")
        except Exception as e:
            await self._handle_error(e, "process pairs")
            await self._send_error_message(message)
    
    async def _show_interval_selection(self, callback: types.CallbackQuery, state: FSMContext):
        """–ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —á–µ—Ä–µ–∑ callback."""
        await state.set_state(PresetStates.waiting_interval)
        
        builder = InlineKeyboardBuilder()
        for tf in self.storage.get_all_timeframes():
            builder.button(text=tf, callback_data=f"interval_{tf}")
        builder.adjust(3)
        
        await callback.message.answer(
            "‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–≤–µ—á–∏:",
            reply_markup=builder.as_markup()
        )
    
    async def _show_interval_selection_message(self, message: types.Message, state: FSMContext):
        """–ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
        await state.set_state(PresetStates.waiting_interval)
        
        builder = InlineKeyboardBuilder()
        for tf in self.storage.get_all_timeframes():
            builder.button(text=tf, callback_data=f"interval_{tf}")
        builder.adjust(3)
        
        await message.answer(
            "‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–≤–µ—á–∏:",
            reply_markup=builder.as_markup()
        )
    
    async def process_interval_callback(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞."""
        try:
            interval = callback.data.split("_")[1]
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
            interval = PresetValidator.validate_interval(interval)
            
            await state.update_data(interval=interval)
            await state.set_state(PresetStates.waiting_percent)
            
            await callback.message.answer(
                "üìà –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤:\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 5 (–¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ > 5%)\n"
                "–î–∏–∞–ø–∞–∑–æ–Ω: 0.01% - 1000%"
            )
            await callback.answer(f"–í—ã–±—Ä–∞–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª: {interval}")
            
        except ValidationError as e:
            await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
        except Exception as e:
            await self._handle_error(e, "process interval")
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞")
    
    async def process_percent(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞."""
        try:
            # –ü–∞—Ä—Å–∏–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç
            percent_text = message.text.strip().replace('%', '').replace(',', '.')
            percent = PresetValidator.validate_percent(float(percent_text))
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            required_fields = ['preset_name', 'pairs', 'interval']
            
            if not all(k in data for k in required_fields):
                await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö. –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞ –∑–∞–Ω–æ–≤–æ.")
                await state.clear()
                return
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ—Å–µ—Ç
            preset_id = str(uuid.uuid4())
            preset_data = {
                'preset_name': data['preset_name'],
                'pairs': data['pairs'],
                'interval': data['interval'],
                'percent': percent
            }
            
            await self.storage.add_preset(
                user_id=message.from_user.id,
                preset_id=preset_id,
                preset_data=preset_data
            )
            
            await message.answer(
                f"‚úÖ –ü—Ä–µ—Å–µ—Ç '{preset_data['preset_name']}' —Å–æ–∑–¥–∞–Ω!\n"
                f"üîß –ü–∞—Ä: {len(preset_data['pairs'])}\n"
                f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {preset_data['interval']}\n"
                f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç: {preset_data['percent']}%",
                reply_markup=types.ReplyKeyboardRemove()
            )
            
        except ValidationError as e:
            await message.answer(f"‚ùå {str(e)}")
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5 –∏–ª–∏ 0.5)")
        except DatabaseError as e:
            await self._handle_error(e, "create preset")
            await self._send_error_message(message, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ—Å–µ—Ç–∞")
        except Exception as e:
            await self._handle_error(e, "create preset")
            await self._send_error_message(message)
        finally:
            await state.clear()
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
            from bot.handlers.start_handler import StartHandler
            start_handler = StartHandler(self.storage)
            await start_handler.cmd_start(message)
    
    async def view_active_preset(self, callback: types.CallbackQuery):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–µ—Å–µ—Ç–∞."""
        try:
            preset_id = callback.data.split("_")[2]
            await self._show_preset_details(callback, preset_id, is_active=True)
        except Exception as e:
            await self._handle_error(e, "view active preset")
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ø—Ä–µ—Å–µ—Ç–∞")
    
    async def view_inactive_preset(self, callback: types.CallbackQuery):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–µ—Å–µ—Ç–∞."""
        try:
            preset_id = callback.data.split("_")[2]
            await self._show_preset_details(callback, preset_id, is_active=False)
        except Exception as e:
            await self._handle_error(e, "view inactive preset")
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ø—Ä–µ—Å–µ—Ç–∞")
    
    async def _show_preset_details(self, callback: types.CallbackQuery, preset_id: str, is_active: bool):
        """–ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–µ—Å–µ—Ç–∞."""
        user_data = await self.storage.get_user_data(callback.from_user.id)
        preset = user_data["presets"].get(preset_id)
        
        if not preset:
            await callback.answer("–ü—Ä–µ—Å–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        builder = InlineKeyboardBuilder()
        if is_active:
            builder.button(text="‚è∏Ô∏è –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"deactivate_{preset_id}")
        else:
            builder.button(text="‚ñ∂Ô∏è –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"activate_{preset_id}")
        
        builder.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{preset_id}")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_presets")
        builder.adjust(2)
        
        pairs_text = (
            f"{len(preset['pairs'])} –ø–∞—Ä" 
            if len(preset['pairs']) > 10 
            else ', '.join(preset['pairs'][:10])
        )
        
        status = "üü¢ –ê–ö–¢–ò–í–ï–ù" if is_active else "üî¥ –ù–ï–ê–ö–¢–ò–í–ï–ù"
        
        text = (
            f"üìã –ü—Ä–µ—Å–µ—Ç: {preset['preset_name']}\n"
            f"üí∞ –ü–∞—Ä—ã: {pairs_text}\n"
            f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {preset['interval']}\n"
            f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç: {preset['percent']}%\n"
            f"üîÑ –°—Ç–∞—Ç—É—Å: {status}"
        )
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup())
        await callback.answer()
    
    async def activate_preset(self, callback: types.CallbackQuery):
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–µ—Å–µ—Ç–∞."""
        try:
            user_id = callback.from_user.id
            preset_id = callback.data.split("_")[1]
            
            await self.storage.activate_preset(user_id, preset_id)
            await callback.answer("‚úÖ –ü—Ä–µ—Å–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            await self._show_preset_details(callback, preset_id, is_active=True)
            
        except DatabaseError as e:
            await self._handle_error(e, "activate preset")
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–µ—Å–µ—Ç–∞")
        except Exception as e:
            await self._handle_error(e, "activate preset")
            await callback.answer("–û—à–∏–±–∫–∞")
    
    async def deactivate_preset(self, callback: types.CallbackQuery):
        """–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–µ—Å–µ—Ç–∞."""
        try:
            user_id = callback.from_user.id
            preset_id = callback.data.split("_")[1]
            
            await self.storage.deactivate_preset(user_id, preset_id)
            await callback.answer("‚úÖ –ü—Ä–µ—Å–µ—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            await self._show_preset_details(callback, preset_id, is_active=False)
            
        except DatabaseError as e:
            await self._handle_error(e, "deactivate preset")
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–µ—Å–µ—Ç–∞")
        except Exception as e:
            await self._handle_error(e, "deactivate preset")
            await callback.answer("–û—à–∏–±–∫–∞")
    
    async def delete_preset(self, callback: types.CallbackQuery):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞."""
        try:
            user_id = callback.from_user.id
            preset_id = callback.data.split("_")[1]
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ—Å–µ—Ç–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
            user_data = await self.storage.get_user_data(user_id)
            preset_name = user_data["presets"].get(preset_id, {}).get("preset_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
            
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Å–µ—Ç
            await self.storage.delete_preset(user_id, preset_id)
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏
            await callback.message.delete()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
            builder = InlineKeyboardBuilder()
            builder.button(text="üü¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã", callback_data="active_presets")
            builder.button(text="üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã", callback_data="inactive_presets")
            builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ—Å–µ—Ç", callback_data="add_preset")
            builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
            builder.adjust(1)
            
            await callback.message.answer(
                f"üóëÔ∏è –ü—Ä–µ—Å–µ—Ç '{preset_name}' —É–¥–∞–ª–µ–Ω!\n\n"
                "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥–æ–≤:",
                reply_markup=builder.as_markup()
            )
            
            await callback.answer("–ü—Ä–µ—Å–µ—Ç —É–¥–∞–ª–µ–Ω")
            
        except DatabaseError as e:
            await self._handle_error(e, "delete preset")
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ—Å–µ—Ç–∞")
        except Exception as e:
            await self._handle_error(e, "delete preset")
            await callback.answer("–û—à–∏–±–∫–∞")