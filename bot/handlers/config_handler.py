"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""

from aiogram import types, F
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.handlers.base import BaseHandler
from bot.core.exceptions import DatabaseError


class ConfigHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–µ—Å–µ—Ç–æ–≤ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
        self.router.message(F.text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥–æ–≤")(self.config_menu)
        self.router.callback_query(F.data == "active_presets")(self.show_active_presets)
        self.router.callback_query(F.data == "inactive_presets")(self.show_inactive_presets)
        self.router.callback_query(F.data == "back_to_config")(self.back_to_config)
        self.router.callback_query(F.data == "back_to_main")(self.back_to_main)
        self.router.callback_query(F.data == "back_to_presets")(self.back_to_presets)
    
    async def config_menu(self, message: types.Message):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
        try:
            user_data = await self.storage.get_user_data(message.from_user.id)
            
            if user_data.get("is_running", False):
                await message.answer("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –ø–æ–∫–∞ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
                return
            
            await self._send_config_menu(message)
            
        except DatabaseError as e:
            await self._handle_error(e, "config menu")
            await self._send_error_message(message)
        except Exception as e:
            await self._handle_error(e, "config menu")
            await self._send_error_message(message)
    
    async def show_active_presets(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤."""
        try:
            user_data = await self.storage.get_user_data(callback.from_user.id)
            active_presets = user_data.get("active_presets", set())
            
            builder = InlineKeyboardBuilder()
            
            if not active_presets:
                builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_config")
                await callback.message.edit_text(
                    "üìã –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤",
                    reply_markup=builder.as_markup()
                )
                await callback.answer()
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–µ—Å–µ—Ç–∞
            for preset_id in active_presets:
                preset = user_data["presets"].get(preset_id)
                if preset:
                    builder.button(
                        text=f"üü¢ {preset['preset_name']}",
                        callback_data=f"view_active_{preset_id}"
                    )
            
            builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_config")
            builder.adjust(1)
            
            await callback.message.edit_text(
                f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã ({len(active_presets)}):",
                reply_markup=builder.as_markup()
            )
            await callback.answer()
            
        except DatabaseError as e:
            await self._handle_error(e, "show active presets")
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ—Å–µ—Ç–æ–≤")
        except Exception as e:
            await self._handle_error(e, "show active presets")
            await callback.answer("–û—à–∏–±–∫–∞")
    
    async def show_inactive_presets(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤."""
        try:
            user_data = await self.storage.get_user_data(callback.from_user.id)
            all_presets = set(user_data.get("presets", {}).keys())
            active_presets = user_data.get("active_presets", set())
            inactive_presets = all_presets - active_presets
            
            builder = InlineKeyboardBuilder()
            
            if not inactive_presets:
                builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_config")
                await callback.message.edit_text(
                    "üìã –£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤",
                    reply_markup=builder.as_markup()
                )
                await callback.answer()
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–µ—Å–µ—Ç–∞
            for preset_id in inactive_presets:
                preset = user_data["presets"].get(preset_id)
                if preset:
                    builder.button(
                        text=f"üî¥ {preset['preset_name']}",
                        callback_data=f"view_inactive_{preset_id}"
                    )
            
            builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_config")
            builder.adjust(1)
            
            await callback.message.edit_text(
                f"üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã ({len(inactive_presets)}):",
                reply_markup=builder.as_markup()
            )
            await callback.answer()
            
        except DatabaseError as e:
            await self._handle_error(e, "show inactive presets")
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ—Å–µ—Ç–æ–≤")
        except Exception as e:
            await self._handle_error(e, "show inactive presets")
            await callback.answer("–û—à–∏–±–∫–∞")
    
    async def back_to_config(self, callback: types.CallbackQuery):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
        try:
            await self._send_config_menu_edit(callback)
        except Exception as e:
            await self._handle_error(e, "back to config")
            await callback.answer("–û—à–∏–±–∫–∞")
    
    async def back_to_main(self, callback: types.CallbackQuery):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é."""
        try:
            await callback.message.delete()
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
            from bot.handlers.start_handler import StartHandler
            start_handler = StartHandler(self.storage)
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–∑–æ–≤–∞ start
            class FakeMessage:
                def __init__(self, user_id, answer_func):
                    self.from_user = types.User(id=user_id, is_bot=False, first_name="User")
                    self.answer = answer_func
            
            fake_message = FakeMessage(callback.from_user.id, callback.message.answer)
            await start_handler.cmd_start(fake_message)
            
            await callback.answer()
            
        except Exception as e:
            await self._handle_error(e, "back to main")
            await callback.answer("–û—à–∏–±–∫–∞")
    
    async def back_to_presets(self, callback: types.CallbackQuery):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –ø—Ä–µ—Å–µ—Ç–æ–≤."""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ —Ç–µ–∫—Å—Ç—É —Å–æ–æ–±—â–µ–Ω–∏—è
            message_text = callback.message.text or ""
            
            if "–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã" in message_text:
                await self.show_active_presets(callback)
            elif "–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã" in message_text:
                await self.show_inactive_presets(callback)
            else:
                await self._send_config_menu_edit(callback)
                
        except Exception as e:
            await self._handle_error(e, "back to presets")
            await callback.answer("–û—à–∏–±–∫–∞")
    
    async def _send_config_menu(self, message: types.Message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
        builder = InlineKeyboardBuilder()
        builder.button(text="üü¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã", callback_data="active_presets")
        builder.button(text="üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã", callback_data="inactive_presets")
        builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ—Å–µ—Ç", callback_data="add_preset")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
        builder.adjust(1)
        
        await message.answer(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥–æ–≤:\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–∞–º–∏:",
            reply_markup=builder.as_markup()
        )
    
    async def _send_config_menu_edit(self, callback: types.CallbackQuery):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
        builder = InlineKeyboardBuilder()
        builder.button(text="üü¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã", callback_data="active_presets")
        builder.button(text="üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã", callback_data="inactive_presets")
        builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ—Å–µ—Ç", callback_data="add_preset")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
        builder.adjust(1)
        
        await callback.message.edit_text(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥–æ–≤:\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–∞–º–∏:",
            reply_markup=builder.as_markup()
        )
        await callback.answer()