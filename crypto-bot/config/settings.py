# config/settings.py
"""–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –ø–æ–ª—É—á–µ–Ω–∏–µ–º API –∫–ª—é—á–µ–π."""

import os
from dataclasses import dataclass
from typing import Optional
from pathlib import Path

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å - –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–Ω–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç dotenv
env_path = Path(__file__).parent.parent / '.env'
if env_path.exists():
    try:
        # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä .env —Ñ–∞–π–ª–∞ –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        with open(env_path, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    key = key.strip()
                    value = value.strip().strip('"').strip("'")
                    if key and value:
                        os.environ[key] = value
        print(f"‚úÖ Loaded .env file from {env_path}")
    except Exception as e:
        print(f"‚ö†Ô∏è Error loading .env file: {e}")
else:
    print(f"‚ö†Ô∏è .env file not found at {env_path}")


@dataclass
class DatabaseConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    url: str
    pool_size: int = 10
    max_overflow: int = 20
    pool_pre_ping: bool = True


@dataclass
class APIConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API –∫–ª—é—á–µ–π."""
    etherscan_api_key: Optional[str] = None
    binance_api_key: Optional[str] = None
    binance_secret: Optional[str] = None
    coingecko_api_key: Optional[str] = None
    
    def has_etherscan_api(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Etherscan API –∫–ª—é—á–∞."""
        return bool(self.etherscan_api_key and self.etherscan_api_key.strip() and 
                   self.etherscan_api_key != "YourApiKeyToken")
    
    def get_etherscan_api_key(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ API –∫–ª—é—á–∞ Etherscan –∏–ª–∏ fallback."""
        if self.has_etherscan_api():
            return self.etherscan_api_key
        return "YourApiKeyToken"  # Fallback –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    
    def has_binance_api(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Binance API –∫–ª—é—á–µ–π."""
        return bool(self.binance_api_key and self.binance_secret and 
                   self.binance_api_key.strip() and self.binance_secret.strip())


@dataclass
class AppConfig:
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    
    # Telegram
    bot_token: str
    
    # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    database: DatabaseConfig
    
    # API –∫–ª—é—á–∏
    api: APIConfig
    
    # –õ–∏–º–∏—Ç—ã
    max_users_per_instance: int = 1000
    max_alerts_per_user: int = 50
    
    # –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
    debug: bool = False
    
    @classmethod
    def from_env(cls) -> "AppConfig":
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        bot_token = os.getenv("BOT_TOKEN")
        if not bot_token:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω
            bot_token = "7512410143:AAF0MI-LrPVC8JXVhkYO0jtDs2Yn2uSnUlM"
            print("‚ö†Ô∏è Using default BOT_TOKEN. Set BOT_TOKEN in .env for production")
        
        # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        database_url = os.getenv(
            "DATABASE_URL",
            "postgresql://postgres:Zxasqw!2@localhost/crypto_bot"
        )
        
        database_config = DatabaseConfig(
            url=database_url,
            pool_size=int(os.getenv("DB_POOL_SIZE", "10")),
            max_overflow=int(os.getenv("DB_MAX_OVERFLOW", "20"))
        )
        
        # API –∫–ª—é—á–∏
        api_config = APIConfig(
            etherscan_api_key=os.getenv("ETHERSCAN_API_KEY"),
            binance_api_key=os.getenv("BINANCE_API_KEY"),
            binance_secret=os.getenv("BINANCE_SECRET"),
            coingecko_api_key=os.getenv("COINGECKO_API_KEY")
        )
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        debug = os.getenv("DEBUG", "false").lower() in ("true", "1", "yes")
        
        config = cls(
            bot_token=bot_token,
            database=database_config,
            api=api_config,
            max_users_per_instance=int(os.getenv("MAX_USERS", "1000")),
            max_alerts_per_user=int(os.getenv("MAX_ALERTS_PER_USER", "50")),
            debug=debug
        )
        
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        print("üîß Configuration loaded:")
        print(f"   Bot token: {'‚úÖ Set' if bot_token else '‚ùå Missing'}")
        print(f"   Database: {'‚úÖ Configured' if database_url else '‚ùå Missing'}")
        print(f"   Etherscan API: {'‚úÖ Available' if api_config.has_etherscan_api() else '‚ö†Ô∏è Limited (free tier)'}")
        print(f"   Binance API: {'‚úÖ Available' if api_config.has_binance_api() else '‚ö†Ô∏è Using public endpoints'}")
        print(f"   Debug mode: {'‚úÖ Enabled' if debug else '‚ùå Disabled'}")
        
        return config
    
    def get_database_url(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        return self.database.url
    
    def is_production(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ production —Ä–µ–∂–∏–º–∞."""
        return not self.debug and self.api.has_etherscan_api()


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
_config = None

def get_config() -> AppConfig:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    global _config
    if _config is None:
        _config = AppConfig.from_env()
    return _config