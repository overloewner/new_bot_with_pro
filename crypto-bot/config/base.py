# config/base.py
"""–û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""

import os
from dataclasses import dataclass
from typing import Optional

@dataclass
class DatabaseConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    url: str
    pool_size: int = 10
    max_overflow: int = 20
    pool_pre_ping: bool = True

@dataclass
class AppConfig:
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    
    # Telegram
    bot_token: str
    
    # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    database: DatabaseConfig
    
    # –õ–∏–º–∏—Ç—ã
    max_users_per_instance: int = 1000
    max_alerts_per_user: int = 50
    
    # –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
    debug: bool = False
    
    @classmethod
    def from_env(cls) -> "AppConfig":
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        bot_token = os.getenv("BOT_TOKEN")
        if not bot_token:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω
            bot_token = "7512410143:AAF0MI-LrPVC8JXVhkYO0jtDs2Yn2uSnUlM"
            print("‚ö†Ô∏è Using default BOT_TOKEN")
        
        # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        database_url = os.getenv(
            "DATABASE_URL",
            "postgresql://postgres:Zxasqw!2@localhost/crypto_bot"
        )
        
        database_config = DatabaseConfig(
            url=database_url,
            pool_size=int(os.getenv("DB_POOL_SIZE", "10")),
            max_overflow=int(os.getenv("DB_MAX_OVERFLOW", "20"))
        )
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        debug = os.getenv("DEBUG", "false").lower() in ("true", "1", "yes")
        
        config = cls(
            bot_token=bot_token,
            database=database_config,
            max_users_per_instance=int(os.getenv("MAX_USERS", "1000")),
            max_alerts_per_user=int(os.getenv("MAX_ALERTS_PER_USER", "50")),
            debug=debug
        )
        
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        print("üîß Configuration loaded:")
        print(f"   Bot token: {'‚úÖ Set' if bot_token else '‚ùå Missing'}")
        print(f"   Database: {'‚úÖ Configured' if database_url else '‚ùå Missing'}")
        print(f"   Debug mode: {'‚úÖ Enabled' if debug else '‚ùå Disabled'}")
        
        return config
    
    def get_database_url(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        return self.database.url
    
    def is_production(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ production —Ä–µ–∂–∏–º–∞."""
        return not self.debug

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
_config = None

def get_config() -> AppConfig:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    global _config
    if _config is None:
        _config = AppConfig.from_env()
    return _config