import asyncio
import aiohttp
from typing import Dict, Any, List, Optional, Set
from dataclasses import dataclass
from datetime import datetime, timedelta
import logging

from shared.events import event_bus, Event, WHALE_TRANSACTION_DETECTED, WHALE_ALERT_TRIGGERED
from shared.database.models import WhaleAlert

logger = logging.getLogger(__name__)


@dataclass
class WhaleTransaction:
    """–î–∞–Ω–Ω—ã–µ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∫–∏—Ç–∞."""
    tx_hash: str
    from_address: str
    to_address: str
    value_eth: float
    value_usd: float
    token_symbol: str
    block_number: int
    timestamp: datetime
    tx_type: str  # 'transfer', 'swap', 'unknown'


class LimitedWhaleService:
    """
    –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–∏—Ç–æ–≤.
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ API —Å —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏.
    """
    
    def __init__(self):
        self.running = False
        self._alerts: Dict[int, List[WhaleAlert]] = {}
        self._session: Optional[aiohttp.ClientSession] = None
        self._known_whale_addresses: Set[str] = set()
        self._eth_price_usd = 0.0
        self._btc_price_usd = 0.0
        
        # –ü—É–±–ª–∏—á–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –∫—Ä—É–ø–Ω—ã—Ö —Ö–æ–ª–¥–µ—Ä–æ–≤ (—Å—Ç–∞—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
        self._load_known_addresses()
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
        event_bus.subscribe("whale_tracker.check_user_alerts", self._check_user_alerts)
    
    def _load_known_addresses(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –∫–∏—Ç–æ–≤ –∏–∑ –ø—É–±–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤."""
        # –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –±–∏—Ä–∂ –∏ –∫—Ä—É–ø–Ω—ã—Ö —Ö–æ–ª–¥–µ—Ä–æ–≤ (–ø—É–±–ª–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
        known_addresses = [
            # Binance —Ö–æ–ª–æ–¥–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏
            "0x3f5ce5fbfe3e9af3971dd833d26ba9b5c936f0be",
            "0xd551234ae421e3bcba99a0da6d736074f22192ff",
            "0x564286362092d8e7936f0549571a803b203aaced",
            
            # Ethereum Foundation
            "0xde0b295669a9fd93d5f28d9ec85e40f4cb697bae",
            
            # –ö—Ä—É–ø–Ω—ã–µ DeFi –ø—Ä–æ—Ç–æ–∫–æ–ª—ã
            "0x5aa3393e361c2eb342408559309b3e873cd876d6",  # Uniswap
            "0x6b175474e89094c44da98b954eedeac495271d0f",  # MakerDAO
            
            # –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–∏—Ç—ã (–ø—É–±–ª–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
            "0x2f47b6497e13b2b1e735e3286c024dd8e1a68715",
            "0xab5c66752a9e8167967685f1450532fb96d5d24f"
        ]
        
        self._known_whale_addresses = set(addr.lower() for addr in known_addresses)
        logger.info(f"Loaded {len(self._known_whale_addresses)} known whale addresses")
    
    async def start(self) -> None:
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞."""
        if self.running:
            return
        
        self.running = True
        self._session = aiohttp.ClientSession(
            timeout=aiohttp.ClientTimeout(total=30)
        )
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–ª–µ—Ä—Ç—ã –∏–∑ –ë–î
        await self._load_alerts()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω (–±–µ–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏–∑-–∑–∞ API key)
        asyncio.create_task(self._monitor_prices())
        # –û–¢–ö–õ–Æ–ß–ï–ù–û: –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –±–µ–∑ API –∫–ª—é—á–∞
        # asyncio.create_task(self._monitor_large_transactions())
        
        await event_bus.publish(Event(
            type="system.module_started",
            data={"module": "whale_tracker", "limitation": "price_monitoring_only"},
            source_module="whale_tracker"
        ))
        
        logger.warning(
            "‚ö†Ô∏è Whale Tracker started in LIMITED mode. "
            "Only price monitoring enabled. Add Etherscan API key for transaction monitoring."
        )
    
    async def stop(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞."""
        self.running = False
        
        if self._session:
            await self._session.close()
        
        await event_bus.publish(Event(
            type="system.module_stopped",
            data={"module": "whale_tracker"},
            source_module="whale_tracker"
        ))
        
        logger.info("Whale Tracker service stopped")
    
    async def _monitor_prices(self) -> None:
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω ETH –∏ BTC –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏."""
        while self.running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –æ—Ç CoinGecko (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)
                async with self._session.get(
                    "https://api.coingecko.com/api/v3/simple/price",
                    params={
                        "ids": "ethereum,bitcoin",
                        "vs_currencies": "usd"
                    }
                ) as response:
                    if response.status == 200:
                        data = await response.json()
                        self._eth_price_usd = data.get("ethereum", {}).get("usd", 0)
                        self._btc_price_usd = data.get("bitcoin", {}).get("usd", 0)
                        
                        logger.debug(f"Updated prices: ETH=${self._eth_price_usd}, BTC=${self._btc_price_usd}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                await asyncio.sleep(300)
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"Error updating prices: {e}")
                await asyncio.sleep(300)
    
    # –û–¢–ö–õ–Æ–ß–ï–ù–û: –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –±–µ–∑ API –∫–ª—é—á–∞
    # async def _monitor_large_transactions –±—É–¥–µ—Ç –≤–∫–ª—é—á–µ–Ω –∫–æ–≥–¥–∞ –¥–æ–±–∞–≤—è—Ç API –∫–ª—é—á
    
    async def _check_user_alerts(self, event: Event) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            user_id = event.data.get("user_id")
            if not user_id or user_id not in self._alerts:
                return
            
            # –ü–æ–∫–∞ —á—Ç–æ —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º - –±–µ–∑ API –∫–ª—é—á–∞ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            logger.info(f"Whale alerts check requested for user {user_id} - API key needed for full functionality")
                
        except Exception as e:
            logger.error(f"Error checking user alerts: {e}")
    
    async def _load_alerts(self) -> None:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ –∏–∑ –ë–î."""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –∏–∑ –ë–î
        self._alerts = {}
    
    async def add_user_alert(
        self, 
        user_id: int, 
        threshold_usd: Optional[float] = None,
        threshold_btc: Optional[float] = None
    ) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            if not threshold_usd and not threshold_btc:
                return False
            
            if threshold_usd and (threshold_usd < 1000 or threshold_usd > 100000000):
                return False
            
            if threshold_btc and (threshold_btc < 0.1 or threshold_btc > 10000):
                return False
            
            import time
            alert = WhaleAlert(
                id=int(time.time() * 1000) % 2147483647,  # –í—Ä–µ–º–µ–Ω–Ω—ã–π ID
                user_id=user_id,
                threshold_usd=threshold_usd,
                threshold_btc=threshold_btc,
                is_active=True
            )
            
            if user_id not in self._alerts:
                self._alerts[user_id] = []
            
            self._alerts[user_id].append(alert)
            
            logger.info(f"Added whale alert for user {user_id} (requires API key for monitoring)")
            return True
            
        except Exception as e:
            logger.error(f"Error adding whale alert: {e}")
            return False
    
    def get_user_alerts(self, user_id: int) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        alerts = self._alerts.get(user_id, [])
        return [
            {
                "id": getattr(alert, 'id', 0),
                "threshold_usd": alert.threshold_usd,
                "threshold_btc": alert.threshold_btc,
                "is_active": alert.is_active
            }
            for alert in alerts
        ]
    
    def get_limitations_info(self) -> Dict[str, Any]:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è—Ö —Å–µ—Ä–≤–∏—Å–∞."""
        return {
            "title": "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Whale Tracker",
            "limitations": [
                "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Etherscan API –∫–ª—é—á –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π",
                "‚ùå –°–µ–π—á–∞—Å —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω ETH/BTC",
                "‚ùå –ù–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫—Ä—É–ø–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π",
                "‚ùå –ù–µ—Ç –∞–Ω–∞–ª–∏–∑–∞ DeFi –æ–ø–µ—Ä–∞—Ü–∏–π"
            ],
            "for_full_functionality": [
                "üîë –î–æ–±–∞–≤–∏—Ç—å Etherscan API –∫–ª—é—á –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é",
                "üí∞ Nansen API ($150/–º–µ—Å—è—Ü) - –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞",
                "üí∞ Glassnode API ($39/–º–µ—Å—è—Ü) - –¥–ª—è –æ–Ω—á–µ–π–Ω –º–µ—Ç—Ä–∏–∫", 
                "üí∞ –°–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è Ethereum –Ω–æ–¥–∞ ($500+/–º–µ—Å—è—Ü)"
            ],
            "what_works": [
                "‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω ETH –∏ BTC",
                "‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞–º–∏",
                "‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ API –∫–ª—é—á–∞"
            ]
        }