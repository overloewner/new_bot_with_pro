"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–∏—Ç–æ–≤."""

from aiogram import types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from shared.events import event_bus, Event, USER_COMMAND_RECEIVED


class WhaleStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤ –∫–∏—Ç–æ–≤."""
    waiting_threshold_type = State()
    waiting_threshold_value = State()


class WhaleHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–∏—Ç–æ–≤."""
    
    def __init__(self, whale_service):
        self.whale_service = whale_service
    
    async def show_whale_menu(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑ –º–µ–Ω—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–∏—Ç–æ–≤."""
        user_alerts = self.whale_service.get_user_alerts(callback.from_user.id)
        limitations = self.whale_service.get_limitations_info()
        
        builder = InlineKeyboardBuilder()
        builder.button(text="‚ÑπÔ∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è", callback_data="whale_limitations")
        builder.button(text="üîî –ú–æ–∏ –∞–ª–µ—Ä—Ç—ã", callback_data="whale_alerts")
        builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç", callback_data="whale_add_alert")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
        builder.adjust(1)
        
        text = (
            "üêã Whale Tracker (–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)\n\n"
            f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤: {len([a for a in user_alerts if a['is_active']])}\n\n"
            "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ API\n"
            "–ù–∞–∂–º–∏—Ç–µ '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è' –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π"
        )
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup())
        await callback.answer()
    
    async def show_limitations(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Å–µ—Ä–≤–∏—Å–∞."""
        limitations = self.whale_service.get_limitations_info()
        
        builder = InlineKeyboardBuilder()
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="whale_menu")
        
        text = f"‚ö†Ô∏è {limitations['title']}\n\n"
        
        text += "üö´ –¢–µ–∫—É—â–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:\n"
        for limit in limitations['limitations']:
            text += f"{limit}\n"
        
        text += "\n‚úÖ –ß—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n"
        for work in limitations['what_works']:
            text += f"{work}\n"
        
        text += "\nüí∞ –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –Ω—É–∂–Ω—ã:\n"
        for req in limitations['for_full_functionality']:
            text += f"{req}\n"
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup())
        await callback.answer()
    
    async def add_whale_alert_start(self, callback: types.CallbackQuery, state: FSMContext):
        """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞ –∫–∏—Ç–æ–≤."""
        await state.set_state(WhaleStates.waiting_threshold_type)
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üíµ –í –¥–æ–ª–ª–∞—Ä–∞—Ö USD", callback_data="whale_threshold_usd")
        builder.button(text="‚Çø –í –±–∏—Ç–∫–æ–∏–Ω–∞—Ö BTC", callback_data="whale_threshold_btc")
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="whale_menu")
        builder.adjust(1)
        
        await callback.message.edit_text(
            "üêã –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞ –∫–∏—Ç–æ–≤\n\n"
            "–í –∫–∞–∫–æ–π –≤–∞–ª—é—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ä–æ–≥?",
            reply_markup=builder.as_markup()
        )
        await callback.answer()
    
    async def process_threshold_type(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞ –ø–æ—Ä–æ–≥–∞."""
        threshold_type = callback.data.split("_")[-1]  # usd –∏–ª–∏ btc
        await state.update_data(threshold_type=threshold_type)
        await state.set_state(WhaleStates.waiting_threshold_value)
        
        if threshold_type == "usd":
            text = (
                "üíµ –ü–æ—Ä–æ–≥ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –≤ USD:\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 1000000 (–¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π > $1M)\n"
                "–î–∏–∞–ø–∞–∑–æ–Ω: $1,000 - $100,000,000"
            )
        else:
            text = (
                "‚Çø –ü–æ—Ä–æ–≥ –≤ –±–∏—Ç–∫–æ–∏–Ω–∞—Ö\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –≤ BTC:\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 10 (–¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π > 10 BTC)\n"
                "–î–∏–∞–ø–∞–∑–æ–Ω: 0.1 - 10,000 BTC"
            )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="whale_menu")
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup())
        await callback.answer()
    
    async def process_threshold_value(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Ä–æ–≥–∞."""
        try:
            data = await state.get_data()
            threshold_type = data.get("threshold_type")
            threshold_value = float(message.text.strip())
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            if threshold_type == "usd":
                if threshold_value < 1000 or threshold_value > 100000000:
                    await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç $1,000 –¥–æ $100,000,000")
                    return
                
                success = await self.whale_service.add_user_alert(
                    message.from_user.id,
                    threshold_usd=threshold_value
                )
                
                if success:
                    text = f"‚úÖ –ê–ª–µ—Ä—Ç –¥–æ–±–∞–≤–ª–µ–Ω!\n–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö > ${threshold_value:,.0f}"
                else:
                    text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–ª–µ—Ä—Ç–∞"
                    
            else:  # btc
                if threshold_value < 0.1 or threshold_value > 10000:
                    await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 0.1 –¥–æ 10,000 BTC")
                    return
                
                success = await self.whale_service.add_user_alert(
                    message.from_user.id,
                    threshold_btc=threshold_value
                )
                
                if success:
                    text = f"‚úÖ –ê–ª–µ—Ä—Ç –¥–æ–±–∞–≤–ª–µ–Ω!\n–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö > {threshold_value} BTC"
                else:
                    text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–ª–µ—Ä—Ç–∞"
            
            await state.clear()
            await message.answer(text)
            
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")

