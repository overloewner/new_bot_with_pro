# modules/whales/handlers/whale_handlers.py
"""–ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—á–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Whale Tracker."""

from aiogram import types, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from shared.events import event_bus, Event, USER_COMMAND_RECEIVED
from shared.utils.logger import get_module_logger

logger = get_module_logger("whale_handlers")


class WhaleStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤ –∫–∏—Ç–æ–≤."""
    waiting_threshold_type = State()
    waiting_threshold_value = State()
    waiting_token_filter = State()


class WhaleHandlers:
    """–ü–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Whale Tracker."""
    
    def __init__(self, whale_service):
        self.whale_service = whale_service
        self.router = Router()
    
    def register_handlers(self, dp):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
        
        # –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´
        self.router.callback_query(F.data == "whale_tracker")(self.show_whale_menu)
        self.router.callback_query(F.data == "whale_menu")(self.show_whale_menu)
        self.router.callback_query(F.data == "whale_limitations")(self.show_limitations)
        self.router.callback_query(F.data == "whale_alerts")(self.show_whale_alerts)
        self.router.callback_query(F.data == "whale_add_alert")(self.add_whale_alert_start)
        self.router.callback_query(F.data == "whale_upgrade_info")(self.show_upgrade_info)
        
        # –°–û–ó–î–ê–ù–ò–ï –ê–õ–ï–†–¢–ê
        self.router.callback_query(F.data.startswith("whale_threshold_"))(self.process_threshold_type)
        self.router.message(WhaleStates.waiting_threshold_value)(self.process_threshold_value)
        
        # –ë–´–°–¢–†–´–ï –ö–ù–û–ü–ö–ò
        self.router.callback_query(F.data.startswith("whale_quick_"))(self.process_quick_threshold)
        
        # –£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–õ–ï–†–¢–ê–ú–ò
        self.router.callback_query(F.data.startswith("whale_toggle_"))(self.toggle_whale_alert)
        self.router.callback_query(F.data.startswith("whale_delete_"))(self.delete_whale_alert)
        self.router.callback_query(F.data.startswith("whale_edit_"))(self.edit_whale_alert)
        
        # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
        self.router.callback_query(F.data == "whale_statistics")(self.show_whale_statistics)
        self.router.callback_query(F.data == "whale_history")(self.show_whale_history)
        self.router.callback_query(F.data == "whale_settings")(self.show_whale_settings)
        
        dp.include_router(self.router)
    
    async def show_whale_menu(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑ –º–µ–Ω—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–∏—Ç–æ–≤."""
        user_alerts = []
        if self.whale_service:
            user_alerts = self.whale_service.get_user_alerts(callback.from_user.id)
        
        limitations = {}
        if self.whale_service:
            limitations = self.whale_service.get_limitations_info()
        
        active_alerts = len([a for a in user_alerts if a.get('is_active', False)])
        
        text = (
            "üêã <b>Whale Tracker</b>\n"
            "<i>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è</i>\n\n"
            
            f"üîî <b>–í–∞—à–∏ –∞–ª–µ—Ä—Ç—ã:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: {len(user_alerts)}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_alerts}\n"
            f"‚Ä¢ –õ–∏–º–∏—Ç: 10 –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
            
            "‚ö†Ô∏è <b>–¢–µ–∫—É—â–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</b>\n"
            "‚Ä¢ –¢—Ä–µ–±—É–µ—Ç—Å—è Etherscan API –∫–ª—é—á\n"
            "‚Ä¢ –¢–æ–ª—å–∫–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω ETH/BTC\n"
            "‚Ä¢ –ù–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n\n"
            
            "üéØ –ß—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ —Å–µ–π—á–∞—Å:"
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üìä –ú–æ–∏ –∞–ª–µ—Ä—Ç—ã", callback_data="whale_alerts")
        builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç", callback_data="whale_add_alert")
        builder.button(text="‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è", callback_data="whale_limitations")
        builder.button(text="üí∞ Upgrade –ø–ª–∞–Ω", callback_data="whale_upgrade_info")
        builder.button(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="whale_statistics")
        builder.button(text="üìã –ò—Å—Ç–æ—Ä–∏—è", callback_data="whale_history")
        builder.button(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="whale_settings")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
        builder.adjust(2, 2, 2, 1, 1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
    
    async def show_limitations(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Å–µ—Ä–≤–∏—Å–∞."""
        limitations = {}
        if self.whale_service:
            limitations = self.whale_service.get_limitations_info()
        
        text = (
            f"‚ö†Ô∏è <b>{limitations.get('title', '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Whale Tracker')}</b>\n\n"
            
            "üö´ <b>–¢–µ–∫—É—â–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</b>\n"
        )
        
        for limit in limitations.get('limitations', []):
            text += f"‚Ä¢ {limit}\n"
        
        text += "\n‚úÖ <b>–ß—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>\n"
        for work in limitations.get('what_works', []):
            text += f"‚Ä¢ {work}\n"
        
        text += "\nüí∞ <b>–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –Ω—É–∂–Ω—ã:</b>\n"
        for req in limitations.get('for_full_functionality', []):
            text += f"‚Ä¢ {req}\n"
        
        text += (
            "\nüí° <b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø:</b>\n"
            "1. –ü–æ–ª—É—á–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API –∫–ª—é—á –Ω–∞ etherscan.io\n"
            "2. –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ .env —Ñ–∞–π–ª\n"
            "3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞\n\n"
            
            "üöÄ –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ:\n"
            "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫—Ä—É–ø–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏–∑ –¥–≤–∏–∂–µ–Ω–∏–π –∫–∏—Ç–æ–≤\n"
            "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üí∞ Upgrade –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="whale_upgrade_info")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="whale_menu")
        builder.adjust(1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
    
    async def show_whale_alerts(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑ –∞–ª–µ—Ä—Ç–æ–≤ –∫–∏—Ç–æ–≤."""
        user_alerts = []
        if self.whale_service:
            user_alerts = self.whale_service.get_user_alerts(callback.from_user.id)
        
        if not user_alerts:
            text = (
                "üìä <b>–ú–æ–∏ –∞–ª–µ—Ä—Ç—ã –∫–∏—Ç–æ–≤</b>\n\n"
                "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤\n\n"
                "üí° –°–æ–∑–¥–∞–π—Ç–µ –∞–ª–µ—Ä—Ç, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
                "–æ –∫—Ä—É–ø–Ω—ã—Ö –¥–≤–∏–∂–µ–Ω–∏—è—Ö –Ω–∞ —Ä—ã–Ω–∫–µ!\n\n"
                
                "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –°–µ–π—á–∞—Å —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ\n"
                "–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω ETH/BTC. –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n"
                "—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω—É–∂–µ–Ω API –∫–ª—é—á."
            )
            
            builder = InlineKeyboardBuilder()
            builder.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π –∞–ª–µ—Ä—Ç", callback_data="whale_add_alert")
            builder.button(text="‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è", callback_data="whale_limitations")
            builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="whale_menu")
            builder.adjust(1)
        else:
            text = f"üìä <b>–ú–æ–∏ –∞–ª–µ—Ä—Ç—ã –∫–∏—Ç–æ–≤ ({len(user_alerts)})</b>\n\n"
            
            builder = InlineKeyboardBuilder()
            
            for i, alert in enumerate(user_alerts, 1):
                status = "üü¢" if alert.get('is_active', True) else "üî¥"
                
                text += f"{status} <b>–ê–ª–µ—Ä—Ç #{i}</b>\n"
                
                if alert.get('threshold_usd'):
                    text += f"   üíµ –ü–æ—Ä–æ–≥: ${alert['threshold_usd']:,.0f}\n"
                if alert.get('threshold_btc'):
                    text += f"   ‚Çø –ü–æ—Ä–æ–≥: {alert['threshold_btc']} BTC\n"
                
                text += f"   üîî –°—Ä–∞–±–∞—Ç—ã–≤–∞–ª: {alert.get('times_triggered', 0)} —Ä–∞–∑\n"
                
                if alert.get('last_triggered'):
                    from datetime import datetime
                    last_time = datetime.fromisoformat(alert['last_triggered'])
                    text += f"   üïê –ü–æ—Å–ª–µ–¥–Ω–∏–π: {last_time.strftime('%d.%m %H:%M')}\n"
                
                text += "\n"
                
                # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                alert_id = alert.get('id', i)
                if alert.get('is_active', True):
                    builder.button(text=f"‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å #{i}", callback_data=f"whale_toggle_{alert_id}")
                else:
                    builder.button(text=f"‚ñ∂Ô∏è –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å #{i}", callback_data=f"whale_toggle_{alert_id}")
                
                builder.button(text=f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å #{i}", callback_data=f"whale_delete_{alert_id}")
            
            builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç", callback_data="whale_add_alert")
            builder.button(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Å–µ—Ö", callback_data="whale_settings")
            builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="whale_menu")
            builder.adjust(2)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
    
    async def add_whale_alert_start(self, callback: types.CallbackQuery, state: FSMContext):
        """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞ –∫–∏—Ç–æ–≤."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∞–ª–µ—Ä—Ç–æ–≤
        if self.whale_service:
            user_alerts = self.whale_service.get_user_alerts(callback.from_user.id)
            if len(user_alerts) >= 10:
                await callback.answer("‚ùå –ú–∞–∫—Å–∏–º—É–º 10 –∞–ª–µ—Ä—Ç–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                return
        
        await state.set_state(WhaleStates.waiting_threshold_type)
        
        text = (
            "üêã <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞ –∫–∏—Ç–æ–≤</b>\n\n"
            
            "üí∞ <b>–®–∞–≥ 1/2:</b> –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –ø–æ—Ä–æ–≥–∞\n\n"
            
            "–í –∫–∞–∫–æ–π –≤–∞–ª—é—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é\n"
            "—Å—É–º–º—É –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π?"
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üíµ –î–æ–ª–ª–∞—Ä—ã –°–®–ê (USD)", callback_data="whale_threshold_usd")
        builder.button(text="‚Çø –ë–∏—Ç–∫–æ–∏–Ω—ã (BTC)", callback_data="whale_threshold_btc")
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="whale_menu")
        builder.adjust(1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
    
    async def process_threshold_type(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞ –ø–æ—Ä–æ–≥–∞."""
        threshold_type = callback.data.split("_")[-1]  # usd –∏–ª–∏ btc
        await state.update_data(threshold_type=threshold_type)
        await state.set_state(WhaleStates.waiting_threshold_value)
        
        if threshold_type == "usd":
            text = (
                "üíµ <b>–ü–æ—Ä–æ–≥ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö –°–®–ê</b>\n\n"
                
                "üí∞ <b>–®–∞–≥ 2/2:</b> –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É\n\n"
                
                "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
                "–æ –∫—Ä—É–ø–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö:\n\n"
                
                "üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
                "‚Ä¢ 100000 - —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–≤—ã—à–µ $100K\n"
                "‚Ä¢ 1000000 - —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–≤—ã—à–µ $1M\n"
                "‚Ä¢ 10000000 - —Ç–æ–ª—å–∫–æ –æ—á–µ–Ω—å –∫—Ä—É–ø–Ω—ã–µ\n\n"
                
                "üìù –î–∏–∞–ø–∞–∑–æ–Ω: $1,000 - $100,000,000"
            )
            
            builder = InlineKeyboardBuilder()
            builder.button(text="$100K", callback_data="whale_quick_100000")
            builder.button(text="$500K", callback_data="whale_quick_500000")
            builder.button(text="$1M", callback_data="whale_quick_1000000")
            builder.button(text="$5M", callback_data="whale_quick_5000000")
            builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="whale_menu")
            builder.adjust(2, 2, 1)
        else:
            text = (
                "‚Çø <b>–ü–æ—Ä–æ–≥ –≤ –±–∏—Ç–∫–æ–∏–Ω–∞—Ö</b>\n\n"
                
                "üí∞ <b>–®–∞–≥ 2/2:</b> –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É\n\n"
                
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ BTC –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
                "–æ –∫—Ä—É–ø–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö:\n\n"
                
                "üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
                "‚Ä¢ 10 - —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–≤—ã—à–µ 10 BTC\n"
                "‚Ä¢ 50 - —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–≤—ã—à–µ 50 BTC\n"
                "‚Ä¢ 100 - —Ç–æ–ª—å–∫–æ –æ—á–µ–Ω—å –∫—Ä—É–ø–Ω—ã–µ\n\n"
                
                "üìù –î–∏–∞–ø–∞–∑–æ–Ω: 0.1 - 10,000 BTC"
            )
            
            builder = InlineKeyboardBuilder()
            builder.button(text="10 BTC", callback_data="whale_quick_10")
            builder.button(text="50 BTC", callback_data="whale_quick_50")
            builder.button(text="100 BTC", callback_data="whale_quick_100")
            builder.button(text="500 BTC", callback_data="whale_quick_500")
            builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="whale_menu")
            builder.adjust(2, 2, 1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
    
    async def process_quick_threshold(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä—ã—Ö –∫–Ω–æ–ø–æ–∫ –ø–æ—Ä–æ–≥–∞."""
        threshold_value = float(callback.data.split("_")[-1])
        
        data = await state.get_data()
        threshold_type = data.get("threshold_type")
        
        # –°–æ–∑–¥–∞–µ–º –∞–ª–µ—Ä—Ç
        await self._create_whale_alert(callback, state, threshold_type, threshold_value)
    
    async def process_threshold_value(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Ä–æ–≥–∞."""
        try:
            data = await state.get_data()
            threshold_type = data.get("threshold_type")
            threshold_value = float(message.text.strip().replace(',', '').replace(',' ''))
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            if threshold_type == "usd":
                if threshold_value < 1000 or threshold_value > 100000000:
                    await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç $1,000 –¥–æ $100,000,000")
                    return
            else:  # btc
                if threshold_value < 0.1 or threshold_value > 10000:
                    await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 0.1 –¥–æ 10,000 BTC")
                    return
            
            # –°–æ–∑–¥–∞–µ–º –∞–ª–µ—Ä—Ç
            await self._create_whale_alert(message, state, threshold_type, threshold_value)
            
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
    
    async def _create_whale_alert(self, event, state: FSMContext, threshold_type: str, threshold_value: float):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞ –∫–∏—Ç–∞."""
        try:
            user_id = event.from_user.id if hasattr(event, 'from_user') else event.message.chat.id
            
            # –°–æ–∑–¥–∞–µ–º –∞–ª–µ—Ä—Ç —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
            if self.whale_service:
                if threshold_type == "usd":
                    success = await self.whale_service.add_user_alert(
                        user_id,
                        threshold_usd=threshold_value
                    )
                else:
                    success = await self.whale_service.add_user_alert(
                        user_id,
                        threshold_btc=threshold_value
                    )
            else:
                success = False
            
            if success:
                currency = "$" if threshold_type == "usd" else " BTC"
                formatted_value = f"{threshold_value:,.0f}" if threshold_type == "usd" else f"{threshold_value}"
                
                text = (
                    "‚úÖ <b>–ê–ª–µ—Ä—Ç —Å–æ–∑–¥–∞–Ω!</b>\n\n"
                    
                    f"üéØ <b>–£—Å–ª–æ–≤–∏–µ:</b> –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ > {formatted_value}{currency}\n"
                    f"üîî <b>–°—Ç–∞—Ç—É—Å:</b> –ê–∫—Ç–∏–≤–µ–Ω\n\n"
                    
                    "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –°–µ–π—á–∞—Å —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ\n"
                    "–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω. –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n"
                    "–Ω—É–∂–µ–Ω Etherscan API –∫–ª—é—á.\n\n"
                    
                    "üí° –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á –Ω–∞ etherscan.io\n"
                    "–∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞!"
                )
            else:
                text = (
                    "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–ª–µ—Ä—Ç–∞</b>\n\n"
                    
                    "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                    "‚Ä¢ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∞–ª–µ—Ä—Ç–æ–≤ (10)\n"
                    "‚Ä¢ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n"
                    "‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã\n\n"
                    
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ"
                )
            
            builder = InlineKeyboardBuilder()
            builder.button(text="üìä –ú–æ–∏ –∞–ª–µ—Ä—Ç—ã", callback_data="whale_alerts")
            builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data="whale_add_alert")
            builder.button(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="whale_menu")
            builder.adjust(2, 1)
            
            if hasattr(event, 'message'):
                await event.answer(text, reply_markup=builder.as_markup(), parse_mode="HTML")
            else:
                await event.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
                await event.answer()
            
            await state.clear()
            
        except Exception as e:
            logger.error(f"Error creating whale alert: {e}")
            error_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–ª–µ—Ä—Ç–∞"
            
            if hasattr(event, 'message'):
                await event.answer(error_text)
            else:
                await event.message.answer(error_text)
    
    async def toggle_whale_alert(self, callback: types.CallbackQuery):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–ª–µ—Ä—Ç–∞."""
        await callback.answer("üîÑ –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        await self.show_whale_alerts(callback)
    
    async def delete_whale_alert(self, callback: types.CallbackQuery):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞ –∫–∏—Ç–∞."""
        alert_id = callback.data.split("_")[-1]
        
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        await callback.answer("üóëÔ∏è –ê–ª–µ—Ä—Ç —É–¥–∞–ª–µ–Ω")
        await self.show_whale_alerts(callback)
    
    async def edit_whale_alert(self, callback: types.CallbackQuery):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞."""
        await callback.answer("‚öôÔ∏è –§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    async def show_upgrade_info(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± upgrade."""
        text = (
            "üí∞ <b>Upgrade Whale Tracker</b>\n\n"
            
            "üöÄ <b>–ü–æ–ª—É—á–∏—Ç–µ –ø–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:</b>\n\n"
            
            "üÜì <b>–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Å–ø–æ—Å–æ–±:</b>\n"
            "1. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ etherscan.io\n"
            "2. –ü–æ–ª—É—á–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API –∫–ª—é—á\n"
            "3. –î–æ–±–∞–≤—å—Ç–µ –≤ .env —Ñ–∞–π–ª:\n"
            "   ETHERSCAN_API_KEY=–≤–∞—à_–∫–ª—é—á\n"
            "4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞\n\n"
            
            "üíé <b>Premium –≤–∞—Ä–∏–∞–Ω—Ç—ã:</b>\n"
            "‚Ä¢ Nansen API ($150/–º–µ—Å) - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n"
            "‚Ä¢ Glassnode API ($39/–º–µ—Å) - –æ–Ω—á–µ–π–Ω –º–µ—Ç—Ä–∏–∫–∏\n"
            "‚Ä¢ –°–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è Ethereum –Ω–æ–¥–∞ ($500+/–º–µ—Å)\n\n"
            
            "‚ú® <b>–ß—Ç–æ –ø–æ–ª—É—á–∏—Ç–µ —Å API –∫–ª—é—á–æ–º:</b>\n"
            "‚Ä¢ ‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫—Ä—É–ø–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n"
            "‚Ä¢ ‚úÖ –ê–Ω–∞–ª–∏–∑ –¥–≤–∏–∂–µ–Ω–∏–π –∫–∏—Ç–æ–≤\n"
            "‚Ä¢ ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n"
            "‚Ä¢ ‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–æ–∫–µ–Ω–∞–º\n"
            "‚Ä¢ ‚úÖ –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
            
            "üéØ <b>–°–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ:</b>\n"
            "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤\n"
            "‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω ETH/BTC\n"
            "‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üîó –ü–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á", url="https://etherscan.io/apis")
        builder.button(text="‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="whale_api_help")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="whale_menu")
        builder.adjust(1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
    
    async def show_whale_statistics(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∏—Ç–æ–≤."""
        user_alerts = []
        if self.whale_service:
            user_alerts = self.whale_service.get_user_alerts(callback.from_user.id)
        
        active_alerts = len([a for a in user_alerts if a.get('is_active', True)])
        total_triggers = sum(a.get('times_triggered', 0) for a in user_alerts)
        
        text = (
            "üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Whale Tracker</b>\n\n"
            
            f"üë§ <b>–í–∞—à–∏ –∞–ª–µ—Ä—Ç—ã:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: {len(user_alerts)}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_alerts}\n"
            f"‚Ä¢ –û–±—â–∏—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π: {total_triggers}\n\n"
            
            "üîß <b>–°–∏—Å—Ç–µ–º–∞:</b>\n"
            f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {'üü¢ –†–∞–±–æ—Ç–∞–µ—Ç' if self.whale_service and self.whale_service.running else 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}\n"
            f"‚Ä¢ –†–µ–∂–∏–º: ‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π (–±–µ–∑ API)\n"
            f"‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: üîç –¢–æ–ª—å–∫–æ —Ü–µ–Ω—ã ETH/BTC\n\n"
            
            "üìä <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
            "‚Ä¢ ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤\n"
            "‚Ä¢ ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä–æ–≥–æ–≤ USD/BTC\n"
            "‚Ä¢ ‚ùå –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n"
            "‚Ä¢ ‚ùå –ê–Ω–∞–ª–∏–∑ –∫–∏—Ç–æ–≤\n"
            "‚Ä¢ ‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n\n"
            
            "üí° –î–æ–±–∞–≤—å—Ç–µ Etherscan API –∫–ª—é—á –¥–ª—è\n–ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞!"
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="whale_statistics")
        builder.button(text="üí∞ Upgrade", callback_data="whale_upgrade_info")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="whale_menu")
        builder.adjust(2, 1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
    
    async def show_whale_history(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤."""
        text = (
            "üìã <b>–ò—Å—Ç–æ—Ä–∏—è –∞–ª–µ—Ä—Ç–æ–≤ –∫–∏—Ç–æ–≤</b>\n\n"
            
            "üìä <b>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:</b>\n"
            "‚Ä¢ –°—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π: 0\n"
            "‚Ä¢ –ö—Ä—É–ø–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
            "‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n\n"
            
            "üìà <b>–ó–∞ –Ω–µ–¥–µ–ª—é:</b>\n"
            "‚Ä¢ –°—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π: 0\n"
            "‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n\n"
            
            "‚ö†Ô∏è <b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º</b>\n"
            "–ò—Å—Ç–æ—Ä–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –±–µ–∑ API –∫–ª—é—á–∞.\n\n"
            
            "üí° –ü–æ–ª—É—á–∏—Ç–µ Etherscan API –∫–ª—é—á –¥–ª—è:\n"
            "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏–∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–∏—Ç–æ–≤\n"
            "‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üí∞ –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="whale_upgrade_info")
        builder.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="whale_statistics")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="whale_menu")
        builder.adjust(1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
    
    async def show_whale_settings(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Whale Tracker."""
        text = (
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Whale Tracker</b>\n\n"
            
            "üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>\n"
            "‚Ä¢ Telegram –∞–ª–µ—Ä—Ç—ã: üü¢ –í–∫–ª—é—á–µ–Ω—ã\n"
            "‚Ä¢ –ó–≤—É–∫–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã: üü¢ –í–∫–ª—é—á–µ–Ω—ã\n"
            "‚Ä¢ –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞: üü¢ –í–∫–ª—é—á–µ–Ω–∞\n\n"
            
            "‚è∞ <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª—ã:</b>\n"
            "‚Ä¢ Cooldown –∞–ª–µ—Ä—Ç–æ–≤: 5 –º–∏–Ω—É—Ç\n"
            "‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: 30 —Å–µ–∫—É–Ω–¥\n\n"
            
            "üéØ <b>–§–∏–ª—å—Ç—Ä—ã:</b>\n"
            "‚Ä¢ –ú–∏–Ω–∏–º—É–º USD: –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –≤ –∞–ª–µ—Ä—Ç–µ\n"
            "‚Ä¢ –ú–∏–Ω–∏–º—É–º BTC: –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –≤ –∞–ª–µ—Ä—Ç–µ\n"
            "‚Ä¢ –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –±–∏—Ä–∂–∏: ‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n"
            "‚Ä¢ –§–∏–ª—å—Ç—Ä —Ç–æ–∫–µ–Ω–æ–≤: ‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n\n"
            
            "‚ö†Ô∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n–±–µ–∑ API –∫–ª—é—á–∞"
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="whale_settings_notifications")
        builder.button(text="‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã", callback_data="whale_settings_intervals")
        builder.button(text="üéØ –§–∏–ª—å—Ç—Ä—ã", callback_data="whale_settings_filters")
        builder.button(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å", callback_data="whale_settings_reset")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="whale_menu")
        builder.adjust(2, 2, 1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
    
    def get_stats(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
        return {
            "service_connected": self.whale_service is not None,
            "service_running": self.whale_service.running if self.whale_service else False,
            "handlers_registered": "whale_handlers_module"
        }