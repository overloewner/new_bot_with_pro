# modules/telegram/handlers/main_handler.py
"""–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≥–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å —Ä–∞–±–æ—á–∏–º–∏ callback handlers."""

from datetime import datetime
from typing import Any, Dict, Optional
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from modules.telegram.keyboards.main_keyboards import MainKeyboards
from shared.events import event_bus, Event, USER_COMMAND_RECEIVED
from shared.cache.memory_cache import cache_manager

import logging

logger = logging.getLogger(__name__)


class MainHandler:
    """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ —Å –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é."""
    
    def __init__(self):
        self.router = Router()
        self.keyboards = MainKeyboards()
        self.cache = cache_manager.get_cache('telegram')
        
        # –°–µ—Ä–≤–∏—Å—ã (–±—É–¥—É—Ç –∏–Ω–∂–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω—ã)
        self.price_alerts_service = None
        self.gas_tracker_service = None
        self.whale_service = None
        self.wallet_service = None
    
    def set_services(self, **services):
        """–ò–Ω—ä–µ–∫—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤."""
        self.price_alerts_service = services.get('price_alerts')
        self.gas_tracker_service = services.get('gas_tracker')
        self.whale_service = services.get('whale_tracker')
        self.wallet_service = services.get('wallet_tracker')
    
    def register(self, dp):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
        # –ö–æ–º–∞–Ω–¥—ã
        self.router.message(Command("start"))(self.cmd_start)
        self.router.message(Command("help"))(self.cmd_help)
        self.router.message(Command("status"))(self.cmd_status)
        
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        self.router.callback_query(F.data == "main_menu")(self.show_main_menu)
        
        # –ú–æ–¥—É–ª–∏ - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.router.callback_query(F.data == "price_alerts")(self.show_price_alerts_menu)
        self.router.callback_query(F.data == "gas_tracker")(self.show_gas_tracker_menu)
        self.router.callback_query(F.data == "whale_tracker")(self.show_whale_tracker_menu)
        self.router.callback_query(F.data == "wallet_tracker")(self.show_wallet_tracker_menu)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        self.router.callback_query(F.data == "settings")(self.show_settings)
        self.router.callback_query(F.data == "about")(self.show_about)
        self.router.callback_query(F.data == "cmd_status")(self.cmd_status_callback)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –º–µ–Ω—é
        self._register_additional_handlers()
        
        dp.include_router(self.router)
    
    def _register_additional_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
        # Settings handlers
        self.router.callback_query(F.data == "settings_notifications")(self.toggle_notifications)
        self.router.callback_query(F.data == "settings_stats")(self.show_user_stats)
        
        # About handlers
        self.router.callback_query(F.data == "about_changelog")(self.show_changelog)
        self.router.callback_query(F.data == "about_tech")(self.show_tech_info)
        
        # Status handlers
        self.router.callback_query(F.data.startswith("status_"))(self.handle_status_actions)
    
    async def cmd_start(self, message: types.Message):
        """–ö–æ–º–∞–Ω–¥–∞ /start —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é."""
        user_id = message.from_user.id
        username = message.from_user.username
        
        # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        await event_bus.publish(Event(
            type=USER_COMMAND_RECEIVED,
            data={
                "user_id": user_id,
                "command": "start",
                "username": username,
                "first_name": message.from_user.first_name
            },
            source_module="telegram"
        ))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
        cache_key = f"user_stats:{user_id}"
        user_stats = await self.cache.get(cache_key, {})
        
        welcome_text = (
            f"ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å{', ' + message.from_user.first_name if message.from_user.first_name else ''}!</b>\n\n"
            
            "üöÄ <b>Crypto Monitor Bot v2.0</b>\n"
            "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n\n"
            
            "üìä <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥—É–ª–∏:</b>\n"
            "üìà <b>Price Alerts</b> - –£–º–Ω—ã–µ —Ü–µ–Ω–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
            "‚õΩ <b>Gas Tracker</b> - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥–∞–∑–∞ Ethereum\n"
            "üêã <b>Whale Tracker</b> - –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫—Ä—É–ø–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n"
            "üëõ <b>Wallet Tracker</b> - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–æ—à–µ–ª—å–∫–æ–≤\n\n"
        )
        
        if user_stats:
            welcome_text += f"üìà –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            welcome_text += f"‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ –∞–ª–µ—Ä—Ç–æ–≤: {user_stats.get('alerts_received', 0)}\n"
            welcome_text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤: {user_stats.get('active_presets', 0)}\n\n"
        
        welcome_text += (
            "‚ú® <b>–ù–æ–≤–æ–µ –≤ v2.0:</b>\n"
            "‚Ä¢ –ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞\n"
            "‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n"
            "‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
            
            "‚ö° –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:"
        )
        
        keyboard = self.keyboards.get_main_menu_keyboard()
        await message.answer(welcome_text, reply_markup=keyboard, parse_mode="HTML")
    
    async def cmd_help(self, message: types.Message):
        """–ö–æ–º–∞–Ω–¥–∞ /help —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π."""
        help_text = (
            "üìñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ Crypto Monitor Bot</b>\n\n"
            
            "<b>üéØ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
            "/help - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ (—ç—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞)\n"
            "/status - –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π —Å–∏—Å—Ç–µ–º—ã\n\n"
            
            "<b>üìà Price Alerts - –¶–µ–Ω–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>\n"
            "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤\n"
            "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–æ 500 –ø–∞—Ä –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ\n"
            "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è (0.1% - 100%)\n"
            "‚Ä¢ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã (1m - 1d)\n"
            "‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –æ–±—ä–µ–º—É —Ç–æ—Ä–≥–æ–≤\n"
            "‚Ä¢ –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n"
            
            "<b>‚õΩ Gas Tracker - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥–∞–∑–∞:</b>\n"
            "‚Ä¢ –¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –≥–∞–∑–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n"
            "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–∞\n"
            "‚Ä¢ 4 —É—Ä–æ–≤–Ω—è —Å–∫–æ—Ä–æ—Å—Ç–∏ (Safe/Standard/Fast/Instant)\n"
            "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n"
            
            "<b>üêã Whale Tracker - –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–∏—Ç–æ–≤:</b>\n"
            "‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫—Ä—É–ø–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n"
            "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä–æ–≥–æ–≤ –≤ USD –∏–ª–∏ BTC\n"
            "‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø–∞–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n"
            "‚ö†Ô∏è <i>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è (—Ç—Ä–µ–±—É–µ—Ç API –∫–ª—é—á–∏)</i>\n\n"
            
            "<b>üëõ Wallet Tracker - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–æ—à–µ–ª—å–∫–æ–≤:</b>\n"
            "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–æ 5 –∫–æ—à–µ–ª—å–∫–æ–≤\n"
            "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Ö–æ–¥—è—â–∏—Ö/–∏—Å—Ö–æ–¥—è—â–∏—Ö\n"
            "‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º–µ\n"
            "‚ö†Ô∏è <i>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 2-5 –º–∏–Ω—É—Ç</i>\n\n"
            
            "<b>‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
            "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
            "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
            "‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö\n"
            "‚Ä¢ –ú–Ω–æ–≥–æ—è–∑—ã—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
            
            "<b>üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</b>\n"
            "‚Ä¢ –ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞\n"
            "‚Ä¢ –û—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å\n"
            "‚Ä¢ –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏\n"
            "‚Ä¢ –ó–∞—â–∏—Ç–∞ –æ—Ç Rate Limiting\n\n"
            
            "‚ùì <b>–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?</b>\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
        )
        
        keyboard = self.keyboards.get_help_keyboard()
        await message.answer(help_text, reply_markup=keyboard, parse_mode="HTML")
    
    async def cmd_status(self, message: types.Message):
        """–ö–æ–º–∞–Ω–¥–∞ /status —Å —Ä–µ–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–æ–¥—É–ª—è—Ö."""
        await self._show_status(message)
    
    async def cmd_status_callback(self, callback: types.CallbackQuery):
        """Callback –¥–ª—è –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ç—É—Å–∞."""
        await self._show_status(callback.message, callback=callback)
    
    async def _show_status(self, message: types.Message, callback: Optional[types.CallbackQuery] = None):
        """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã."""
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å EventBus
        event_stats = event_bus.get_stats()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–µ—à–µ–π
        cache_stats = cache_manager.get_all_stats()
        
        status_text = (
            "üìä <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã Crypto Monitor Bot</b>\n\n"
            
            "<b>üîß –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏:</b>\n"
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–≥–æ –º–æ–¥—É–ª—è
        modules_status = {
            "üìà Price Alerts": self._check_service_status(self.price_alerts_service),
            "‚õΩ Gas Tracker": self._check_service_status(self.gas_tracker_service),
            "üêã Whale Tracker": self._check_service_status(self.whale_service),
            "üëõ Wallet Tracker": self._check_service_status(self.wallet_service)
        }
        
        for module_name, status in modules_status.items():
            status_icon = "üü¢" if status["running"] else "üî¥"
            status_text += f"{status_icon} {module_name}: {status['status']}\n"
        
        status_text += (
            f"\n<b>üì° Event System:</b>\n"
            f"‚Ä¢ –¢–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π: {event_stats['event_types']}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {event_stats['total_handlers']}\n"
            f"‚Ä¢ –ù–µ–∏—Å–ø—Ä–∞–≤–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {event_stats['failed_handlers']}\n"
        )
        
        if cache_stats:
            status_text += f"\n<b>üíæ –°–∏—Å—Ç–µ–º–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n"
            total_entries = sum(stats.get('total_entries', 0) for stats in cache_stats.values())
            total_memory = sum(stats.get('memory_usage_mb', 0) for stats in cache_stats.values())
            status_text += f"‚Ä¢ –ó–∞–ø–∏—Å–µ–π –≤ –∫–µ—à–µ: {total_entries}\n"
            status_text += f"‚Ä¢ –ü–∞–º—è—Ç—å: {total_memory:.1f} MB\n"
        
        status_text += f"\nüïê <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</b> {datetime.now().strftime('%H:%M:%S')}"
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="cmd_status")
        builder.button(text="üìä –î–µ—Ç–∞–ª–∏", callback_data="status_details")
        builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        builder.adjust(2, 1)
        
        if callback:
            await callback.message.edit_text(status_text, reply_markup=builder.as_markup(), parse_mode="HTML")
            await callback.answer("üîÑ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω")
        else:
            await message.answer(status_text, reply_markup=builder.as_markup(), parse_mode="HTML")
    
    def _check_service_status(self, service) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞."""
        if service is None:
            return {"running": False, "status": "–ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"}
        
        if hasattr(service, 'running'):
            if service.running:
                return {"running": True, "status": "–ê–∫—Ç–∏–≤–µ–Ω"}
            else:
                return {"running": False, "status": "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}
        
        return {"running": True, "status": "–ì–æ—Ç–æ–≤"}
    
    async def show_main_menu(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
        user_id = callback.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        cache_key = f"user_stats:{user_id}"
        user_stats = await self.cache.get(cache_key, {})
        
        text = "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
        
        if user_stats:
            text += (
                f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                f"‚Ä¢ –ê–ª–µ—Ä—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: {user_stats.get('alerts_received', 0)}\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤: {user_stats.get('active_presets', 0)}\n"
                f"‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–∞—Ä: {user_stats.get('tracked_pairs', 0)}\n\n"
            )
        
        text += "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã:"
        
        keyboard = self.keyboards.get_main_menu_keyboard()
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ú–û–î–£–õ–ï–ô
    
    async def show_price_alerts_menu(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑ –º–µ–Ω—é Price Alerts —Å —Ä–µ–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é."""
        if not self.price_alerts_service:
            await callback.answer("‚ùå –°–µ—Ä–≤–∏—Å Price Alerts –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        await event_bus.publish(Event(
            type="price_alerts.get_user_stats",
            data={"user_id": callback.from_user.id},
            source_module="telegram"
        ))
        
        text = (
            "üìà <b>Price Alerts</b>\n\n"
            "üéØ <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
            "‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ 500 —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä\n"
            "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è\n"
            "‚Ä¢ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã\n"
            "‚Ä¢ –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
            "‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –æ–±—ä–µ–º—É\n\n"
            
            "üìä <b>–í–∞—à–∏ –ø—Ä–µ—Å–µ—Ç—ã:</b>\n"
            "–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...\n\n"
            
            "‚ö° –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?"
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–µ—Å–µ—Ç", callback_data="price_create_preset")
        builder.button(text="üìã –ú–æ–∏ –ø—Ä–µ—Å–µ—Ç—ã", callback_data="price_my_presets")
        builder.button(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data="price_start_monitoring")
        builder.button(text="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data="price_stop_monitoring")
        builder.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="price_statistics")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
        builder.adjust(1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
    
    async def show_gas_tracker_menu(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑ –º–µ–Ω—é Gas Tracker —Å —Ä–µ–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é."""
        if not self.gas_tracker_service:
            await callback.answer("‚ùå –°–µ—Ä–≤–∏—Å Gas Tracker –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –Ω–∞ –≥–∞–∑
        current_gas = None
        if hasattr(self.gas_tracker_service, 'get_current_gas_price'):
            current_gas = self.gas_tracker_service.get_current_gas_price()
        
        text = "‚õΩ <b>Gas Tracker</b>\n\n"
        
        if current_gas:
            text += (
                f"üí∞ <b>–¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –≥–∞–∑–∞:</b>\n"
                f"üü¢ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π: {current_gas['safe']:.1f} gwei\n"
                f"üü° –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π: {current_gas['standard']:.1f} gwei\n"
                f"üü† –ë—ã—Å—Ç—Ä—ã–π: {current_gas['fast']:.1f} gwei\n"
                f"üî¥ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π: {current_gas['instant']:.1f} gwei\n\n"
            )
        else:
            text += "‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ –≥–∞–∑...\n\n"
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∞–ª–µ—Ä—Ç—ã
        user_alerts = []
        if hasattr(self.gas_tracker_service, 'get_user_alerts'):
            user_alerts = self.gas_tracker_service.get_user_alerts(callback.from_user.id)
        
        text += (
            f"üîî <b>–í–∞—à–∏ –∞–ª–µ—Ä—Ç—ã:</b>\n"
            f"–ê–∫—Ç–∏–≤–Ω—ã—Ö: {len([a for a in user_alerts if a.get('is_active', False)])}\n"
            f"–í—Å–µ–≥–æ: {len(user_alerts)}\n\n"
            
            "‚ö° –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞–º–∏:"
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üìä –¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã", callback_data="gas_current")
        builder.button(text="üîî –ú–æ–∏ –∞–ª–µ—Ä—Ç—ã", callback_data="gas_alerts")
        builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç", callback_data="gas_add_alert")
        builder.button(text="üìà –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω", callback_data="gas_chart")
        builder.button(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="gas_settings")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
        builder.adjust(2, 2, 1, 1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
    
    async def show_whale_tracker_menu(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑ –º–µ–Ω—é Whale Tracker —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è—Ö."""
        if not self.whale_service:
            await callback.answer("‚ùå –°–µ—Ä–≤–∏—Å Whale Tracker –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è—Ö
        limitations = {}
        if hasattr(self.whale_service, 'get_limitations_info'):
            limitations = self.whale_service.get_limitations_info()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∞–ª–µ—Ä—Ç—ã
        user_alerts = []
        if hasattr(self.whale_service, 'get_user_alerts'):
            user_alerts = self.whale_service.get_user_alerts(callback.from_user.id)
        
        text = (
            "üêã <b>Whale Tracker</b>\n"
            "<i>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è</i>\n\n"
            
            f"üîî <b>–í–∞—à–∏ –∞–ª–µ—Ä—Ç—ã:</b> {len(user_alerts)}\n"
            f"‚úÖ <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö:</b> {len([a for a in user_alerts if a.get('is_active', False)])}\n\n"
        )
        
        if limitations:
            text += (
                "‚ö†Ô∏è <b>–¢–µ–∫—É—â–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</b>\n"
                "‚Ä¢ –¢—Ä–µ–±—É–µ—Ç—Å—è Etherscan API –∫–ª—é—á\n"
                "‚Ä¢ –¢–æ–ª—å–∫–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω ETH/BTC\n"
                "‚Ä¢ –ù–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n\n"
            )
        
        text += "üéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:"
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üìä –ú–æ–∏ –∞–ª–µ—Ä—Ç—ã", callback_data="whale_alerts")
        builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç", callback_data="whale_add_alert")
        builder.button(text="‚ÑπÔ∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è", callback_data="whale_limitations")
        builder.button(text="üí∞ Upgrade", callback_data="whale_upgrade_info")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
        builder.adjust(2, 2, 1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
    
    async def show_wallet_tracker_menu(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑ –º–µ–Ω—é Wallet Tracker —Å —Ä–µ–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é."""
        if not self.wallet_service:
            await callback.answer("‚ùå –°–µ—Ä–≤–∏—Å Wallet Tracker –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∞–ª–µ—Ä—Ç—ã
        user_alerts = []
        if hasattr(self.wallet_service, 'get_user_alerts'):
            user_alerts = self.wallet_service.get_user_alerts(callback.from_user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è—Ö
        limitations = {}
        if hasattr(self.wallet_service, 'get_limitations_info'):
            limitations = self.wallet_service.get_limitations_info()
        
        text = (
            "üëõ <b>Wallet Tracker</b>\n"
            "<i>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è</i>\n\n"
            
            f"üîç <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤:</b> {len(user_alerts)}/5\n"
            f"‚úÖ <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö:</b> {len([a for a in user_alerts if a.get('is_active', False)])}\n\n"
            
            "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b>\n"
            "‚Ä¢ –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n"
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 2-5 –º–∏–Ω—É—Ç\n"
            "‚Ä¢ –¢–æ–ª—å–∫–æ ETH —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏\n\n"
            
            "üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞–º–∏:"
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üëõ –ú–æ–∏ –∫–æ—à–µ–ª—å–∫–∏", callback_data="wallet_list")
        builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª–µ–∫", callback_data="wallet_add")
        builder.button(text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—à–µ–ª–µ–∫", callback_data="wallet_check")
        builder.button(text="‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è", callback_data="wallet_limitations")
        builder.button(text="üí∞ Upgrade", callback_data="wallet_upgrade_info")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
        builder.adjust(2, 2, 1, 1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
    
    async def show_settings(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å —Ä–µ–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é."""
        user_id = callback.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–µ—à–∞
        cache_key = f"user_settings:{user_id}"
        user_settings = await self.cache.get(cache_key, {
            'notifications_enabled': True,
            'language': 'ru',
            'timezone': 'UTC',
            'alert_sound': True,
            'group_notifications': True
        })
        
        text = (
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
            
            f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'üü¢ –í–∫–ª—é—á–µ–Ω—ã' if user_settings.get('notifications_enabled') else 'üî¥ –û—Ç–∫–ª—é—á–µ–Ω—ã'}\n"
            f"üåê –Ø–∑—ã–∫: {user_settings.get('language', 'ru').upper()}\n"
            f"üïê –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {user_settings.get('timezone', 'UTC')}\n"
            f"üîä –ó–≤—É–∫ –∞–ª–µ—Ä—Ç–æ–≤: {'üü¢ –í–∫–ª' if user_settings.get('alert_sound') else 'üî¥ –í—ã–∫–ª'}\n"
            f"üì¶ –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞: {'üü¢ –í–∫–ª' if user_settings.get('group_notifications') else 'üî¥ –í—ã–∫–ª'}\n\n"
            
            "üéõÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:"
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(
            text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" if user_settings.get('notifications_enabled') else "üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
            callback_data="settings_toggle_notifications"
        )
        builder.button(text="üåê –Ø–∑—ã–∫", callback_data="settings_language")
        builder.button(text="üïê –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å", callback_data="settings_timezone")
        builder.button(text="üîä –ó–≤—É–∫", callback_data="settings_toggle_sound")
        builder.button(text="üì¶ –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞", callback_data="settings_toggle_grouping")
        builder.button(text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="settings_stats")
        builder.button(text="üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="settings_export")
        builder.button(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="settings_clear")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
        builder.adjust(2, 2, 2, 1, 1, 1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
    
    async def show_about(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ."""
        from datetime import datetime
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã
        event_stats = event_bus.get_stats()
        cache_stats = cache_manager.get_all_stats()
        
        text = (
            "‚ÑπÔ∏è <b>–û Crypto Monitor Bot</b>\n\n"
            
            "ü§ñ <b>–í–µ—Ä—Å–∏—è:</b> 2.0.0\n"
            "üìÖ <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> –î–µ–∫–∞–±—Ä—å 2024\n"
            "üë®‚Äçüíª <b>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:</b> –ú–æ–¥—É–ª—å–Ω—ã–π –º–æ–Ω–æ–ª–∏—Ç\n\n"
            
            "üìã <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –º–æ–¥—É–ª–∏:</b>\n"
            "‚úÖ Price Alerts - –ü–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª\n"
            "‚úÖ Gas Tracker - –ü–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª\n"
            "‚ö†Ô∏è Whale Tracker - –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ\n"
            "‚ö†Ô∏è Wallet Tracker - –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ\n\n"
            
            "üîß <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</b>\n"
            f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π: {event_stats.get('total_handlers', 0)}\n"
            f"‚Ä¢ –ö–µ—à –≤ –ø–∞–º—è—Ç–∏: {sum(s.get('total_entries', 0) for s in cache_stats.values())} –∑–∞–ø–∏—Å–µ–π\n"
            f"‚Ä¢ –ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞\n"
            f"‚Ä¢ –û—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å\n"
            f"‚Ä¢ Rate limiting –∑–∞—â–∏—Ç–∞\n\n"
            
            "üöÄ <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ v2.0:</b>\n"
            "‚Ä¢ –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏\n"
            "‚Ä¢ –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞\n"
            "‚Ä¢ Circuit breaker pattern\n"
            "‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω–∞—è –∏–∑–æ–ª—è—Ü–∏—è –º–æ–¥—É–ª–µ–π\n"
            "‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
            
            "üí° <b>–ü–ª–∞–Ω—ã —Ä–∞–∑–≤–∏—Ç–∏—è:</b>\n"
            "‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å premium API\n"
            "‚Ä¢ –†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π\n"
            "‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n"
            "‚Ä¢ –ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n\n"
            
            f"‚è∞ <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üìù Changelog", callback_data="about_changelog")
        builder.button(text="üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="about_tech")
        builder.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã", callback_data="about_system_stats")
        builder.button(text="üîó –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥", callback_data="about_source")
        builder.button(text="üë®‚Äçüíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", callback_data="about_developer")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
        builder.adjust(2, 2, 1, 1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
    
    # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
    
    async def toggle_notifications(self, callback: types.CallbackQuery):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
        user_id = callback.from_user.id
        cache_key = f"user_settings:{user_id}"
        
        user_settings = await self.cache.get(cache_key, {})
        current_state = user_settings.get('notifications_enabled', True)
        new_state = not current_state
        
        user_settings['notifications_enabled'] = new_state
        await self.cache.set(cache_key, user_settings, ttl=86400)  # 24 —á–∞—Å–∞
        
        # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        await event_bus.publish(Event(
            type="user.settings_changed",
            data={
                "user_id": user_id,
                "setting": "notifications_enabled",
                "value": new_state
            },
            source_module="telegram"
        ))
        
        status = "–≤–∫–ª—é—á–µ–Ω—ã" if new_state else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
        await callback.answer(f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        await self.show_settings(callback)
    
    async def show_user_stats(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        user_id = callback.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –∫–µ—à–∞
        stats_key = f"user_stats:{user_id}"
        user_stats = await self.cache.get(stats_key, {})
        
        if not user_stats:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            user_stats = {
                'alerts_received': 0,
                'active_presets': 0,
                'tracked_pairs': 0,
                'gas_alerts': 0,
                'whale_alerts': 0,
                'wallet_alerts': 0,
                'join_date': datetime.now().isoformat(),
                'last_activity': datetime.now().isoformat()
            }
            await self.cache.set(stats_key, user_stats, ttl=3600)
        
        text = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
            
            f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å:</b>\n"
            f"‚Ä¢ ID: {user_id}\n"
            f"‚Ä¢ –ò–º—è: {callback.from_user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"‚Ä¢ Username: @{callback.from_user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n"
            
            f"üìà <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>\n"
            f"‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ –∞–ª–µ—Ä—Ç–æ–≤: {user_stats.get('alerts_received', 0)}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤: {user_stats.get('active_presets', 0)}\n"
            f"‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–∞—Ä: {user_stats.get('tracked_pairs', 0)}\n\n"
            
            f"üîî <b>–ê–ª–µ—Ä—Ç—ã –ø–æ –º–æ–¥—É–ª—è–º:</b>\n"
            f"‚Ä¢ Price Alerts: {user_stats.get('price_alerts', 0)}\n"
            f"‚Ä¢ Gas Tracker: {user_stats.get('gas_alerts', 0)}\n"
            f"‚Ä¢ Whale Tracker: {user_stats.get('whale_alerts', 0)}\n"
            f"‚Ä¢ Wallet Tracker: {user_stats.get('wallet_alerts', 0)}\n\n"
            
            f"üìÖ <b>–î–∞—Ç—ã:</b>\n"
            f"‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user_stats.get('join_date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:10]}\n"
            f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user_stats.get('last_activity', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:10]}"
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üì§ –≠–∫—Å–ø–æ—Ä—Ç", callback_data="stats_export")
        builder.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="settings_stats")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="settings")
        builder.adjust(2, 1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
    
    async def show_changelog(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π."""
        text = (
            "üìù <b>–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π</b>\n\n"
            
            "<b>üöÄ –í–µ—Ä—Å–∏—è 2.0.0</b> (–î–µ–∫–∞–±—Ä—å 2024)\n"
            "‚Ä¢ –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã\n"
            "‚Ä¢ –ú–æ–¥—É–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å –∏–∑–æ–ª—è—Ü–∏–µ–π\n"
            "‚Ä¢ –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏\n"
            "‚Ä¢ Circuit breaker pattern\n"
            "‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å\n"
            "‚Ä¢ –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞\n"
            "‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "‚Ä¢ –ù–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n\n"
            
            "<b>üìà –í–µ—Ä—Å–∏—è 1.5.2</b> (–ù–æ—è–±—Ä—å 2024)\n"
            "‚Ä¢ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–≥–æ–≤ Price Alerts\n"
            "‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π\n"
            "‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫\n\n"
            
            "<b>‚õΩ –í–µ—Ä—Å–∏—è 1.5.0</b> (–û–∫—Ç—è–±—Ä—å 2024)\n"
            "‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω Gas Tracker\n"
            "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤\n"
            "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n"
            
            "<b>üêã –í–µ—Ä—Å–∏—è 1.4.0</b> (–°–µ–Ω—Ç—è–±—Ä—å 2024)\n"
            "‚Ä¢ Beta –≤–µ—Ä—Å–∏—è Whale Tracker\n"
            "‚Ä¢ –ë–∞–∑–æ–≤–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–æ–≤\n"
            "‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —Ç–µ–≥–æ–≤\n\n"
            
            "<b>üéØ –í–µ—Ä—Å–∏—è 1.0.0</b> (–ê–≤–≥—É—Å—Ç 2024)\n"
            "‚Ä¢ –ü–µ—Ä–≤—ã–π —Ä–µ–ª–∏–∑\n"
            "‚Ä¢ –ë–∞–∑–æ–≤—ã–µ —Ü–µ–Ω–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã\n"
            "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Binance API\n"
            "‚Ä¢ –ü—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üîÆ –ü–ª–∞–Ω—ã", callback_data="about_roadmap")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="about")
        builder.adjust(1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
    
    async def show_tech_info(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."""
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        event_stats = event_bus.get_stats()
        cache_stats = cache_manager.get_all_stats()
        
        text = (
            "üîß <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n\n"
            
            "<b>üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:</b>\n"
            "‚Ä¢ –ú–æ–¥—É–ª—å–Ω—ã–π –º–æ–Ω–æ–ª–∏—Ç\n"
            "‚Ä¢ Event-driven architecture\n"
            "‚Ä¢ In-memory caching\n"
            "‚Ä¢ Circuit breaker pattern\n"
            "‚Ä¢ Graceful degradation\n\n"
            
            "<b>üì° Event System:</b>\n"
            f"‚Ä¢ –¢–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π: {event_stats.get('event_types', 0)}\n"
            f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {event_stats.get('total_handlers', 0)}\n"
            f"‚Ä¢ Middleware: {event_stats.get('middleware_count', 0)}\n"
            f"‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è: {event_stats.get('history_size', 0)} —Å–æ–±—ã—Ç–∏–π\n\n"
            
            "<b>üíæ –°–∏—Å—Ç–µ–º–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n"
        )
        
        if cache_stats:
            total_entries = sum(s.get('total_entries', 0) for s in cache_stats.values())
            total_memory = sum(s.get('memory_usage_mb', 0) for s in cache_stats.values())
            avg_hit_rate = sum(s.get('hit_rate', 0) for s in cache_stats.values()) / len(cache_stats)
            
            text += (
                f"‚Ä¢ –ö–µ—à–µ–π: {len(cache_stats)}\n"
                f"‚Ä¢ –ó–∞–ø–∏—Å–µ–π: {total_entries}\n"
                f"‚Ä¢ –ü–∞–º—è—Ç—å: {total_memory:.1f} MB\n"
                f"‚Ä¢ Hit rate: {avg_hit_rate:.1f}%\n\n"
            )
        
        text += (
            "<b>üõ°Ô∏è –ó–∞—â–∏—Ç–∞:</b>\n"
            "‚Ä¢ Rate limiting\n"
            "‚Ä¢ Circuit breakers\n"
            "‚Ä¢ Timeout protection\n"
            "‚Ä¢ Error isolation\n"
            "‚Ä¢ Graceful fallbacks\n\n"
            
            "<b>‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b>\n"
            "‚Ä¢ Async/await everywhere\n"
            "‚Ä¢ Connection pooling\n"
            "‚Ä¢ Batch processing\n"
            "‚Ä¢ Memory optimization\n"
            "‚Ä¢ Smart caching strategies"
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="tech_detailed_stats")
        builder.button(text="üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", callback_data="tech_config")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="about")
        builder.adjust(1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
    
    async def handle_status_actions(self, callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –≤ –º–µ–Ω—é —Å—Ç–∞—Ç—É—Å–∞."""
        action = callback.data.split("_", 1)[1]
        
        if action == "details":
            await self._show_detailed_status(callback)
        elif action == "restart":
            await callback.answer("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –º–æ–¥—É–ª–µ–π...")
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        elif action == "logs":
            await self._show_system_logs(callback)
        else:
            await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
    
    async def _show_detailed_status(self, callback: types.CallbackQuery):
        """–î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã."""
        event_stats = event_bus.get_stats()
        cache_stats = cache_manager.get_all_stats()
        
        text = (
            "üìä <b>–î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
            
            "<b>üì° Event Bus:</b>\n"
        )
        
        for event_type, count in event_stats.get('subscribers', {}).items():
            text += f"‚Ä¢ {event_type}: {count} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n"
        
        text += f"\n<b>üíæ –ö–µ—à–∏:</b>\n"
        for cache_name, stats in cache_stats.items():
            text += (
                f"‚Ä¢ {cache_name}: {stats.get('total_entries', 0)} –∑–∞–ø–∏—Å–µ–π, "
                f"{stats.get('hit_rate', 0):.1f}% hit rate\n"
            )
        
        failed_handlers = event_stats.get('circuit_breakers_open', [])
        if failed_handlers:
            text += f"\n‚ö†Ô∏è <b>–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏:</b>\n"
            for handler in failed_handlers:
                text += f"‚Ä¢ {handler}\n"
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="status_details")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="cmd_status")
        builder.adjust(1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
    
    async def _show_system_logs(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–æ–≤."""
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ EventBus
        recent_events = event_bus.get_events_by_type("system.error", limit=10)
        
        text = "üìã <b>–°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏</b>\n\n"
        
        if recent_events:
            text += "<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏:</b>\n"
            for event in recent_events[-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5
                timestamp = event.get('timestamp', 'Unknown')
                if isinstance(timestamp, str):
                    timestamp = timestamp[:19]  # –û–±—Ä–µ–∑–∞–µ–º –¥–æ —Å–µ–∫—É–Ω–¥
                text += f"‚Ä¢ {timestamp}: {event.get('type', 'Unknown')}\n"
        else:
            text += "‚úÖ –û—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="status_logs")
        builder.button(text="üì§ –≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤", callback_data="status_export_logs")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="cmd_status")
        builder.adjust(2, 1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()