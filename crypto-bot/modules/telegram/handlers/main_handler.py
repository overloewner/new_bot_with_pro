# modules/telegram/handlers/main_handler.py
"""–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –≥–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–µ–∑ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ –∫–µ—à–∞."""

from datetime import datetime
from typing import Any, Dict, Optional
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from modules.telegram.keyboards.main_keyboards import MainKeyboards
from shared.events import event_bus, Event, USER_COMMAND_RECEIVED

import logging

logger = logging.getLogger(__name__)


class MainHandler:
    """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é."""
    
    def __init__(self):
        self.router = Router()
        self.keyboards = MainKeyboards()
        
        # –°–µ—Ä–≤–∏—Å—ã (–±—É–¥—É—Ç –∏–Ω–∂–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω—ã)
        self.price_alerts_service = None
    
    def set_services(self, **services):
        """–ò–Ω—ä–µ–∫—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤."""
        self.price_alerts_service = services.get('price_alerts')
    
    def register(self, dp):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
        # –ö–æ–º–∞–Ω–¥—ã
        self.router.message(Command("start"))(self.cmd_start)
        self.router.message(Command("help"))(self.cmd_help)
        self.router.message(Command("status"))(self.cmd_status)
        
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        self.router.callback_query(F.data == "main_menu")(self.show_main_menu)
        
        # –ú–æ–¥—É–ª–∏
        self.router.callback_query(F.data == "price_alerts")(self.show_price_alerts_menu)
        self.router.callback_query(F.data == "gas_tracker")(self.show_gas_tracker_menu)
        self.router.callback_query(F.data == "whale_tracker")(self.show_whale_tracker_menu)
        self.router.callback_query(F.data == "wallet_tracker")(self.show_wallet_tracker_menu)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        self.router.callback_query(F.data == "settings")(self.show_settings)
        self.router.callback_query(F.data == "about")(self.show_about)
        self.router.callback_query(F.data == "cmd_status")(self.cmd_status_callback)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –º–µ–Ω—é
        self._register_additional_handlers()
        
        dp.include_router(self.router)
    
    def _register_additional_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
        # Settings handlers
        self.router.callback_query(F.data == "settings_notifications")(self.toggle_notifications)
        self.router.callback_query(F.data == "settings_stats")(self.show_user_stats)
        
        # About handlers
        self.router.callback_query(F.data == "about_changelog")(self.show_changelog)
        self.router.callback_query(F.data == "about_tech")(self.show_tech_info)
        self.router.callback_query(F.data == "about_roadmap")(self.about_roadmap)
        
        # Status handlers
        self.router.callback_query(F.data.startswith("status_"))(self.handle_status_actions)
        
        # Price Alerts info
        self.router.callback_query(F.data == "price_help_info")(self.price_help_info)
    
    async def cmd_start(self, message: types.Message):
        """–ö–æ–º–∞–Ω–¥–∞ /start —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é."""
        user_id = message.from_user.id
        username = message.from_user.username
        
        # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        await event_bus.publish(Event(
            type=USER_COMMAND_RECEIVED,
            data={
                "user_id": user_id,
                "command": "start",
                "username": username,
                "first_name": message.from_user.first_name
            },
            source_module="telegram"
        ))
        
        welcome_text = (
            f"ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å{', ' + message.from_user.first_name if message.from_user.first_name else ''}!</b>\n\n"
            
            "üöÄ <b>Crypto Monitor Bot v2.0</b>\n"
            "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n\n"
            
            "üìä <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥—É–ª–∏:</b>\n"
            "üìà <b>Price Alerts</b> - –£–º–Ω—ã–µ —Ü–µ–Ω–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
            "‚õΩ <b>Gas Tracker</b> - –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n"
            "üêã <b>Whale Tracker</b> - –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n"
            "üëõ <b>Wallet Tracker</b> - –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n\n"
            
            "‚ú® <b>–ù–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ v2.0:</b>\n"
            "‚Ä¢ –ú–æ–¥—É–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n"
            "‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n"
            "‚Ä¢ –í—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ\n\n"
            
            "‚ö° –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:"
        )
        
        keyboard = self.keyboards.get_main_menu_keyboard()
        await message.answer(welcome_text, reply_markup=keyboard, parse_mode="HTML")
    
    async def cmd_help(self, message: types.Message):
        """–ö–æ–º–∞–Ω–¥–∞ /help —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π."""
        help_text = (
            "üìñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ Crypto Monitor Bot v2.0</b>\n\n"
            
            "<b>üéØ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
            "/help - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ (—ç—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞)\n"
            "/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n\n"
            
            "<b>üìà Price Alerts - –¶–µ–Ω–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>\n"
            "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤\n"
            "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –ø–∞—Ä –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ\n"
            "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è\n"
            "‚Ä¢ –†–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã\n"
            "‚Ä¢ –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
            "‚Ä¢ –í—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–∞–±–æ—Ç—ã\n\n"
            
            "<b>üîß –î—Ä—É–≥–∏–µ –º–æ–¥—É–ª–∏:</b>\n"
            "‚õΩ Gas Tracker - –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n"
            "üêã Whale Tracker - –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n"
            "üëõ Wallet Tracker - –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n\n"
            
            "<b>‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
            "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
            "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
            "‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n"
            
            "<b>üîß –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è v2.0:</b>\n"
            "‚Ä¢ –ú–æ–¥—É–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n"
            "‚Ä¢ –í—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
            "‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å\n"
            "‚Ä¢ –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞\n\n"
            
            "‚ùì <b>–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?</b>\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"
        )
        
        keyboard = self.keyboards.get_help_keyboard()
        await message.answer(help_text, reply_markup=keyboard, parse_mode="HTML")
    
    async def cmd_status(self, message: types.Message):
        """–ö–æ–º–∞–Ω–¥–∞ /status —Å —Ä–µ–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–æ–¥—É–ª—è—Ö."""
        await self._show_status(message)
    
    async def cmd_status_callback(self, callback: types.CallbackQuery):
        """Callback –¥–ª—è –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ç—É—Å–∞."""
        await self._show_status(callback.message, callback=callback)
    
    async def _show_status(self, message: types.Message, callback: Optional[types.CallbackQuery] = None):
        """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã."""
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å EventBus
        event_stats = event_bus.get_stats()
        
        status_text = (
            "üìä <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã Crypto Monitor Bot v2.0</b>\n\n"
            
            "<b>üîß –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏:</b>\n"
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –º–æ–¥—É–ª–µ–π
        modules_status = {
            "üìà Price Alerts": self._check_service_status(self.price_alerts_service),
            "‚õΩ Gas Tracker": {"running": False, "status": "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"},
            "üêã Whale Tracker": {"running": False, "status": "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"},
            "üëõ Wallet Tracker": {"running": False, "status": "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"}
        }
        
        for module_name, status in modules_status.items():
            status_icon = "üü¢" if status["running"] else "üî¥"
            status_text += f"{status_icon} {module_name}: {status['status']}\n"
        
        status_text += (
            f"\n<b>üì° Event System:</b>\n"
            f"‚Ä¢ –¢–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π: {event_stats.get('event_types', 0)}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {event_stats.get('total_handlers', 0)}\n"
            f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {'üü¢ –†–∞–±–æ—Ç–∞–µ—Ç' if event_stats.get('running', False) else 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Price Alerts –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if self.price_alerts_service:
            pa_stats = self.price_alerts_service.get_statistics()
            status_text += (
                f"\n<b>üìà Price Alerts:</b>\n"
                f"‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤: {pa_stats.get('monitored_symbols', 0)}\n"
                f"‚Ä¢ –¶–µ–Ω –≤ –∫–µ—à–µ: {pa_stats.get('current_prices_count', 0)}\n"
                f"‚Ä¢ –ê–ª–µ—Ä—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {pa_stats.get('alerts_triggered', 0)}\n"
            )
            
            repo_stats = pa_stats.get('repository_stats', {})
            if repo_stats:
                status_text += (
                    f"‚Ä¢ –ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {repo_stats.get('cached_users', 0)}\n"
                    f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤: {repo_stats.get('active_presets', 0)}\n"
                )
        
        status_text += f"\nüïê <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</b> {datetime.now().strftime('%H:%M:%S')}"
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="cmd_status")
        builder.button(text="üìä –î–µ—Ç–∞–ª–∏", callback_data="status_details")
        builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        builder.adjust(2, 1)
        
        if callback:
            await callback.message.edit_text(status_text, reply_markup=builder.as_markup(), parse_mode="HTML")
            await callback.answer("üîÑ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω")
        else:
            await message.answer(status_text, reply_markup=builder.as_markup(), parse_mode="HTML")
    
    def _check_service_status(self, service) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞."""
        if service is None:
            return {"running": False, "status": "–ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"}
        
        if hasattr(service, 'running'):
            if service.running:
                return {"running": True, "status": "–ê–∫—Ç–∏–≤–µ–Ω"}
            else:
                return {"running": False, "status": "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}
        
        return {"running": True, "status": "–ì–æ—Ç–æ–≤"}
    
    async def show_main_menu(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
        text = "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Price Alerts –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if self.price_alerts_service:
            try:
                stats = self.price_alerts_service.get_statistics()
                text += (
                    f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Price Alerts:</b>\n"
                    f"‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤: {stats.get('monitored_symbols', 0)}\n"
                    f"‚Ä¢ –ê–ª–µ—Ä—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats.get('alerts_triggered', 0)}\n\n"
                )
            except Exception as e:
                logger.error(f"Error getting PA stats: {e}")
        
        text += "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã:"
        
        keyboard = self.keyboards.get_main_menu_keyboard()
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()
    
    # –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ú–û–î–£–õ–ï–ô
    
    async def show_price_alerts_menu(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑ –º–µ–Ω—é Price Alerts."""
        if not self.price_alerts_service:
            await callback.answer("‚ùå –°–µ—Ä–≤–∏—Å Price Alerts –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = self.price_alerts_service.get_statistics()
        
        text = (
            "üìà <b>Price Alerts</b>\n\n"
            "üöÄ <b>–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</b>\n\n"
            
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:</b>\n"
            f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {'üü¢ –†–∞–±–æ—Ç–∞–µ—Ç' if stats.get('running', False) else 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
            f"‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤: {stats.get('monitored_symbols', 0)}\n"
            f"‚Ä¢ –¶–µ–Ω –≤ –∫–µ—à–µ: {stats.get('current_prices_count', 0)}\n"
            f"‚Ä¢ –ê–ª–µ—Ä—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats.get('alerts_triggered', 0)}\n\n"
            
            "üéØ <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
            "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø —Ç–æ–∫–µ–Ω–æ–≤\n"
            "‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –ø–∞—Ä –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ\n" 
            "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è\n"
            "‚Ä¢ –†–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã\n"
            "‚Ä¢ –í—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ\n\n"
            
            "‚ö° –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?"
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üìã –ü–µ—Ä–µ–π—Ç–∏ –∫ Price Alerts", callback_data="price_alerts")
        builder.button(text="üìä –¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã", callback_data="price_current_prices")
        builder.button(text="üìà –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="price_statistics")
        builder.button(text="‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞", callback_data="price_help_info")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
        builder.adjust(1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
    
    async def show_gas_tracker_menu(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑ –º–µ–Ω—é Gas Tracker."""
        text = (
            "‚õΩ <b>Gas Tracker</b>\n"
            "<i>–ú–æ–¥—É–ª—å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</i>\n\n"
            
            "üöß <b>–ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:</b>\n"
            "‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω –≥–∞–∑–∞ Ethereum\n"
            "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–æ–≤\n"
            "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ\n"
            "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏\n\n"
            
            "üìÖ <b>–°—Ç–∞—Ç—É—Å:</b> –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n"
            "üïê <b>–ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–π —Ä–µ–ª–∏–∑:</b> –°–∫–æ—Ä–æ"
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üìà –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å Price Alerts", callback_data="price_alerts")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
        builder.adjust(1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
    
    async def show_whale_tracker_menu(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑ –º–µ–Ω—é Whale Tracker."""
        text = (
            "üêã <b>Whale Tracker</b>\n"
            "<i>–ú–æ–¥—É–ª—å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</i>\n\n"
            
            "üöß <b>–ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:</b>\n"
            "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫—Ä—É–ø–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏–∑ –¥–≤–∏–∂–µ–Ω–∏–π –∫–∏—Ç–æ–≤\n"
            "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–∞—Ö\n"
            "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ—à–µ–ª—å–∫–∞–º\n\n"
            
            "üìÖ <b>–°—Ç–∞—Ç—É—Å:</b> –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n"
            "üïê <b>–ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–π —Ä–µ–ª–∏–∑:</b> –°–∫–æ—Ä–æ"
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üìà –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å Price Alerts", callback_data="price_alerts")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
        builder.adjust(1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
    
    async def show_wallet_tracker_menu(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑ –º–µ–Ω—é Wallet Tracker."""
        text = (
            "üëõ <b>Wallet Tracker</b>\n"
            "<i>–ú–æ–¥—É–ª—å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</i>\n\n"
            
            "üöß <b>–ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:</b>\n"
            "‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–æ—à–µ–ª—å–∫–æ–≤\n"
            "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö\n"
            "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n\n"
            
            "üìÖ <b>–°—Ç–∞—Ç—É—Å:</b> –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n"
            "üïê <b>–ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–π —Ä–µ–ª–∏–∑:</b> –°–∫–æ—Ä–æ"
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üìà –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å Price Alerts", callback_data="price_alerts")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
        builder.adjust(1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
    
    async def show_settings(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
        text = (
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
            
            "üîß <b>–°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
            "‚Ä¢ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: –ú–æ–¥—É–ª—å–Ω–∞—è v2.0\n"
            "‚Ä¢ –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ: –í—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ\n"
            "‚Ä¢ –°–æ–±—ã—Ç–∏—è: –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n\n"
            
            "üìà <b>Price Alerts:</b>\n"
            "‚Ä¢ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω\n"
            "‚Ä¢ –ö–µ—à: –í—Å—Ç—Ä–æ–µ–Ω –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π\n"
            "‚Ä¢ API: Binance (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π)\n\n"
            
            "üéõÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:"
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="settings_stats")
        builder.button(text="üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="about_tech")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
        builder.adjust(1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
    
    async def show_about(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ."""
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã
        event_stats = event_bus.get_stats()
        
        text = (
            "‚ÑπÔ∏è <b>–û Crypto Monitor Bot v2.0</b>\n\n"
            
            "ü§ñ <b>–í–µ—Ä—Å–∏—è:</b> 2.0.0 (Refactored)\n"
            "üìÖ <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> –î–µ–∫–∞–±—Ä—å 2024\n"
            "üë®‚Äçüíª <b>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:</b> –ú–æ–¥—É–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n\n"
            
            "üìã <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –º–æ–¥—É–ª–∏:</b>\n"
            "‚úÖ Price Alerts - –ü–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª\n"
            "üöß Gas Tracker - –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n"
            "üöß Whale Tracker - –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n"
            "üöß Wallet Tracker - –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n\n"
            
            "üîß <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —É–ª—É—á—à–µ–Ω–∏—è v2.0:</b>\n"
            f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π: {event_stats.get('total_handlers', 0)}\n"
            f"‚Ä¢ –¢–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π: {event_stats.get('event_types', 0)}\n"
            "‚Ä¢ –í—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è—Ö\n"
            "‚Ä¢ –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞\n"
            "‚Ä¢ –ú–æ–¥—É–ª—å–Ω–∞—è –∏–∑–æ–ª—è—Ü–∏—è\n\n"
            
            "üöÄ <b>–ö–ª—é—á–µ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è v2.0:</b>\n"
            "‚Ä¢ –†–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω –≤–µ—Å—å –ø—Ä–æ–µ–∫—Ç\n"
            "‚Ä¢ –ö–µ—à –≤—Å—Ç—Ä–æ–µ–Ω –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏\n"
            "‚Ä¢ –£–ø—Ä–æ—â–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π\n"
            "‚Ä¢ –£–±—Ä–∞–Ω–∞ –∏–∑–±—ã—Ç–æ—á–Ω–æ—Å—Ç—å –∫–æ–¥–∞\n"
            "‚Ä¢ –£–ª—É—á—à–µ–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n\n"
            
            "üí° <b>–ü–ª–∞–Ω—ã —Ä–∞–∑–≤–∏—Ç–∏—è:</b>\n"
            "‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π\n"
            "‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏\n"
            "‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n\n"
            
            f"‚è∞ <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üìù Changelog", callback_data="about_changelog")
        builder.button(text="üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="about_tech")
        builder.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã", callback_data="cmd_status")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
        builder.adjust(2, 1, 1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
    
    # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
    
    async def toggle_notifications(self, callback: types.CallbackQuery):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
        await callback.answer("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Price Alerts")
        await self.show_settings(callback)
    
    async def show_user_stats(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        user_id = callback.from_user.id
        
        text = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
            
            f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å:</b>\n"
            f"‚Ä¢ ID: {user_id}\n"
            f"‚Ä¢ –ò–º—è: {callback.from_user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"‚Ä¢ Username: @{callback.from_user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Price Alerts –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if self.price_alerts_service:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ—Å–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏–µ
                await event_bus.publish(Event(
                    type="price_alerts.get_user_presets",
                    data={"user_id": user_id},
                    source_module="telegram"
                ))
                
                text += (
                    f"üìà <b>Price Alerts:</b>\n"
                    f"‚Ä¢ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...\n\n"
                )
            except Exception as e:
                logger.error(f"Error getting user stats: {e}")
                text += "üìà <b>Price Alerts:</b> –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n\n"
        
        text += f"üìÖ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {datetime.now().strftime('%d.%m.%Y')}"
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="settings_stats")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="settings")
        builder.adjust(1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
    
    async def show_changelog(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π."""
        text = (
            "üìù <b>–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π</b>\n\n"
            
            "<b>üöÄ –í–µ—Ä—Å–∏—è 2.0.0</b> (–î–µ–∫–∞–±—Ä—å 2024)\n"
            "‚Ä¢ –ü–æ–ª–Ω–∞—è —Ä–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞\n"
            "‚Ä¢ –ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞\n"
            "‚Ä¢ –ö–µ—à –≤—Å—Ç—Ä–æ–µ–Ω –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏\n"
            "‚Ä¢ –£–ø—Ä–æ—â–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π\n"
            "‚Ä¢ –£–±—Ä–∞–Ω–∞ –∏–∑–±—ã—Ç–æ—á–Ω–æ—Å—Ç—å –∫–æ–¥–∞\n"
            "‚Ä¢ –£–ª—É—á—à–µ–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n"
            "‚Ä¢ Alert dispatcher –≤—Å—Ç—Ä–æ–µ–Ω –≤ Telegram\n"
            "‚Ä¢ Token manager –≤—ã–¥–µ–ª–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–æ–¥—É–ª—å\n\n"
            
            "<b>üìà –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:</b>\n"
            "‚Ä¢ config/ - –º–æ–¥—É–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
            "‚Ä¢ core/ - —Ç–æ–ª—å–∫–æ –æ–±—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã\n"
            "‚Ä¢ shared/ - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä —É—Ç–∏–ª–∏—Ç\n"
            "‚Ä¢ modules/ - —Å–∞–º–æ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–µ –º–æ–¥—É–ª–∏\n\n"
            
            "<b>üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —É–ª—É—á—à–µ–Ω–∏—è:</b>\n"
            "‚Ä¢ PriceAlertsRepository —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –∫–µ—à–µ–º\n"
            "‚Ä¢ –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π EventBus –±–µ–∑ circuit breaker\n"
            "‚Ä¢ –í—Å–µ handlers –≤ telegram –º–æ–¥—É–ª–µ\n"
            "‚Ä¢ –ò–∑–æ–ª—è—Ü–∏—è –º–æ–¥—É–ª–µ–π\n\n"
            
            "<b>üìã –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:</b>\n"
            "‚Ä¢ Price Alerts —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é\n"
            "‚Ä¢ –í—Å–µ –∫–Ω–æ–ø–∫–∏ –∏ –∫–æ–º–∞–Ω–¥—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã\n"
            "‚Ä¢ Telegram –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è\n"
            "‚Ä¢ API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üîÆ –ü–ª–∞–Ω—ã", callback_data="about_roadmap")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="about")
        builder.adjust(1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
    
    async def show_tech_info(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."""
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        event_stats = event_bus.get_stats()
        
        text = (
            "üîß <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è v2.0</b>\n\n"
            
            "<b>üèóÔ∏è –ù–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:</b>\n"
            "‚Ä¢ –ú–æ–¥—É–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n"
            "‚Ä¢ –í—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
            "‚Ä¢ –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è Event —Å–∏—Å—Ç–µ–º–∞\n"
            "‚Ä¢ –ò–∑–æ–ª—è—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤\n"
            "‚Ä¢ –û—Ç–∫–∞–∑ –æ—Ç —Å–ª–æ–∂–Ω—ã—Ö –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–π\n\n"
            
            "<b>üì° Event System:</b>\n"
            f"‚Ä¢ –¢–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π: {event_stats.get('event_types', 0)}\n"
            f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {event_stats.get('total_handlers', 0)}\n"
            f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {'üü¢ –†–∞–±–æ—Ç–∞–µ—Ç' if event_stats.get('running', False) else 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Price Alerts
        if self.price_alerts_service:
            pa_stats = self.price_alerts_service.get_statistics()
            repo_stats = pa_stats.get('repository_stats', {})
            
            text += (
                "<b>üìà Price Alerts:</b>\n"
                f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {'üü¢ –†–∞–±–æ—Ç–∞–µ—Ç' if pa_stats.get('running', False) else 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
                f"‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤: {pa_stats.get('monitored_symbols', 0)}\n"
                f"‚Ä¢ API –≤—ã–∑–æ–≤–æ–≤: {pa_stats.get('api_calls', 0)}\n"
                f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {pa_stats.get('avg_response_time', 0):.3f}—Å\n\n"
                
                "<b>üíæ –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∫–µ—à:</b>\n"
                f"‚Ä¢ –ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {repo_stats.get('cached_users', 0)}\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–µ—Å–µ—Ç–æ–≤ –≤ –∫–µ—à–µ: {repo_stats.get('total_cached_presets', 0)}\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤: {repo_stats.get('active_presets', 0)}\n"
            )
        
        text += (
            "\n<b>üõ°Ô∏è –£–ø—Ä–æ—â–µ–Ω–∏—è v2.0:</b>\n"
            "‚Ä¢ –£–±—Ä–∞–Ω —Å–ª–æ–∂–Ω—ã–π –∫–µ—à-–º–µ–Ω–µ–¥–∂–µ—Ä\n"
            "‚Ä¢ –£–±—Ä–∞–Ω—ã circuit breakers –∏–∑ —Å–æ–±—ã—Ç–∏–π\n"
            "‚Ä¢ –£–ø—Ä–æ—â–µ–Ω—ã —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏\n"
            "‚Ä¢ –û–±—ä–µ–¥–∏–Ω–µ–Ω—ã –º–æ–¥–µ–ª–∏ –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª\n"
            "‚Ä¢ –ú–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="cmd_status")
        builder.button(text="üìù Changelog", callback_data="about_changelog")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="about")
        builder.adjust(1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
    
    async def handle_status_actions(self, callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –≤ –º–µ–Ω—é —Å—Ç–∞—Ç—É—Å–∞."""
        action = callback.data.split("_", 1)[1]
        
        if action == "details":
            await self._show_detailed_status(callback)
        elif action == "restart":
            await callback.answer("üîÑ –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        elif action == "logs":
            await callback.answer("üìã –õ–æ–≥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –∫–æ–Ω—Å–æ–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞")
        else:
            await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
    
    async def _show_detailed_status(self, callback: types.CallbackQuery):
        """–î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã."""
        event_stats = event_bus.get_stats()
        
        text = (
            "üìä <b>–î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
            
            "<b>üì° Event Bus:</b>\n"
            f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {'üü¢ –†–∞–±–æ—Ç–∞–µ—Ç' if event_stats.get('running', False) else 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
            f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {event_stats.get('total_handlers', 0)}\n"
            f"‚Ä¢ –¢–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π: {event_stats.get('event_types', 0)}\n"
        )
        
        subscribers = event_stats.get('subscribers', {})
        if subscribers:
            text += "\n<b>üìã –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π:</b>\n"
            for event_type, count in list(subscribers.items())[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                text += f"‚Ä¢ {event_type}: {count}\n"
            
            if len(subscribers) > 5:
                text += f"‚Ä¢ ... –∏ –µ—â–µ {len(subscribers) - 5} —Ç–∏–ø–æ–≤\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Price Alerts –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if self.price_alerts_service:
            pa_stats = self.price_alerts_service.get_statistics()
            text += (
                f"\n<b>üìà Price Alerts –¥–µ—Ç–∞–ª—å–Ω–æ:</b>\n"
                f"‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ü–µ–Ω: {pa_stats.get('total_updates', 0)}\n"
                f"‚Ä¢ –ù–µ—É–¥–∞—á–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {pa_stats.get('failed_updates', 0)}\n"
                f"‚Ä¢ –ê–ª–µ—Ä—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {pa_stats.get('alerts_triggered', 0)}\n"
            )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="status_details")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="cmd_status")
        builder.adjust(1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
    
    async def about_roadmap(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑ –ø–ª–∞–Ω–æ–≤ —Ä–∞–∑–≤–∏—Ç–∏—è."""
        text = (
            "üîÆ <b>–ü–ª–∞–Ω—ã —Ä–∞–∑–≤–∏—Ç–∏—è</b>\n\n"
            
            "<b>üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ –ø–ª–∞–Ω—ã:</b>\n"
            "‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ Gas Tracker –º–æ–¥—É–ª—è\n"
            "‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ Whale Tracker —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞\n"
            "‚Ä¢ –†–µ–∞–ª–∏–∑–∞—Ü–∏—è Wallet Tracker\n"
            "‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å premium API\n\n"
            
            "<b>üöÄ –°—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω—ã–µ —Ü–µ–ª–∏:</b>\n"
            "‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n"
            "‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∏—Ä–∂–∏\n"
            "‚Ä¢ –ú–æ–±–∏–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
            "‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö\n\n"
            
            "<b>üí° –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–µ –≤–∏–¥–µ–Ω–∏–µ:</b>\n"
            "‚Ä¢ –ú—É–ª—å—Ç–∏–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ—Å—Ç—å\n"
            "‚Ä¢ –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤\n"
            "‚Ä¢ –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏\n"
            "‚Ä¢ API –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤\n\n"
            
            "üéØ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ v2.0 –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞ –¥–ª—è –≤—Å–µ—Ö —ç—Ç–∏—Ö —É–ª—É—á—à–µ–Ω–∏–π!"
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üìà –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å Price Alerts", callback_data="price_alerts")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="about")
        builder.adjust(1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
    
    async def price_help_info(self, callback: types.CallbackQuery):
        """–°–ø—Ä–∞–≤–∫–∞ –ø–æ Price Alerts."""
        text = (
            "‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ Price Alerts</b>\n\n"
            
            "üìù <b>–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–µ—Å–µ—Ç:</b>\n"
            "1. –ù–∞–∂–º–∏—Ç–µ '–ü–µ—Ä–µ–π—Ç–∏ –∫ Price Alerts'\n"
            "2. –í—ã–±–µ—Ä–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å –ø—Ä–µ—Å–µ—Ç'\n"
            "3. –°–ª–µ–¥—É–π—Ç–µ —à–∞–≥–∞–º –º–∞—Å—Ç–µ—Ä–∞\n\n"
            
            "üéØ <b>–°–æ–≤–µ—Ç—ã –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ:</b>\n"
            "‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç 1-2% - –º–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤\n"
            "‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç 3-5% - –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ\n"
            "‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç 10%+ - —Ç–æ–ª—å–∫–æ –∫—Ä—É–ø–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è\n\n"
            
            "‚è∞ <b>–¢–∞–π–º—Ñ—Ä–µ–π–º—ã:</b>\n"
            "‚Ä¢ 1m/5m - –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞\n"
            "‚Ä¢ 15m/1h - –¥–ª—è –æ–±—ã—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏\n"
            "‚Ä¢ 4h/1d - –¥–ª—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π\n\n"
            
            "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —É—Å–ª–æ–≤–∏–π!"
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üìà –ü–µ—Ä–µ–π—Ç–∏ –∫ Price Alerts", callback_data="price_alerts")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="price_alerts")
        builder.adjust(1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()