# modules/telegram/service.py
"""–°–µ—Ä–≤–∏—Å Telegram –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""

import asyncio
from typing import Dict, Any, Optional
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage

from shared.events import event_bus, Event, MESSAGE_SENT, USER_COMMAND_RECEIVED
from modules.telegram.handlers.main_handler import MainHandler
from modules.telegram.handlers.price_alerts_handler import PriceAlertsHandler
from modules.telegram.middleware.logging_middleware import LoggingMiddleware

import logging

logger = logging.getLogger(__name__)


class TelegramService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram –±–æ—Ç–æ–º."""
    
    def __init__(self, bot_token: str):
        self.bot_token = bot_token
        self.bot: Optional[Bot] = None
        self.dp: Optional[Dispatcher] = None
        self.running = False
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –∞–ª–µ—Ä—Ç–æ–≤
        event_bus.subscribe("price_alert.triggered", self._handle_price_alert)
        event_bus.subscribe("gas.alert_triggered", self._handle_gas_alert)
        event_bus.subscribe("whale.alert_triggered", self._handle_whale_alert)
        event_bus.subscribe("wallet.alert_triggered", self._handle_wallet_alert)
    
    async def start(self) -> None:
        """–ó–∞–ø—É—Å–∫ Telegram —Å–µ—Ä–≤–∏—Å–∞."""
        if self.running:
            return
        
        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        self.bot = Bot(token=self.bot_token)
        self.dp = Dispatcher(storage=MemoryStorage())
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º middleware
        self.dp.middleware.setup(LoggingMiddleware())
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        await self._setup_handlers()
        
        # –£–¥–∞–ª—è–µ–º webhook –µ—Å–ª–∏ –µ—Å—Ç—å
        await self._delete_webhook()
        
        self.running = True
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling
        await self.dp.start_polling(self.bot)
    
    async def stop(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram —Å–µ—Ä–≤–∏—Å–∞."""
        self.running = False
        
        if self.dp:
            await self.dp.stop_polling()
        
        if self.bot:
            await self.bot.session.close()
        
        logger.info("Telegram service stopped")
    
    async def _setup_handlers(self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥."""
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π —á–µ—Ä–µ–∑ event bus
        from shared.events import event_bus
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        main_handler = MainHandler()
        main_handler.register(self.dp)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ü–µ–Ω–æ–≤—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤
        price_handler = PriceAlertsHandler()
        price_handler.register(self.dp)
        
        logger.info("Telegram handlers registered")
    
    async def _delete_webhook(self) -> None:
        """–£–¥–∞–ª–µ–Ω–∏–µ webhook –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω."""
        try:
            webhook_info = await self.bot.get_webhook_info()
            if webhook_info.url:
                logger.info(f"Deleting webhook: {webhook_info.url}")
                await self.bot.delete_webhook(drop_pending_updates=True)
        except Exception as e:
            logger.warning(f"Error deleting webhook: {e}")
    
    async def _handle_price_alert(self, event: Event) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω–æ–≤–æ–≥–æ –∞–ª–µ—Ä—Ç–∞."""
        try:
            user_id = event.data.get("user_id")
            message = event.data.get("message")
            
            if user_id and message:
                await self.send_message(user_id, f"üìà {message}")
                
        except Exception as e:
            logger.error(f"Error handling price alert: {e}")
    
    async def _handle_gas_alert(self, event: Event) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª–µ—Ä—Ç–∞ –≥–∞–∑–∞."""
        try:
            user_id = event.data.get("user_id")
            message = event.data.get("message")
            
            if user_id and message:
                await self.send_message(user_id, f"‚õΩ {message}")
                
        except Exception as e:
            logger.error(f"Error handling gas alert: {e}")
    
    async def _handle_whale_alert(self, event: Event) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª–µ—Ä—Ç–∞ –∫–∏—Ç–æ–≤."""
        try:
            user_id = event.data.get("user_id")
            message = event.data.get("message")
            
            if user_id and message:
                await self.send_message(user_id, f"üêã {message}")
                
        except Exception as e:
            logger.error(f"Error handling whale alert: {e}")
    
    async def _handle_wallet_alert(self, event: Event) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª–µ—Ä—Ç–∞ –∫–æ—à–µ–ª—å–∫–∞."""
        try:
            user_id = event.data.get("user_id")
            message = event.data.get("message")
            
            if user_id and message:
                await self.send_message(user_id, f"üëõ {message}")
                
        except Exception as e:
            logger.error(f"Error handling wallet alert: {e}")
    
    async def send_message(self, user_id: int, text: str, **kwargs) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
        try:
            if not self.bot:
                return False
            
            await self.bot.send_message(chat_id=user_id, text=text, **kwargs)
            
            # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            await event_bus.publish(Event(
                type=MESSAGE_SENT,
                data={
                    "user_id": user_id,
                    "text_length": len(text),
                    "success": True
                },
                source_module="telegram"
            ))
            
            return True
            
        except Exception as e:
            logger.error(f"Error sending message to {user_id}: {e}")
            
            await event_bus.publish(Event(
                type=MESSAGE_SENT,
                data={
                    "user_id": user_id,
                    "text_length": len(text),
                    "success": False,
                    "error": str(e)
                },
                source_module="telegram"
            ))
            
            return False
