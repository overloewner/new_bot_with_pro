# modules/wallet_tracker/handlers/wallet_handlers.py
"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ—à–µ–ª—å–∫–æ–≤."""

from aiogram import types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from shared.events import event_bus, Event, USER_COMMAND_RECEIVED


class WalletStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ—à–µ–ª—å–∫–æ–≤."""
    waiting_address = State()
    waiting_min_value = State()
    waiting_track_options = State()


class WalletHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ—à–µ–ª—å–∫–æ–≤."""
    
    def __init__(self, wallet_service):
        self.wallet_service = wallet_service
    
    async def show_wallet_menu(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑ –º–µ–Ω—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ—à–µ–ª—å–∫–æ–≤."""
        user_alerts = self.wallet_service.get_user_alerts(callback.from_user.id)
        limitations = self.wallet_service.get_limitations_info()
        
        builder = InlineKeyboardBuilder()
        builder.button(text="‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è", callback_data="wallet_limitations")
        builder.button(text="üëõ –ú–æ–∏ –∫–æ—à–µ–ª—å–∫–∏", callback_data="wallet_list")
        builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª–µ–∫", callback_data="wallet_add")
        builder.button(text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—à–µ–ª–µ–∫", callback_data="wallet_check")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
        builder.adjust(1)
        
        text = (
            "üëõ Wallet Tracker (–°–∏–ª—å–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)\n\n"
            f"–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤: {len(user_alerts)}/5\n\n"
            "‚ö†Ô∏è –ù–ï –†–ê–ë–û–¢–ê–ï–¢ –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò!\n"
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 2-5 –º–∏–Ω—É—Ç"
        )
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup())
        await callback.answer()
    
    async def show_limitations(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Å–µ—Ä–≤–∏—Å–∞."""
        limitations = self.wallet_service.get_limitations_info()
        
        builder = InlineKeyboardBuilder()
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="wallet_menu")
        
        text = f"‚ö†Ô∏è {limitations['title']}\n\n"
        
        text += "üö´ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:\n"
        for limit in limitations['critical_limitations']:
            text += f"{limit}\n"
        
        text += "\n‚úÖ –ß—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n"
        for work in limitations['what_works']:
            text += f"{work}\n"
        
        text += "\nüí∞ –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω—É–∂–Ω—ã:\n"
        for req in limitations['for_real_time_tracking']:
            text += f"{req}\n"
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup())
        await callback.answer()
    
    async def show_wallet_list(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤."""
        user_alerts = self.wallet_service.get_user_alerts(callback.from_user.id)
        
        builder = InlineKeyboardBuilder()
        
        if not user_alerts:
            text = "üëõ –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤"
        else:
            text = "üëõ –í–∞—à–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–æ—à–µ–ª—å–∫–∏:\n\n"
            
            for i, alert in enumerate(user_alerts, 1):
                address = alert['wallet_address']
                short_addr = f"{address[:6]}...{address[-4:]}"
                status = "üü¢" if alert['is_active'] else "üî¥"
                
                text += f"{i}. {status} {short_addr}\n"
                
                if alert['min_value_eth'] > 0:
                    text += f"   –ú–∏–Ω. —Å—É–º–º–∞: {alert['min_value_eth']:.3f} ETH\n"
                
                directions = []
                if alert['track_incoming']:
                    directions.append("üì•")
                if alert['track_outgoing']:
                    directions.append("üì§")
                text += f"   –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ: {' '.join(directions)}\n"
                
                builder.button(
                    text=f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å {i}",
                    callback_data=f"wallet_remove_{address}"
                )
        
        builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="wallet_add")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="wallet_menu")
        builder.adjust(1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup())
        await callback.answer()
    
    async def add_wallet_start(self, callback: types.CallbackQuery, state: FSMContext):
        """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        user_alerts = self.wallet_service.get_user_alerts(callback.from_user.id)
        if len(user_alerts) >= 5:
            await callback.answer("‚ùå –ú–∞–∫—Å–∏–º—É–º 5 –∫–æ—à–µ–ª—å–∫–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
        
        await state.set_state(WalletStates.waiting_address)
        
        builder = InlineKeyboardBuilder()
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="wallet_menu")
        
        await callback.message.edit_text(
            "üëõ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞\n\n"
            "–í–≤–µ–¥–∏—Ç–µ Ethereum –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:\n"
            "–§–æ—Ä–º–∞—Ç: 0x1234567890abcdef...",
            reply_markup=builder.as_markup()
        )
        await callback.answer()
    
    async def process_wallet_address(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞."""
        address = message.text.strip()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞
        if not self.wallet_service._is_valid_eth_address(address):
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Ethereum –∞–¥—Ä–µ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        await state.update_data(wallet_address=address)
        await state.set_state(WalletStates.waiting_min_value)
        
        builder = InlineKeyboardBuilder()
        builder.button(text="0 ETH", callback_data="wallet_min_0")
        builder.button(text="0.01 ETH", callback_data="wallet_min_0.01")
        builder.button(text="0.1 ETH", callback_data="wallet_min_0.1")
        builder.button(text="1 ETH", callback_data="wallet_min_1")
        builder.button(text="–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="wallet_min_custom")
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="wallet_menu")
        builder.adjust(2)
        
        await message.answer(
            f"‚úÖ –ê–¥—Ä–µ—Å: {address[:6]}...{address[-4:]}\n\n"
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:",
            reply_markup=builder.as_markup()
        )
    
    async def process_min_value(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã."""
        if callback.data == "wallet_min_custom":
            await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –≤ ETH (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0.5):")
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ callback_data
        min_value = float(callback.data.split("_")[-1])
        await state.update_data(min_value_eth=min_value)
        await state.set_state(WalletStates.waiting_track_options)
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üì• –¢–æ–ª—å–∫–æ –≤—Ö–æ–¥—è—â–∏–µ", callback_data="wallet_track_in")
        builder.button(text="üì§ –¢–æ–ª—å–∫–æ –∏—Å—Ö–æ–¥—è—â–∏–µ", callback_data="wallet_track_out")
        builder.button(text="üì•üì§ –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", callback_data="wallet_track_both")
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="wallet_menu")
        builder.adjust(1)
        
        await callback.message.edit_text(
            f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {min_value} ETH\n\n"
            "–ö–∞–∫–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å?",
            reply_markup=builder.as_markup()
        )
        await callback.answer()
    
    async def process_custom_min_value(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã."""
        try:
            min_value = float(message.text.strip())
            
            if min_value < 0 or min_value > 1000:
                await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 0 –¥–æ 1000 ETH")
                return
            
            await state.update_data(min_value_eth=min_value)
            await state.set_state(WalletStates.waiting_track_options)
            
            builder = InlineKeyboardBuilder()
            builder.button(text="üì• –¢–æ–ª—å–∫–æ –≤—Ö–æ–¥—è—â–∏–µ", callback_data="wallet_track_in")
            builder.button(text="üì§ –¢–æ–ª—å–∫–æ –∏—Å—Ö–æ–¥—è—â–∏–µ", callback_data="wallet_track_out")
            builder.button(text="üì•üì§ –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", callback_data="wallet_track_both")
            builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="wallet_menu")
            builder.adjust(1)
            
            await message.answer(
                f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {min_value} ETH\n\n"
                "–ö–∞–∫–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å?",
                reply_markup=builder.as_markup()
            )
            
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
    
    async def process_track_options(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø—Ü–∏–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è."""
        data = await state.get_data()
        wallet_address = data.get('wallet_address')
        min_value_eth = data.get('min_value_eth', 0.0)
        
        track_type = callback.data.split("_")[-1]
        track_incoming = track_type in ['in', 'both']
        track_outgoing = track_type in ['out', 'both']
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç
        success = await self.wallet_service.add_wallet_alert(
            callback.from_user.id,
            wallet_address,
            min_value_eth,
            track_incoming,
            track_outgoing
        )
        
        await state.clear()
        
        if success:
            track_text = []
            if track_incoming:
                track_text.append("–≤—Ö–æ–¥—è—â–∏–µ")
            if track_outgoing:
                track_text.append("–∏—Å—Ö–æ–¥—è—â–∏–µ")
            
            text = (
                f"‚úÖ –ö–æ—à–µ–ª–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                f"üëõ {wallet_address[:6]}...{wallet_address[-4:]}\n"
                f"üí∞ –ú–∏–Ω. —Å—É–º–º–∞: {min_value_eth} ETH\n"
                f"üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ: {' –∏ '.join(track_text)}\n\n"
                f"‚ö†Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è: 2-10 –º–∏–Ω—É—Ç"
            )
        else:
            text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–∞"
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∫–æ—à–µ–ª—å–∫–æ–≤
        await self.show_wallet_menu(callback)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await callback.message.answer(text)
    
    async def remove_wallet(self, callback: types.CallbackQuery):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞."""
        wallet_address = callback.data.split("_", 2)[-1]
        
        success = await self.wallet_service.remove_wallet_alert(
            callback.from_user.id,
            wallet_address
        )
        
        if success:
            text = f"‚úÖ –ö–æ—à–µ–ª–µ–∫ {wallet_address[:6]}...{wallet_address[-4:]} —É–¥–∞–ª–µ–Ω"
        else:
            text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–∞"
        
        await callback.answer(text)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        await self.show_wallet_list(callback)
    
    async def check_wallet(self, callback: types.CallbackQuery, state: FSMContext):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—à–µ–ª—å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É."""
        await callback.message.answer("üîç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:")
        await state.set_state(WalletStates.waiting_address)
        await callback.answer()
    
    async def process_wallet_check(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—à–µ–ª—å–∫–∞."""
        address = message.text.strip()
        
        if not self.wallet_service._is_valid_eth_address(address):
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Ethereum –∞–¥—Ä–µ—Å")
            return
        
        await state.clear()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        loading_msg = await message.answer("üîç –ü—Ä–æ–≤–µ—Ä—è—é –∫–æ—à–µ–ª–µ–∫...")
        
        try:
            wallet_info = await self.wallet_service.get_wallet_info(address)
            
            if wallet_info:
                from datetime import datetime
                
                text = (
                    f"üëõ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—à–µ–ª—å–∫–µ\n\n"
                    f"üìç –ê–¥—Ä–µ—Å: {address[:10]}...{address[-6:]}\n"
                    f"üí∞ –ë–∞–ª–∞–Ω—Å: {wallet_info['balance_eth']:.4f} ETH\n"
                    f"üíµ ~${wallet_info['balance_usd']:.2f}\n"
                    f"üìä –ù–µ–¥–∞–≤–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {wallet_info['recent_transactions_count']}\n"
                )
                
                if wallet_info['last_activity']:
                    last_activity = datetime.fromtimestamp(int(wallet_info['last_activity']))
                    text += f"üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_activity.strftime('%d.%m.%Y %H:%M')}"
                else:
                    text += "üïê –ù–µ—Ç –Ω–µ–¥–∞–≤–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
                
            else:
                text = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—à–µ–ª—å–∫–µ {address[:10]}..."
                
        except Exception as e:
            text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ—à–µ–ª—å–∫–∞"
        
        await loading_msg.edit_text(text)