# modules/wallet_tracker/handlers/wallet_handlers.py
"""–ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—á–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Wallet Tracker."""

from aiogram import types, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from shared.events import event_bus, Event, USER_COMMAND_RECEIVED
from shared.utils.logger import get_module_logger

logger = get_module_logger("wallet_handlers")


class WalletStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ—à–µ–ª—å–∫–æ–≤."""
    waiting_address = State()
    waiting_min_value = State()
    waiting_track_options = State()
    waiting_check_address = State()


class WalletHandlers:
    """–ü–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Wallet Tracker."""
    
    def __init__(self, wallet_service):
        self.wallet_service = wallet_service
        self.router = Router()
    
    def register_handlers(self, dp):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
        
        # –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´
        self.router.callback_query(F.data == "wallet_tracker")(self.show_wallet_menu)
        self.router.callback_query(F.data == "wallet_menu")(self.show_wallet_menu)
        self.router.callback_query(F.data == "wallet_limitations")(self.show_limitations)
        self.router.callback_query(F.data == "wallet_list")(self.show_wallet_list)
        self.router.callback_query(F.data == "wallet_add")(self.add_wallet_start)
        self.router.callback_query(F.data == "wallet_check")(self.check_wallet_start)
        self.router.callback_query(F.data == "wallet_upgrade_info")(self.show_upgrade_info)
        
        # –î–û–ë–ê–í–õ–ï–ù–ò–ï –ö–û–®–ï–õ–¨–ö–ê
        self.router.message(WalletStates.waiting_address)(self.process_wallet_address)
        self.router.callback_query(F.data.startswith("wallet_min_"))(self.process_min_value)
        self.router.message(WalletStates.waiting_min_value)(self.process_custom_min_value)
        self.router.callback_query(F.data.startswith("wallet_track_"))(self.process_track_options)
        
        # –ü–†–û–í–ï–†–ö–ê –ö–û–®–ï–õ–¨–ö–ê
        self.router.message(WalletStates.waiting_check_address)(self.process_wallet_check)
        
        # –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–®–ï–õ–¨–ö–ê–ú–ò
        self.router.callback_query(F.data.startswith("wallet_remove_"))(self.remove_wallet)
        self.router.callback_query(F.data.startswith("wallet_toggle_"))(self.toggle_wallet)
        self.router.callback_query(F.data.startswith("wallet_details_"))(self.show_wallet_details)
        
        # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
        self.router.callback_query(F.data == "wallet_statistics")(self.show_wallet_statistics)
        self.router.callback_query(F.data == "wallet_history")(self.show_wallet_history)
        self.router.callback_query(F.data == "wallet_settings")(self.show_wallet_settings)
        
        dp.include_router(self.router)
    
    async def show_wallet_menu(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑ –º–µ–Ω—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ—à–µ–ª—å–∫–æ–≤."""
        user_alerts = []
        if self.wallet_service:
            user_alerts = self.wallet_service.get_user_alerts(callback.from_user.id)
        
        limitations = {}
        if self.wallet_service:
            limitations = self.wallet_service.get_limitations_info()
        
        active_wallets = len([a for a in user_alerts if a.get('is_active', True)])
        
        text = (
            "üëõ <b>Wallet Tracker</b>\n"
            "<i>–°–∏–ª—å–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è</i>\n\n"
            
            f"üîç <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤:</b> {len(user_alerts)}/5\n"
            f"‚úÖ <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö:</b> {active_wallets}\n\n"
            
            "‚ö†Ô∏è <b>–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø:</b>\n"
            "‚Ä¢ ‚ùå –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n"
            "‚Ä¢ ‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 2-5 –º–∏–Ω—É—Ç\n"
            "‚Ä¢ üí∞ –¢–æ–ª—å–∫–æ ETH —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏\n"
            "‚Ä¢ üìä –ú–∞–∫—Å–∏–º—É–º 5 –∫–æ—à–µ–ª—å–∫–æ–≤\n\n"
            
            "üéØ –ß—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ:"
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üëõ –ú–æ–∏ –∫–æ—à–µ–ª—å–∫–∏", callback_data="wallet_list")
        builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª–µ–∫", callback_data="wallet_add")
        builder.button(text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—à–µ–ª–µ–∫", callback_data="wallet_check")
        builder.button(text="‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è", callback_data="wallet_limitations")
        builder.button(text="üí∞ Upgrade –ø–ª–∞–Ω", callback_data="wallet_upgrade_info")
        builder.button(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="wallet_statistics")
        builder.button(text="üìã –ò—Å—Ç–æ—Ä–∏—è", callback_data="wallet_history")
        builder.button(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="wallet_settings")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
        builder.adjust(2, 2, 2, 2, 1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
    
    async def show_limitations(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Å–µ—Ä–≤–∏—Å–∞."""
        limitations = {}
        if self.wallet_service:
            limitations = self.wallet_service.get_limitations_info()
        
        text = (
            f"‚ö†Ô∏è <b>{limitations.get('title', '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Wallet Tracker')}</b>\n\n"
            
            "üö´ <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</b>\n"
        )
        
        for limit in limitations.get('critical_limitations', []):
            text += f"‚Ä¢ {limit}\n"
        
        text += "\n‚úÖ <b>–ß—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>\n"
        for work in limitations.get('what_works', []):
            text += f"‚Ä¢ {work}\n"
        
        text += "\nüí∞ <b>–î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω—É–∂–Ω—ã:</b>\n"
        for req in limitations.get('for_real_time_tracking', []):
            text += f"‚Ä¢ {req}\n"
        
        text += (
            "\nüìä <b>–ü–æ—á–µ–º—É —Ç–∞–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è?</b>\n"
            "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ API –∏–º–µ—é—Ç —Å—Ç—Ä–æ–≥–∏–µ –ª–∏–º–∏—Ç—ã:\n"
            "‚Ä¢ Etherscan: 5 –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫\n"
            "‚Ä¢ –ó–∞–¥–µ—Ä–∂–∫–∞ –±–ª–æ–∫—á–µ–π–Ω–∞: 1-2 –º–∏–Ω—É—Ç—ã\n"
            "‚Ä¢ –ë–µ–∑ WebSocket'–æ–≤\n\n"
            
            "üöÄ <b>–î–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b>\n"
            "–ù—É–∂–Ω—ã –ø–ª–∞—Ç–Ω—ã–µ API –∏–ª–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è –Ω–æ–¥–∞"
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üí∞ Upgrade –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="wallet_upgrade_info")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="wallet_menu")
        builder.adjust(1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
    
    async def show_wallet_list(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤."""
        user_alerts = []
        if self.wallet_service:
            user_alerts = self.wallet_service.get_user_alerts(callback.from_user.id)
        
        if not user_alerts:
            text = (
                "üëõ <b>–ú–æ–∏ –∫–æ—à–µ–ª—å–∫–∏</b>\n\n"
                "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤\n\n"
                
                "üí° –î–æ–±–∞–≤—å—Ç–µ Ethereum –∞–¥—Ä–µ—Å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å\n"
                "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Ö–æ–¥—è—â–∏—Ö –∏ –∏—Å—Ö–æ–¥—è—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö!\n\n"
                
                "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∫–∞–∂–¥—ã–µ\n"
                "2-5 –º–∏–Ω—É—Ç, –Ω–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏."
            )
            
            builder = InlineKeyboardBuilder()
            builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–π –∫–æ—à–µ–ª–µ–∫", callback_data="wallet_add")
            builder.button(text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—à–µ–ª–µ–∫", callback_data="wallet_check")
            builder.button(text="‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è", callback_data="wallet_limitations")
            builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="wallet_menu")
            builder.adjust(1)
        else:
            text = f"üëõ <b>–ú–æ–∏ –∫–æ—à–µ–ª—å–∫–∏ ({len(user_alerts)}/5)</b>\n\n"
            
            builder = InlineKeyboardBuilder()
            
            for i, alert in enumerate(user_alerts, 1):
                address = alert['wallet_address']
                short_addr = f"{address[:6]}...{address[-4:]}"
                status = "üü¢" if alert.get('is_active', True) else "üî¥"
                
                text += f"{status} <b>–ö–æ—à–µ–ª–µ–∫ #{i}</b>\n"
                text += f"   üìç {short_addr}\n"
                
                if alert.get('min_value_eth', 0) > 0:
                    text += f"   üí∞ –ú–∏–Ω. —Å—É–º–º–∞: {alert['min_value_eth']:.3f} ETH\n"
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
                directions = []
                if alert.get('track_incoming', True):
                    directions.append("üì• –í—Ö–æ–¥—è—â–∏–µ")
                if alert.get('track_outgoing', True):
                    directions.append("üì§ –ò—Å—Ö–æ–¥—è—â–∏–µ")
                text += f"   üîî {', '.join(directions)}\n"
                
                text += "\n"
                
                # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                encoded_address = address  # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
                
                if alert.get('is_active', True):
                    builder.button(text=f"‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å #{i}", callback_data=f"wallet_toggle_{i}")
                else:
                    builder.button(text=f"‚ñ∂Ô∏è –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å #{i}", callback_data=f"wallet_toggle_{i}")
                
                builder.button(text=f"üîç –î–µ—Ç–∞–ª–∏ #{i}", callback_data=f"wallet_details_{i}")
                builder.button(text=f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å #{i}", callback_data=f"wallet_remove_{address}")
            
            builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª–µ–∫", callback_data="wallet_add")
            builder.button(text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—à–µ–ª–µ–∫", callback_data="wallet_check")
            builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="wallet_menu")
            builder.adjust(3)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
    
    async def add_wallet_start(self, callback: types.CallbackQuery, state: FSMContext):
        """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        if self.wallet_service:
            user_alerts = self.wallet_service.get_user_alerts(callback.from_user.id)
            if len(user_alerts) >= 5:
                await callback.answer("‚ùå –ú–∞–∫—Å–∏–º—É–º 5 –∫–æ—à–µ–ª—å–∫–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                return
        
        await state.set_state(WalletStates.waiting_address)
        
        text = (
            "üëõ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞</b>\n\n"
            
            "üìç <b>–®–∞–≥ 1/3:</b> –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞\n\n"
            
            "–í–≤–µ–¥–∏—Ç–µ Ethereum –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:\n\n"
            
            "üí° <b>–§–æ—Ä–º–∞—Ç:</b> 0x1234567890abcdef...\n"
            "üìè <b>–î–ª–∏–Ω–∞:</b> 42 —Å–∏–º–≤–æ–ª–∞\n\n"
            
            "üíº <b>–ü—Ä–∏–º–µ—Ä—ã –∞–¥—Ä–µ—Å–æ–≤:</b>\n"
            "‚Ä¢ 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\n"
            "‚Ä¢ 0x742637e8F5c53f5bE6d47D8e1BC5F6E0c7E15Dd4\n\n"
            
            "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç\n"
            "–∫–∞–∂–¥—ã–µ 2-5 –º–∏–Ω—É—Ç, –Ω–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏!"
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="wallet_menu")
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
    
    async def process_wallet_address(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞."""
        address = message.text.strip()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞
        if not self._is_valid_eth_address(address):
            await message.answer(
                "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Ethereum –∞–¥—Ä–µ—Å!</b>\n\n"
                "üìè –ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω:\n"
                "‚Ä¢ –ù–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 0x\n"
                "‚Ä¢ –°–æ–¥–µ—Ä–∂–∞—Ç—å 42 —Å–∏–º–≤–æ–ª–∞\n"
                "‚Ä¢ –°–æ—Å—Ç–æ—è—Ç—å –∏–∑ hex —Å–∏–º–≤–æ–ª–æ–≤ (0-9, a-f)\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                parse_mode="HTML"
            )
            return
        
        await state.update_data(wallet_address=address)
        await state.set_state(WalletStates.waiting_min_value)
        
        short_addr = f"{address[:6]}...{address[-4:]}"
        
        text = (
            f"‚úÖ <b>–ê–¥—Ä–µ—Å:</b> {short_addr}\n\n"
            
            "üí∞ <b>–®–∞–≥ 2/3:</b> –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞\n\n"
            
            "–£–∫–∞–∂–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ ETH\n"
            "–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n\n"
            
            "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
            "‚Ä¢ 0 ETH - –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏\n"
            "‚Ä¢ 0.01 ETH - –º–µ–ª–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏\n"
            "‚Ä¢ 0.1 ETH - —Å—Ä–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏\n"
            "‚Ä¢ 1 ETH - –∫—Ä—É–ø–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="0 ETH", callback_data="wallet_min_0")
        builder.button(text="0.01 ETH", callback_data="wallet_min_0.01")
        builder.button(text="0.1 ETH", callback_data="wallet_min_0.1")
        builder.button(text="0.5 ETH", callback_data="wallet_min_0.5")
        builder.button(text="1 ETH", callback_data="wallet_min_1")
        builder.button(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="wallet_min_custom")
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="wallet_menu")
        builder.adjust(2, 2, 2, 1)
        
        await message.answer(text, reply_markup=builder.as_markup(), parse_mode="HTML")
    
    def _is_valid_eth_address(self, address: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ Ethereum –∞–¥—Ä–µ—Å–∞."""
        if not address or len(address) != 42:
            return False
        if not address.startswith('0x'):
            return False
        try:
            int(address[2:], 16)
            return True
        except ValueError:
            return False
    
    async def process_min_value(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã."""
        if callback.data == "wallet_min_custom":
            await state.set_state(WalletStates.waiting_min_value)
            
            text = (
                "‚úèÔ∏è <b>–†—É—á–Ω–æ–π –≤–≤–æ–¥ —Å—É–º–º—ã</b>\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –≤ ETH:\n\n"
                "üìù <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
                "‚Ä¢ 0.5\n"
                "‚Ä¢ 2.75\n"
                "‚Ä¢ 10\n\n"
                "üìä <b>–î–∏–∞–ø–∞–∑–æ–Ω:</b> 0 - 1000 ETH"
            )
            
            builder = InlineKeyboardBuilder()
            builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="wallet_menu")
            
            await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
            await callback.answer()
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ callback_data
        min_value = float(callback.data.split("_")[-1])
        await state.update_data(min_value_eth=min_value)
        await state.set_state(WalletStates.waiting_track_options)
        
        await self._show_track_options(callback, state, min_value)
    
    async def process_custom_min_value(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã."""
        try:
            min_value = float(message.text.strip().replace(',', '.'))
            
            if min_value < 0 or min_value > 1000:
                await message.answer(
                    "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞!</b>\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 0 –¥–æ 1000 ETH",
                    parse_mode="HTML"
                )
                return
            
            await state.update_data(min_value_eth=min_value)
            await state.set_state(WalletStates.waiting_track_options)
            
            await self._show_track_options(message, state, min_value)
            
        except ValueError:
            await message.answer(
                "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!</b>\n\n"
                "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0.5):",
                parse_mode="HTML"
            )
    
    async def _show_track_options(self, event, state: FSMContext, min_value: float):
        """–ü–æ–∫–∞–∑ –æ–ø—Ü–∏–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è."""
        text = (
            f"‚úÖ <b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞:</b> {min_value} ETH\n\n"
            
            "üîî <b>–®–∞–≥ 3/3:</b> –¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n\n"
            
            "–ö–∞–∫–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å?"
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üì• –¢–æ–ª—å–∫–æ –≤—Ö–æ–¥—è—â–∏–µ", callback_data="wallet_track_in")
        builder.button(text="üì§ –¢–æ–ª—å–∫–æ –∏—Å—Ö–æ–¥—è—â–∏–µ", callback_data="wallet_track_out")
        builder.button(text="üì•üì§ –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", callback_data="wallet_track_both")
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="wallet_menu")
        builder.adjust(1)
        
        if hasattr(event, 'message'):
            await event.answer(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        else:
            await event.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
            await event.answer()
    
    async def process_track_options(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø—Ü–∏–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è."""
        data = await state.get_data()
        wallet_address = data.get('wallet_address')
        min_value_eth = data.get('min_value_eth', 0.0)
        
        track_type = callback.data.split("_")[-1]
        track_incoming = track_type in ['in', 'both']
        track_outgoing = track_type in ['out', 'both']
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        if self.wallet_service:
            success = await self.wallet_service.add_wallet_alert(
                callback.from_user.id,
                wallet_address,
                min_value_eth,
                track_incoming,
                track_outgoing
            )
        else:
            success = False
        
        await state.clear()
        
        if success:
            track_text = []
            if track_incoming:
                track_text.append("–≤—Ö–æ–¥—è—â–∏–µ")
            if track_outgoing:
                track_text.append("–∏—Å—Ö–æ–¥—è—â–∏–µ")
            
            short_addr = f"{wallet_address[:6]}...{wallet_address[-4:]}"
            
            text = (
                "‚úÖ <b>–ö–æ—à–µ–ª–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
                
                f"üëõ <b>–ê–¥—Ä–µ—Å:</b> {short_addr}\n"
                f"üí∞ <b>–ú–∏–Ω. —Å—É–º–º–∞:</b> {min_value_eth} ETH\n"
                f"üìä <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ:</b> {' –∏ '.join(track_text)}\n\n"
                
                "‚ö†Ô∏è <b>–í–∞–∂–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</b>\n"
                "‚Ä¢ –ó–∞–¥–µ—Ä–∂–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è: 2-10 –º–∏–Ω—É—Ç\n"
                "‚Ä¢ –¢–æ–ª—å–∫–æ ETH —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏\n"
                "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 2-5 –º–∏–Ω—É—Ç\n\n"
                
                "üîî –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö!"
            )
        else:
            text = (
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–∞</b>\n\n"
                
                "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "‚Ä¢ –ö–æ—à–µ–ª–µ–∫ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω\n"
                "‚Ä¢ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç (5 –∫–æ—à–µ–ª—å–∫–æ–≤)\n"
                "‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã\n\n"
                
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ"
            )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üëõ –ú–æ–∏ –∫–æ—à–µ–ª—å–∫–∏", callback_data="wallet_list")
        builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data="wallet_add")
        builder.button(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="wallet_menu")
        builder.adjust(2, 1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
    
    async def check_wallet_start(self, callback: types.CallbackQuery, state: FSMContext):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—à–µ–ª—å–∫–∞."""
        await state.set_state(WalletStates.waiting_check_address)
        
        text = (
            "üîç <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—à–µ–ª—å–∫–∞</b>\n\n"
            
            "–í–≤–µ–¥–∏—Ç–µ Ethereum –∞–¥—Ä–µ—Å –¥–ª—è —Ä–∞–∑–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏:\n\n"
            
            "üìä <b>–ß—Ç–æ –ø–æ–∫–∞–∂–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞:</b>\n"
            "‚Ä¢ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å ETH\n"
            "‚Ä¢ –ë–∞–ª–∞–Ω—Å –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö\n"
            "‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–∞–≤–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n"
            "‚Ä¢ –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n\n"
            
            "üí° –≠—Ç–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–æ—à–µ–ª–µ–∫ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ"
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="wallet_menu")
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
    
    async def process_wallet_check(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—à–µ–ª—å–∫–∞."""
        address = message.text.strip()
        
        if not self._is_valid_eth_address(address):
            await message.answer(
                "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Ethereum –∞–¥—Ä–µ—Å!</b>\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                parse_mode="HTML"
            )
            return
        
        await state.clear()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        loading_msg = await message.answer("üîç <b>–ü—Ä–æ–≤–µ—Ä—è—é –∫–æ—à–µ–ª–µ–∫...</b>", parse_mode="HTML")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—à–µ–ª—å–∫–µ
            if self.wallet_service:
                wallet_info = await self.wallet_service.get_wallet_info(address)
            else:
                wallet_info = None
            
            if wallet_info:
                from datetime import datetime
                
                short_addr = f"{address[:10]}...{address[-6:]}"
                
                text = (
                    f"üëõ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—à–µ–ª—å–∫–µ</b>\n\n"
                    f"üìç <b>–ê–¥—Ä–µ—Å:</b> {short_addr}\n"
                    f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {wallet_info['balance_eth']:.4f} ETH\n"
                    f"üíµ <b>~${wallet_info['balance_usd']:.2f}</b>\n"
                    f"üìä <b>–ù–µ–¥–∞–≤–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:</b> {wallet_info['recent_transactions_count']}\n"
                )
                
                if wallet_info['last_activity']:
                    last_activity = datetime.fromtimestamp(int(wallet_info['last_activity']))
                    text += f"üïê <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> {last_activity.strftime('%d.%m.%Y %H:%M')}\n"
                else:
                    text += "üïê <b>–ù–µ—Ç –Ω–µ–¥–∞–≤–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</b>\n"
                
                text += (
                    "\nüí° <b>–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ?</b>\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ"
                )
                
                builder = InlineKeyboardBuilder()
                builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ", callback_data="wallet_add")
                builder.button(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥—Ä—É–≥–æ–π", callback_data="wallet_check")
                builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="wallet_menu")
                builder.adjust(1)
                
            else:
                text = (
                    f"‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é</b>\n\n"
                    f"üìç <b>–ê–¥—Ä–µ—Å:</b> {address[:10]}...\n\n"
                    
                    "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                    "‚Ä¢ API –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n"
                    "‚Ä¢ –ö–æ—à–µ–ª–µ–∫ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n"
                    "‚Ä¢ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤\n\n"
                    
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
                )
                
                builder = InlineKeyboardBuilder()
                builder.button(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑", callback_data="wallet_check")
                builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="wallet_menu")
                builder.adjust(1)
                
        except Exception as e:
            logger.error(f"Error checking wallet: {e}")
            text = "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ—à–µ–ª—å–∫–∞</b>"
            builder = InlineKeyboardBuilder()
            builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="wallet_menu")
        
        await loading_msg.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
    
    async def remove_wallet(self, callback: types.CallbackQuery):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞."""
        wallet_address = callback.data.split("_", 2)[-1]
        
        if self.wallet_service:
            success = await self.wallet_service.remove_wallet_alert(
                callback.from_user.id,
                wallet_address
            )
        else:
            success = False
        
        if success:
            short_addr = f"{wallet_address[:6]}...{wallet_address[-4:]}"
            text = f"‚úÖ –ö–æ—à–µ–ª–µ–∫ {short_addr} —É–¥–∞–ª–µ–Ω –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"
        else:
            text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–∞"
        
        await callback.answer(text)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        await self.show_wallet_list(callback)
    
    async def toggle_wallet(self, callback: types.CallbackQuery):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ—à–µ–ª—å–∫–∞."""
        await callback.answer("üîÑ –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        await self.show_wallet_list(callback)
    
    async def show_wallet_details(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—à–µ–ª—å–∫–µ."""
        wallet_index = int(callback.data.split("_")[-1])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—à–µ–ª—å–∫–µ
        if self.wallet_service:
            user_alerts = self.wallet_service.get_user_alerts(callback.from_user.id)
            
            if wallet_index <= len(user_alerts):
                alert = user_alerts[wallet_index - 1]
                address = alert['wallet_address']
                short_addr = f"{address[:8]}...{address[-6:]}"
                
                text = (
                    f"üëõ <b>–î–µ—Ç–∞–ª–∏ –∫–æ—à–µ–ª—å–∫–∞ #{wallet_index}</b>\n\n"
                    
                    f"üìç <b>–ê–¥—Ä–µ—Å:</b> {short_addr}\n"
                    f"üí∞ <b>–ú–∏–Ω. —Å—É–º–º–∞:</b> {alert.get('min_value_eth', 0):.3f} ETH\n"
                    f"üîî <b>–°—Ç–∞—Ç—É—Å:</b> {'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' if alert.get('is_active', True) else 'üî¥ –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n\n"
                    
                    f"üìä <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ:</b>\n"
                )
                
                if alert.get('track_incoming', True):
                    text += "‚Ä¢ ‚úÖ –í—Ö–æ–¥—è—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏\n"
                else:
                    text += "‚Ä¢ ‚ùå –í—Ö–æ–¥—è—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏\n"
                
                if alert.get('track_outgoing', True):
                    text += "‚Ä¢ ‚úÖ –ò—Å—Ö–æ–¥—è—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏\n"
                else:
                    text += "‚Ä¢ ‚ùå –ò—Å—Ö–æ–¥—è—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏\n"
                
                text += (
                    f"\n‚è∞ <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞:</b>\n"
                    f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 2-5 –º–∏–Ω—É—Ç\n\n"
                    
                    f"üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                    f"–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ..."
                )
            else:
                text = "‚ùå –ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        else:
            text = "‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data="wallet_check")
        builder.button(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data=f"wallet_edit_{wallet_index}")
        builder.button(text="‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data="wallet_list")
        builder.adjust(2, 1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
    
    async def show_upgrade_info(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± upgrade."""
        text = (
            "üí∞ <b>Upgrade Wallet Tracker</b>\n\n"
            
            "üöÄ <b>–ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è!</b>\n\n"
            
            "üí∞ <b>–í–∞—Ä–∏–∞–Ω—Ç—ã upgrade:</b>\n\n"
            
            "1Ô∏è‚É£ <b>Alchemy API (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)</b>\n"
            "   ‚Ä¢ $99/–º–µ—Å—è—Ü –∑–∞ Growth –ø–ª–∞–Ω\n"
            "   ‚Ä¢ –†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è\n"
            "   ‚Ä¢ WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
            "   ‚Ä¢ –ë–µ–∑ –ª–∏–º–∏—Ç–æ–≤\n\n"
            
            "2Ô∏è‚É£ <b>Infura API</b>\n"
            "   ‚Ä¢ $50-200/–º–µ—Å—è—Ü\n"
            "   ‚Ä¢ –•–æ—Ä–æ—à–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å\n"
            "   ‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å\n\n"
            
            "3Ô∏è‚É£ <b>QuickNode</b>\n"
            "   ‚Ä¢ $9-299/–º–µ—Å—è—Ü\n"
            "   ‚Ä¢ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç\n"
            "   ‚Ä¢ –†–∞–∑–Ω—ã–µ –ø–ª–∞–Ω—ã\n\n"
            
            "4Ô∏è‚É£ <b>–°–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è Ethereum –Ω–æ–¥–∞</b>\n"
            "   ‚Ä¢ $500+/–º–µ—Å—è—Ü –≤ –æ–±–ª–∞–∫–µ\n"
            "   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å\n"
            "   ‚Ä¢ –ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å\n\n"
            
            "‚ú® <b>–ß—Ç–æ –ø–æ–ª—É—á–∏—Ç–µ:</b>\n"
            "‚Ä¢ ‚ö° –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ 1-3 —Å–µ–∫—É–Ω–¥\n"
            "‚Ä¢ üîÑ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n"
            "‚Ä¢ üíé –ü–æ–¥–¥–µ—Ä–∂–∫–∞ ERC-20 —Ç–æ–∫–µ–Ω–æ–≤\n"
            "‚Ä¢ üìä –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n"
            "‚Ä¢ üö´ –ë–µ–∑ –ª–∏–º–∏—Ç–æ–≤ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—à–µ–ª—å–∫–æ–≤\n"
            "‚Ä¢ üìà –ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üîó Alchemy", url="https://alchemy.com/pricing")
        builder.button(text="üîó Infura", url="https://infura.io/pricing")
        builder.button(text="üîó QuickNode", url="https://quicknode.com/pricing")
        builder.button(text="‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ", callback_data="wallet_setup_help")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="wallet_menu")
        builder.adjust(3, 1, 1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
    
    async def show_wallet_statistics(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Wallet Tracker."""
        user_alerts = []
        if self.wallet_service:
            user_alerts = self.wallet_service.get_user_alerts(callback.from_user.id)
        
        active_wallets = len([a for a in user_alerts if a.get('is_active', True)])
        total_checks = 0  # TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–¥—Å—á–µ—Ç –ø—Ä–æ–≤–µ—Ä–æ–∫
        
        text = (
            "üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Wallet Tracker</b>\n\n"
            
            f"üë§ <b>–í–∞—à–∏ –∫–æ—à–µ–ª—å–∫–∏:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {len(user_alerts)}/5\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_wallets}\n"
            f"‚Ä¢ –û–±—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫: {total_checks}\n\n"
            
            "üîß <b>–°–∏—Å—Ç–µ–º–∞:</b>\n"
            f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {'üü¢ –†–∞–±–æ—Ç–∞–µ—Ç' if self.wallet_service and self.wallet_service.running else 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}\n"
            f"‚Ä¢ –†–µ–∂–∏–º: ‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API)\n"
            f"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: 2-5 –º–∏–Ω—É—Ç\n"
            f"‚Ä¢ –ó–∞–¥–µ—Ä–∂–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è: 2-10 –º–∏–Ω—É—Ç\n\n"
            
            "üìä <b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</b>\n"
            "‚Ä¢ ‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n"
            "‚Ä¢ ‚ùå –¢–æ–ª—å–∫–æ ETH —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏\n"
            "‚Ä¢ ‚ùå –õ–∏–º–∏—Ç: 5 –∫–æ—à–µ–ª—å–∫–æ–≤\n"
            "‚Ä¢ ‚ùå API –ª–∏–º–∏—Ç: 5 –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫\n\n"
            
            "üí° Upgrade –¥–ª—è —Å–Ω—è—Ç–∏—è –≤—Å–µ—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π!"
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="wallet_statistics")
        builder.button(text="üí∞ Upgrade", callback_data="wallet_upgrade_info")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="wallet_menu")
        builder.adjust(2, 1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
    
    async def show_wallet_history(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è."""
        text = (
            "üìã <b>–ò—Å—Ç–æ—Ä–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è</b>\n\n"
            
            "üìä <b>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:</b>\n"
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–æ–∫ –∫–æ—à–µ–ª—å–∫–æ–≤: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
            "‚Ä¢ –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n\n"
            
            "üìà <b>–ó–∞ –Ω–µ–¥–µ–ª—é:</b>\n"
            "‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
            "‚Ä¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n\n"
            
            "‚ö†Ô∏è <b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º</b>\n"
            "–î–µ—Ç–∞–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ.\n\n"
            
            "üí° <b>–° upgrade –ø–ª–∞–Ω–æ–º –ø–æ–ª—É—á–∏—Ç–µ:</b>\n"
            "‚Ä¢ –ü–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ –∫–∞–∂–¥–æ–º—É –∫–æ—à–µ–ª—å–∫—É\n"
            "‚Ä¢ –ì—Ä–∞—Ñ–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n"
            "‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üí∞ –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="wallet_upgrade_info")
        builder.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="wallet_statistics")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="wallet_menu")
        builder.adjust(1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
    
    async def show_wallet_settings(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Wallet Tracker."""
        text = (
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Wallet Tracker</b>\n\n"
            
            "üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>\n"
            "‚Ä¢ Telegram –∞–ª–µ—Ä—Ç—ã: üü¢ –í–∫–ª—é—á–µ–Ω—ã\n"
            "‚Ä¢ –ó–≤—É–∫–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã: üü¢ –í–∫–ª—é—á–µ–Ω—ã\n"
            "‚Ä¢ –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞: üü¢ –í–∫–ª—é—á–µ–Ω–∞\n"
            "‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≥–∞–∑: üü¢ –í–∫–ª—é—á–µ–Ω–æ\n\n"
            
            "‚è∞ <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª—ã:</b>\n"
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—à–µ–ª—å–∫–æ–≤: 2-5 –º–∏–Ω—É—Ç\n"
            "‚Ä¢ Cooldown —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: 5 –º–∏–Ω—É—Ç\n"
            "‚Ä¢ –¢–∞–π–º–∞—É—Ç API: 30 —Å–µ–∫—É–Ω–¥\n\n"
            
            "üéØ <b>–§–∏–ª—å—Ç—Ä—ã:</b>\n"
            "‚Ä¢ –ú–∏–Ω. —Å—É–º–º–∞: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤ –∫–∞–∂–¥–æ–º –∫–æ—à–µ–ª—å–∫–µ\n"
            "‚Ä¢ –¢–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤ –∫–∞–∂–¥–æ–º –∫–æ—à–µ–ª—å–∫–µ\n"
            "‚Ä¢ –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—É—Å–ø–µ—à–Ω—ã–µ: ‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n"
            "‚Ä¢ –§–∏–ª—å—Ç—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤: ‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n\n"
            
            "‚ö†Ô∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Å upgrade"
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="wallet_settings_notifications")
        builder.button(text="‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã", callback_data="wallet_settings_intervals")
        builder.button(text="üéØ –§–∏–ª—å—Ç—Ä—ã", callback_data="wallet_settings_filters")
        builder.button(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å", callback_data="wallet_settings_reset")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="wallet_menu")
        builder.adjust(2, 2, 1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
    
    def get_stats(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
        return {
            "service_connected": self.wallet_service is not None,
            "service_running": self.wallet_service.running if self.wallet_service else False,
            "handlers_registered": "wallet_handlers_module"
        }# modules/wallet_tracker/handlers/wallet_handlers.py