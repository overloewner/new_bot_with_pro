# modules/price_alerts/core/alert_dispatcher.py
"""–î–∏—Å–ø–µ—Ç—á–µ—Ä –∞–ª–µ—Ä—Ç–æ–≤ —Å –±–∞—Ç—á–∏–Ω–≥–æ–º –∏ rate limiting."""

import asyncio
import time
from typing import Dict, Any, Set, List
from collections import defaultdict, deque

from shared.events import event_bus, Event
from shared.utils.logger import get_module_logger

logger = get_module_logger("alert_dispatcher")


class AlertDispatcher:
    """–î–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π."""
    
    def __init__(self):
        self._running = False
        
        # –û—á–µ—Ä–µ–¥–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self._user_queues: Dict[int, asyncio.Queue] = defaultdict(
            lambda: asyncio.Queue(maxsize=1000)
        )
        self._user_tasks: Dict[int, asyncio.Task] = {}
        
        # Rate limiting
        self._user_limits: Dict[int, deque] = defaultdict(
            lambda: deque(maxlen=10)  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∞–ª–µ—Ä—Ç–æ–≤
        )
        
        # Cooldown –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        self._cooldowns: Dict[str, float] = {}
        self._cooldown_time = 60  # 1 –º–∏–Ω—É—Ç–∞
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.max_alerts_per_minute = 5
        self.batch_size = 3
        self.batch_timeout = 2.0  # 2 —Å–µ–∫—É–Ω–¥—ã
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self._stats = {
            'total_dispatched': 0,
            'rate_limited': 0,
            'cooldown_blocked': 0,
            'active_users': 0
        }
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞."""
        if self._running:
            return
        
        self._running = True
        
        # –ó–∞–¥–∞—á–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö cooldown'–æ–≤
        asyncio.create_task(self._cleanup_cooldowns())
        
        logger.info("Alert dispatcher started")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞."""
        self._running = False
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
        for task in self._user_tasks.values():
            task.cancel()
        
        if self._user_tasks:
            await asyncio.gather(*self._user_tasks.values(), return_exceptions=True)
        
        self._user_tasks.clear()
        logger.info("Alert dispatcher stopped")
    
    async def dispatch_alert(self, alert_data: Dict[str, Any], user_presets: Dict[int, Set[str]]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
        if not self._running:
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è cooldown
        cooldown_key = f"{alert_data['symbol']}_{alert_data['interval']}_{alert_data['change_percent']}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown
        if self._is_in_cooldown(cooldown_key):
            self._stats['cooldown_blocked'] += 1
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cooldown
        self._cooldowns[cooldown_key] = time.time() + self._cooldown_time
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = self._format_alert_message(alert_data)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        for user_id, preset_ids in user_presets.items():
            await self._queue_user_alert(user_id, message, preset_ids)
    
    async def _queue_user_alert(self, user_id: int, message: str, preset_ids: Set[str]):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit
        if not self._check_user_rate_limit(user_id):
            self._stats['rate_limited'] += 1
            return
        
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await self._user_queues[user_id].put({
                'message': message,
                'preset_ids': preset_ids,
                'timestamp': time.time()
            })
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            if user_id not in self._user_tasks or self._user_tasks[user_id].done():
                self._user_tasks[user_id] = asyncio.create_task(
                    self._process_user_queue(user_id)
                )
            
        except asyncio.QueueFull:
            logger.warning(f"Queue full for user {user_id}")
    
    async def _process_user_queue(self, user_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        queue = self._user_queues[user_id]
        
        while self._running:
            try:
                # –°–æ–±–∏—Ä–∞–µ–º –±–∞—Ç—á –∞–ª–µ—Ä—Ç–æ–≤
                batch = await self._collect_user_batch(queue)
                
                if not batch:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –∞–ª–µ—Ä—Ç–æ–≤, –∑–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É
                    break
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞—Ç—á
                await self._send_user_batch(user_id, batch)
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
                await asyncio.sleep(self.batch_timeout)
                
            except asyncio.CancelledError:
                logger.debug(f"User queue processor {user_id} cancelled")
                break
            except Exception as e:
                logger.error(f"Error processing user {user_id} queue: {e}")
                await asyncio.sleep(5)
    
    async def _collect_user_batch(self, queue: asyncio.Queue) -> List[Dict[str, Any]]:
        """–°–±–æ—Ä –±–∞—Ç—á–∞ –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        batch = []
        start_time = time.time()
        
        while (len(batch) < self.batch_size and 
               time.time() - start_time < self.batch_timeout):
            
            try:
                remaining_time = self.batch_timeout - (time.time() - start_time)
                if remaining_time <= 0:
                    break
                
                alert = await asyncio.wait_for(
                    queue.get(),
                    timeout=max(0.1, remaining_time)
                )
                batch.append(alert)
                
            except asyncio.TimeoutError:
                break
        
        return batch
    
    async def _send_user_batch(self, user_id: int, batch: List[Dict[str, Any]]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –±–∞—Ç—á–∞ –∞–ª–µ—Ä—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
        if not batch:
            return
        
        try:
            if len(batch) == 1:
                # –û–¥–∏–Ω–æ—á–Ω—ã–π –∞–ª–µ—Ä—Ç
                message = batch[0]['message']
            else:
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã
                messages = [alert['message'] for alert in batch]
                message = f"üö® –ì—Ä—É–ø–ø–æ–≤–æ–π –∞–ª–µ—Ä—Ç ({len(batch)}):\n" + "\n".join(messages)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
            if len(message) > 4000:
                message = message[:4000] + "\n... (–æ–±—Ä–µ–∑–∞–Ω–æ)"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ event bus
            await event_bus.publish(Event(
                type="price_alert.triggered",
                data={
                    "user_id": user_id,
                    "message": message,
                    "alert_count": len(batch)
                },
                source_module="price_alerts"
            ))
            
            self._stats['total_dispatched'] += len(batch)
            logger.debug(f"Sent {len(batch)} alerts to user {user_id}")
            
        except Exception as e:
            logger.error(f"Error sending alerts to user {user_id}: {e}")
    
    def _check_user_rate_limit(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        current_time = time.time()
        user_history = self._user_limits[user_id]
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ –º–∏–Ω—É—Ç—ã)
        while user_history and current_time - user_history[0] > 60:
            user_history.popleft()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        if len(user_history) >= self.max_alerts_per_minute:
            return False
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        user_history.append(current_time)
        return True
    
    def _is_in_cooldown(self, key: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ cooldown."""
        cooldown_until = self._cooldowns.get(key, 0)
        return time.time() < cooldown_until
    
    def _format_alert_message(self, alert_data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞."""
        return (
            f"{alert_data['direction']} {alert_data['symbol']} {alert_data['interval']}: "
            f"{abs(alert_data['change_percent']):.2f}% "
            f"(${alert_data['close']:.4f})"
        )
    
    async def cleanup_user_queue(self, user_id: int):
        """–û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in self._user_tasks:
            self._user_tasks[user_id].cancel()
            try:
                await self._user_tasks[user_id]
            except asyncio.CancelledError:
                pass
            del self._user_tasks[user_id]
        
        # –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å
        if user_id in self._user_queues:
            queue = self._user_queues[user_id]
            while not queue.empty():
                try:
                    queue.get_nowait()
                except asyncio.QueueEmpty:
                    break
            del self._user_queues[user_id]
        
        # –û—á–∏—â–∞–µ–º rate limit
        if user_id in self._user_limits:
            del self._user_limits[user_id]
        
        logger.debug(f"Cleaned up queue for user {user_id}")
    
    async def _cleanup_cooldowns(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö cooldown'–æ–≤."""
        while self._running:
            try:
                await asyncio.sleep(300)  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                
                current_time = time.time()
                expired_keys = [
                    key for key, expire_time in self._cooldowns.items()
                    if current_time > expire_time
                ]
                
                for key in expired_keys:
                    del self._cooldowns[key]
                
                if expired_keys:
                    logger.debug(f"Cleaned up {len(expired_keys)} expired cooldowns")
                    
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"Error in cooldown cleanup: {e}")
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        self._stats['active_users'] = len(self._user_tasks)
        self._stats['active_queues'] = len(self._user_queues)
        self._stats['total_cooldowns'] = len(self._cooldowns)
        
        return self._stats.copy()