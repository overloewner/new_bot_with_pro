# modules/price_alerts/handlers/preset_handler.py
"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ—Å–µ—Ç–æ–≤ (–∞–¥–∞–ø—Ç–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞)."""

import uuid
from aiogram import types, F
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from shared.events import event_bus, Event
from shared.utils.validators import PriceAlertsValidator, ValidationError
from ..states.preset_states import PresetStates


class PresetHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–∞–º–∏."""
    
    def __init__(self):
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ—Ç–≤–µ—Ç—ã –æ—Ç price_alerts —Å–µ—Ä–≤–∏—Å–∞
        event_bus.subscribe("price_alerts.preset_created", self._handle_preset_created)
        event_bus.subscribe("price_alerts.preset_activated", self._handle_preset_activated)
    
    def register_handlers(self, router):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
        # Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        router.callback_query(F.data == "add_preset")(self.add_preset)
        router.callback_query(F.data == "select_all_pairs")(self.select_all_pairs)
        router.callback_query(F.data == "select_by_volume")(self.select_by_volume)
        router.callback_query(F.data == "enter_manually")(self.enter_manually)
        router.callback_query(F.data.startswith("interval_"))(self.process_interval_callback)
        router.callback_query(F.data.startswith("activate_"))(self.activate_preset)
        router.callback_query(F.data.startswith("deactivate_"))(self.deactivate_preset)
        router.callback_query(F.data.startswith("delete_"))(self.delete_preset)
        
        # State –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        router.message(PresetStates.waiting_preset_name)(self.process_preset_name)
        router.message(PresetStates.waiting_pairs)(self.process_pairs)
        router.message(PresetStates.waiting_volume_input)(self.process_volume_input)
        router.message(PresetStates.waiting_percent)(self.process_percent)
    
    async def add_preset(self, callback: types.CallbackQuery, state: FSMContext):
        """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–∞."""
        try:
            await state.set_state(PresetStates.waiting_preset_name)
            await callback.message.edit_text(
                "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞:",
                reply_markup=None
            )
            await callback.answer()
        except Exception as e:
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ—Å–µ—Ç–∞")
    
    async def process_preset_name(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –ø—Ä–µ—Å–µ—Ç–∞."""
        try:
            preset_name = PriceAlertsValidator.validate_preset_name(message.text)
            
            await state.update_data(preset_name=preset_name)
            await state.set_state(PresetStates.waiting_pairs)
            
            builder = InlineKeyboardBuilder()
            builder.button(text="–í—ã–±—Ä–∞—Ç—å –≤—Å–µ –ø–∞—Ä—ã", callback_data="select_all_pairs")
            builder.button(text="–í—ã–±—Ä–∞—Ç—å –ø–æ –æ–±—ä–µ–º—É", callback_data="select_by_volume")
            builder.button(text="–í–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞—Ä –≤—Ä—É—á–Ω—É—é", callback_data="enter_manually")
            builder.adjust(1)
            
            await message.answer(
                "üí∞ –ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã?",
                reply_markup=builder.as_markup()
            )
            
        except ValidationError as e:
            await message.answer(f"‚ùå {str(e)}")
    
    async def select_all_pairs(self, callback: types.CallbackQuery, state: FSMContext):
        """–í—ã–±–æ—Ä –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä."""
        try:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏—è
            await event_bus.publish(Event(
                type="price_alerts.get_all_tokens",
                data={"callback_id": callback.id},
                source_module="telegram"
            ))
            
            # TODO: –ñ–¥–µ–º –æ—Ç–≤–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
            # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
            all_tokens = ["BTCUSDT", "ETHUSDT", "BNBUSDT"]  # –ó–∞–≥–ª—É—à–∫–∞
            
            await state.update_data(pairs=all_tokens)
            await self._show_interval_selection(callback, state)
            await callback.answer(f"–í—ã–±—Ä–∞–Ω–æ {len(all_tokens)} –ø–∞—Ä")
        except Exception as e:
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–∞—Ä")
    
    async def select_by_volume(self, callback: types.CallbackQuery, state: FSMContext):
        """–í—ã–±–æ—Ä –ø–∞—Ä –ø–æ –æ–±—ä–µ–º—É —Ç–æ—Ä–≥–æ–≤."""
        try:
            await callback.message.answer(
                "üìä –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ –∑–∞ 24—á (–≤ USDT):\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 1000000 - –¥–ª—è –ø–∞—Ä —Å –æ–±—ä–µ–º–æ–º > $1M"
            )
            await state.set_state(PresetStates.waiting_volume_input)
            await callback.answer()
        except Exception as e:
            await callback.answer("–û—à–∏–±–∫–∞")
    
    async def process_volume_input(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–º–∞."""
        try:
            from shared.utils.validators import BaseValidator
            min_volume = BaseValidator.validate_number(message.text, min_value=0)
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã –ø–æ –æ–±—ä–µ–º—É —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏—è
            await event_bus.publish(Event(
                type="price_alerts.get_tokens_by_volume",
                data={"min_volume": min_volume, "user_id": message.from_user.id},
                source_module="telegram"
            ))
            
            # TODO: –ñ–¥–µ–º –æ—Ç–≤–µ—Ç
            # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
            selected_pairs = ["BTCUSDT", "ETHUSDT"]
            
            if not selected_pairs:
                await message.answer(
                    f"‚ùå –ù–µ—Ç –ø–∞—Ä —Å –æ–±—ä–µ–º–æ–º –≤—ã—à–µ {min_volume:,.0f} USDT. "
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –º–µ–Ω—å—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:"
                )
                return
            
            await state.update_data(pairs=selected_pairs)
            await message.answer(
                f"‚úÖ –í—ã–±—Ä–∞–Ω–æ {len(selected_pairs)} –ø–∞—Ä —Å –æ–±—ä–µ–º–æ–º > {min_volume:,.0f} USDT"
            )
            await self._show_interval_selection_message(message, state)
            
        except ValidationError as e:
            await message.answer(f"‚ùå {str(e)}")
    
    async def enter_manually(self, callback: types.CallbackQuery, state: FSMContext):
        """–†—É—á–Ω–æ–π –≤–≤–æ–¥ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä."""
        try:
            await callback.message.answer(
                "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: BTCUSDT, ETHUSDT, ADAUSDT"
            )
            await state.set_state(PresetStates.waiting_pairs)
            await callback.answer()
        except Exception as e:
            await callback.answer("–û—à–∏–±–∫–∞")
    
    async def process_pairs(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ø–∞—Ä."""
        try:
            pairs_input = [p.strip().upper() for p in message.text.split(",")]
            pairs = PriceAlertsValidator.validate_pairs(pairs_input)
            
            # TODO: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏—è
            
            await state.update_data(pairs=pairs)
            await message.answer(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ {len(pairs)} –ø–∞—Ä")
            await self._show_interval_selection_message(message, state)
            
        except ValidationError as e:
            await message.answer(f"‚ùå {str(e)}")
    
    async def _show_interval_selection(self, callback: types.CallbackQuery, state: FSMContext):
        """–ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —á–µ—Ä–µ–∑ callback."""
        await state.set_state(PresetStates.waiting_interval)
        
        timeframes = ["1m", "5m", "15m", "1h", "4h", "1d"]  # TODO: –ü–æ–ª—É—á–∞—Ç—å —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏—è
        
        builder = InlineKeyboardBuilder()
        for tf in timeframes:
            builder.button(text=tf, callback_data=f"interval_{tf}")
        builder.adjust(3)
        
        await callback.message.answer(
            "‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–≤–µ—á–∏:",
            reply_markup=builder.as_markup()
        )
    
    async def _show_interval_selection_message(self, message: types.Message, state: FSMContext):
        """–ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
        await state.set_state(PresetStates.waiting_interval)
        
        timeframes = ["1m", "5m", "15m", "1h", "4h", "1d"]
        
        builder = InlineKeyboardBuilder()
        for tf in timeframes:
            builder.button(text=tf, callback_data=f"interval_{tf}")
        builder.adjust(3)
        
        await message.answer(
            "‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–≤–µ—á–∏:",
            reply_markup=builder.as_markup()
        )
    
    async def process_interval_callback(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞."""
        try:
            interval = callback.data.split("_")[1]
            interval = PriceAlertsValidator.validate_interval(interval)
            
            await state.update_data(interval=interval)
            await state.set_state(PresetStates.waiting_percent)
            
            await callback.message.answer(
                "üìà –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤:\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 5 (–¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ > 5%)\n"
                "–î–∏–∞–ø–∞–∑–æ–Ω: 0.01% - 1000%"
            )
            await callback.answer(f"–í—ã–±—Ä–∞–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª: {interval}")
            
        except ValidationError as e:
            await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
    
    async def process_percent(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞."""
        try:
            percent_text = message.text.strip().replace('%', '').replace(',', '.')
            percent = PriceAlertsValidator.validate_percent(float(percent_text))
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            required_fields = ['preset_name', 'pairs', 'interval']
            
            if not all(k in data for k in required_fields):
                await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö. –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞ –∑–∞–Ω–æ–≤–æ.")
                await state.clear()
                return
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ—Å–µ—Ç —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏—è
            preset_data = {
                'preset_name': data['preset_name'],
                'pairs': data['pairs'],
                'interval': data['interval'],
                'percent': percent
            }
            
            await event_bus.publish(Event(
                type="price_alerts.create_preset",
                data={
                    "user_id": message.from_user.id,
                    "preset_data": preset_data
                },
                source_module="telegram"
            ))
            
            await message.answer(
                f"‚úÖ –ü—Ä–µ—Å–µ—Ç '{preset_data['preset_name']}' —Å–æ–∑–¥–∞–µ—Ç—Å—è...\n"
                f"üîß –ü–∞—Ä: {len(preset_data['pairs'])}\n"
                f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {preset_data['interval']}\n"
                f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç: {preset_data['percent']}%"
            )
            
        except ValidationError as e:
            await message.answer(f"‚ùå {str(e)}")
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5 –∏–ª–∏ 0.5)")
        finally:
            await state.clear()
    
    async def activate_preset(self, callback: types.CallbackQuery):
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–µ—Å–µ—Ç–∞."""
        try:
            preset_id = callback.data.split("_")[1]
            
            await event_bus.publish(Event(
                type="price_alerts.activate_preset",
                data={
                    "user_id": callback.from_user.id,
                    "preset_id": preset_id
                },
                source_module="telegram"
            ))
            
            await callback.answer("‚úÖ –ü—Ä–µ—Å–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è...")
            
        except Exception as e:
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–µ—Å–µ—Ç–∞")
    
    async def deactivate_preset(self, callback: types.CallbackQuery):
        """–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–µ—Å–µ—Ç–∞."""
        try:
            preset_id = callback.data.split("_")[1]
            
            await event_bus.publish(Event(
                type="price_alerts.deactivate_preset",
                data={
                    "user_id": callback.from_user.id,
                    "preset_id": preset_id
                },
                source_module="telegram"
            ))
            
            await callback.answer("‚úÖ –ü—Ä–µ—Å–µ—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è...")
            
        except Exception as e:
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–µ—Å–µ—Ç–∞")
    
    async def delete_preset(self, callback: types.CallbackQuery):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞."""
        try:
            preset_id = callback.data.split("_")[1]
            
            await event_bus.publish(Event(
                type="price_alerts.delete_preset",
                data={
                    "user_id": callback.from_user.id,
                    "preset_id": preset_id
                },
                source_module="telegram"
            ))
            
            await callback.answer("üóëÔ∏è –ü—Ä–µ—Å–µ—Ç —É–¥–∞–ª—è–µ—Ç—Å—è...")
            
        except Exception as e:
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ—Å–µ—Ç–∞")
    
    async def _handle_preset_created(self, event: Event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–∞."""
        # TODO: –£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        pass
    
    async def _handle_preset_activated(self, event: Event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–µ—Å–µ—Ç–∞."""
        # TODO: –£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        pass