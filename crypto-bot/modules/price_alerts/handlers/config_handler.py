# modules/price_alerts/handlers/config_handler.py
"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ü–µ–Ω–æ–≤—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤."""

from aiogram import types, F
from aiogram.utils.keyboard import InlineKeyboardBuilder
from shared.events import event_bus, Event


class ConfigHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–µ—Å–µ—Ç–æ–≤ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    
    def register_handlers(self, router):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
        router.message(F.text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥–æ–≤")(self.config_menu)
        router.callback_query(F.data == "active_presets")(self.show_active_presets)
        router.callback_query(F.data == "inactive_presets")(self.show_inactive_presets)
        router.callback_query(F.data == "back_to_config")(self.back_to_config)
        router.callback_query(F.data == "back_to_main")(self.back_to_main)
    
    async def config_menu(self, message: types.Message):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
        try:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏—è
            await event_bus.publish(Event(
                type="price_alerts.get_user_data",
                data={"user_id": message.from_user.id},
                source_module="telegram"
            ))
            
            # TODO: –ñ–¥–µ–º –æ—Ç–≤–µ—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
            await self._send_config_menu(message)
            
        except Exception as e:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    
    async def show_active_presets(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤."""
        try:
            await event_bus.publish(Event(
                type="price_alerts.get_active_presets",
                data={"user_id": callback.from_user.id},
                source_module="telegram"
            ))
            
            # TODO: –ñ–¥–µ–º –æ—Ç–≤–µ—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
            
            builder = InlineKeyboardBuilder()
            builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_config")
            
            await callback.message.edit_text(
                "üü¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã:\n\n–ó–∞–≥—Ä—É–∑–∫–∞...",
                reply_markup=builder.as_markup()
            )
            await callback.answer()
            
        except Exception as e:
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ—Å–µ—Ç–æ–≤")
    
    async def show_inactive_presets(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤."""
        try:
            await event_bus.publish(Event(
                type="price_alerts.get_inactive_presets",
                data={"user_id": callback.from_user.id},
                source_module="telegram"
            ))
            
            builder = InlineKeyboardBuilder()
            builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_config")
            
            await callback.message.edit_text(
                "üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã:\n\n–ó–∞–≥—Ä—É–∑–∫–∞...",
                reply_markup=builder.as_markup()
            )
            await callback.answer()
            
        except Exception as e:
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ—Å–µ—Ç–æ–≤")
    
    async def back_to_config(self, callback: types.CallbackQuery):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
        try:
            await self._send_config_menu_edit(callback)
        except Exception as e:
            await callback.answer("–û—à–∏–±–∫–∞")
    
    async def back_to_main(self, callback: types.CallbackQuery):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é."""
        try:
            await callback.message.delete()
            
            await event_bus.publish(Event(
                type="telegram.show_main_menu",
                data={"user_id": callback.from_user.id},
                source_module="price_alerts"
            ))
            
            await callback.answer()
            
        except Exception as e:
            await callback.answer("–û—à–∏–±–∫–∞")
    
    async def _send_config_menu(self, message: types.Message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
        builder = InlineKeyboardBuilder()
        builder.button(text="üü¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã", callback_data="active_presets")
        builder.button(text="üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã", callback_data="inactive_presets")
        builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ—Å–µ—Ç", callback_data="add_preset")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
        builder.adjust(1)
        
        await message.answer(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–µ–Ω–æ–≤—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤:\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–∞–º–∏:",
            reply_markup=builder.as_markup()
        )
    
    async def _send_config_menu_edit(self, callback: types.CallbackQuery):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
        builder = InlineKeyboardBuilder()
        builder.button(text="üü¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã", callback_data="active_presets")
        builder.button(text="üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã", callback_data="inactive_presets")
        builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ—Å–µ—Ç", callback_data="add_preset")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
        builder.adjust(1)
        
        await callback.message.edit_text(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–µ–Ω–æ–≤—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤:\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–∞–º–∏:",
            reply_markup=builder.as_markup()
        )
        await callback.answer()