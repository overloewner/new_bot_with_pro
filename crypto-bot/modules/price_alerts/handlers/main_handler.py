# modules/price_alerts/handlers/main_handler.py
"""–ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—á–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Price Alerts —Å –≤—Å–µ–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏."""

from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from shared.events import event_bus, Event
from shared.utils.logger import get_module_logger
from .states import PresetStates

logger = get_module_logger("price_alerts_handler")


class PriceAlertsHandler:
    """–ü–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Price Alerts."""
    
    def __init__(self):
        self.router = Router()
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ—Ç–≤–µ—Ç—ã –æ—Ç —Å–µ—Ä–≤–∏—Å–∞
        event_bus.subscribe("price_alerts.preset_created", self._handle_preset_created)
        event_bus.subscribe("price_alerts.user_presets_response", self._handle_user_presets_response)
        event_bus.subscribe("price_alerts.current_prices_response", self._handle_prices_response)
        event_bus.subscribe("price_alerts.statistics_response", self._handle_statistics_response)
        
        # –ö–µ—à –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
        self._response_cache = {}
    
    def register_handlers(self, dp):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –í–°–ï–• –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
        
        # –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´
        self.router.callback_query(F.data == "price_alerts")(self.show_main_menu)
        self.router.callback_query(F.data == "price_create_preset")(self.start_create_preset)
        self.router.callback_query(F.data == "price_my_presets")(self.show_user_presets)
        self.router.callback_query(F.data == "price_start_monitoring")(self.start_monitoring)
        self.router.callback_query(F.data == "price_stop_monitoring")(self.stop_monitoring)
        self.router.callback_query(F.data == "price_statistics")(self.show_statistics)
        self.router.callback_query(F.data == "price_current_prices")(self.show_current_prices)
        
        # –°–û–ó–î–ê–ù–ò–ï –ü–†–ï–°–ï–¢–ê - –í–°–ï –®–ê–ì–ò
        self.router.message(PresetStates.waiting_name)(self.process_preset_name)
        self.router.callback_query(F.data.startswith("pairs_"))(self.process_pairs_selection)
        self.router.message(PresetStates.waiting_pairs)(self.process_manual_pairs)
        self.router.callback_query(F.data.startswith("interval_"))(self.process_interval)
        self.router.callback_query(F.data.startswith("percent_"))(self.process_quick_percent)
        self.router.message(PresetStates.waiting_percent)(self.process_percent)
        
        # –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–ï–°–ï–¢–ê–ú–ò
        self.router.callback_query(F.data.startswith("activate_"))(self.activate_preset)
        self.router.callback_query(F.data.startswith("deactivate_"))(self.deactivate_preset)
        self.router.callback_query(F.data.startswith("delete_preset_"))(self.delete_preset)
        self.router.callback_query(F.data.startswith("edit_preset_"))(self.edit_preset)
        
        # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
        self.router.callback_query(F.data == "price_help")(self.show_help)
        self.router.callback_query(F.data == "price_settings")(self.show_settings)
        self.router.callback_query(F.data == "price_export")(self.export_data)
        
        dp.include_router(self.router)
    
    async def show_main_menu(self, callback: types.CallbackQuery):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é Price Alerts."""
        user_id = callback.from_user.id
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        await event_bus.publish(Event(
            type="price_alerts.get_user_presets",
            data={"user_id": user_id},
            source_module="telegram"
        ))
        
        await event_bus.publish(Event(
            type="price_alerts.get_statistics",
            data={"user_id": user_id},
            source_module="telegram"
        ))
        
        text = (
            "üìà <b>Price Alerts</b>\n\n"
            "üöÄ <b>–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</b>\n\n"
            
            "üéØ <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
            "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø —Ç–æ–∫–µ–Ω–æ–≤\n"
            "‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ 500 –ø–∞—Ä –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ\n" 
            "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è\n"
            "‚Ä¢ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã\n"
            "‚Ä¢ –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n"
            
            "üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ..."
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–µ—Å–µ—Ç", callback_data="price_create_preset")
        builder.button(text="üìã –ú–æ–∏ –ø—Ä–µ—Å–µ—Ç—ã", callback_data="price_my_presets")
        builder.button(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data="price_start_monitoring")
        builder.button(text="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data="price_stop_monitoring")
        builder.button(text="üìä –¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã", callback_data="price_current_prices")
        builder.button(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="price_statistics")
        builder.button(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="price_settings")
        builder.button(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="price_help")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
        builder.adjust(2, 2, 2, 2, 1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self._response_cache[user_id] = {
            "type": "main_menu",
            "message": callback.message
        }
    
    async def start_create_preset(self, callback: types.CallbackQuery, state: FSMContext):
        """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–∞."""
        await state.set_state(PresetStates.waiting_name)
        
        text = (
            "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞ - –®–∞–≥ 1/4</b>\n\n"
            
            "üè∑Ô∏è <b>–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –ø–æ–Ω—è—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–µ—Å–µ—Ç–∞:\n\n"
            
            "üí° <b>–ü—Ä–∏–º–µ—Ä—ã —Ö–æ—Ä–æ—à–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π:</b>\n"
            "‚Ä¢ \"–¢–æ–ø –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã 2%\"\n"
            "‚Ä¢ \"DeFi —Ç–æ–∫–µ–Ω—ã 5%\"\n" 
            "‚Ä¢ \"–ê–ª—å—Ç–∫–æ–∏–Ω—ã –±—ã—Å—Ç—Ä—ã–µ —Å–∏–≥–Ω–∞–ª—ã\"\n"
            "‚Ä¢ \"–ú–æ–∏ –ª—é–±–∏–º—ã–µ –º–æ–Ω–µ—Ç—ã\"\n\n"
            
            "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (3-50 —Å–∏–º–≤–æ–ª–æ–≤):"
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="price_alerts")
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
    
    async def process_preset_name(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–∞."""
        try:
            preset_name = message.text.strip()
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            if len(preset_name) < 3:
                await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
            
            if len(preset_name) > 50:
                await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
            
            await state.update_data(preset_name=preset_name)
            await state.set_state(PresetStates.waiting_pairs)
            
            text = (
                f"‚úÖ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {preset_name}\n\n"
                
                "üìä <b>–®–∞–≥ 2/4: –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä:"
            )
            
            builder = InlineKeyboardBuilder()
            builder.button(text="üîù –¢–æ–ø 10 –ø–∞—Ä", callback_data="pairs_top10")
            builder.button(text="üìà –¢–æ–ø 25 –ø–∞—Ä", callback_data="pairs_top25")
            builder.button(text="üí∞ –¢–æ–ø 50 –ø–∞—Ä", callback_data="pairs_top50")
            builder.button(text="üìä –ü–æ –æ–±—ä–µ–º—É —Ç–æ—Ä–≥–æ–≤", callback_data="pairs_volume")
            builder.button(text="üè∑Ô∏è –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="pairs_categories")
            builder.button(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="pairs_manual")
            builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="price_alerts")
            builder.adjust(2, 2, 1, 1, 1)
            
            await message.answer(text, reply_markup=builder.as_markup(), parse_mode="HTML")
            
        except Exception as e:
            logger.error(f"Error processing preset name: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
    
    async def process_pairs_selection(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä."""
        selection = callback.data.split("_")[1]
        
        # –ú–æ–∫–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–∞—Ä—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        pairs_data = {
            "top10": ["BTCUSDT", "ETHUSDT", "BNBUSDT", "XRPUSDT", "ADAUSDT", 
                     "SOLUSDT", "DOGEUSDT", "DOTUSDT", "AVAXUSDT", "SHIBUSDT"],
            "top25": ["BTCUSDT", "ETHUSDT", "BNBUSDT", "XRPUSDT", "ADAUSDT", 
                     "SOLUSDT", "DOGEUSDT", "DOTUSDT", "AVAXUSDT", "SHIBUSDT",
                     "MATICUSDT", "LTCUSDT", "LINKUSDT", "UNIUSDT", "ATOMUSDT",
                     "FILUSDT", "XLMUSDT", "VETUSDT", "ICPUSDT", "ETCUSDT",
                     "ALGOUSDT", "TRXUSDT", "HBARUSDT", "EOSUSDT", "AAVEUSDT"],
            "top50": ["BTCUSDT", "ETHUSDT", "BNBUSDT"] + [f"TOKEN{i}USDT" for i in range(1, 48)],
            "volume": ["BTCUSDT", "ETHUSDT", "BNBUSDT", "XRPUSDT", "ADAUSDT"],
            "categories": ["BTCUSDT", "ETHUSDT", "BNBUSDT", "ADAUSDT", "SOLUSDT"]
        }
        
        selected_pairs = pairs_data.get(selection, pairs_data["top10"])
        
        await state.update_data(pairs=selected_pairs)
        await self._show_interval_selection(callback, state, len(selected_pairs))
    
    async def process_manual_pairs(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ø–∞—Ä."""
        try:
            pairs_text = message.text.strip().upper()
            
            # –ü–∞—Ä—Å–∏–º –ø–∞—Ä—ã
            pairs = []
            for pair in pairs_text.replace(",", " ").replace(";", " ").split():
                pair = pair.strip()
                if pair:
                    # –î–æ–±–∞–≤–ª—è–µ–º USDT –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
                    if not pair.endswith("USDT"):
                        if not any(pair.endswith(suffix) for suffix in ["USDT", "BUSD", "BTC", "ETH"]):
                            pair += "USDT"
                    pairs.append(pair)
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            if not pairs:
                await message.answer(
                    "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –ø–∞—Ä!\n\n"
                    "üí° –ü—Ä–∏–º–µ—Ä—ã –≤–≤–æ–¥–∞:\n"
                    "‚Ä¢ BTC ETH BNB\n"
                    "‚Ä¢ BTCUSDT, ETHUSDT, BNBUSDT\n"
                    "‚Ä¢ BTC USDT ETH USDT\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return
            
            if len(pairs) > 100:
                await message.answer(
                    f"‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–∞—Ä ({len(pairs)})!\n"
                    "–ú–∞–∫—Å–∏–º—É–º 100 –ø–∞—Ä –Ω–∞ –ø—Ä–µ—Å–µ—Ç.\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ –º–µ–Ω—å—à–µ –ø–∞—Ä:"
                )
                return
            
            await state.update_data(pairs=pairs)
            await self._show_interval_selection(message, state, len(pairs))
            
        except Exception as e:
            logger.error(f"Error processing manual pairs: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
    
    async def _show_interval_selection(self, event, state: FSMContext, pairs_count: int):
        """–ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞."""
        await state.set_state(PresetStates.waiting_interval)
        
        text = (
            f"‚úÖ <b>–í—ã–±—Ä–∞–Ω–æ –ø–∞—Ä:</b> {pairs_count}\n\n"
            
            "‚è∞ <b>–®–∞–≥ 3/4: –¢–∞–π–º—Ñ—Ä–µ–π–º</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ü–µ–Ω:\n\n"
            
            "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
            "‚Ä¢ 1m - –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞ (–º–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤)\n"
            "‚Ä¢ 5m - –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏\n"
            "‚Ä¢ 15m - –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å\n"
            "‚Ä¢ 1h - –¥–ª—è —Å—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏\n"
            "‚Ä¢ 4h - –¥–ª—è —Å–≤–∏–Ω–≥-—Ç—Ä–µ–π–¥–∏–Ω–≥–∞\n"
            "‚Ä¢ 1d - –¥–ª—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="1m ‚ö°", callback_data="interval_1m")
        builder.button(text="5m üî•", callback_data="interval_5m")
        builder.button(text="15m ‚≠ê", callback_data="interval_15m")
        builder.button(text="1h üìà", callback_data="interval_1h")
        builder.button(text="4h üìä", callback_data="interval_4h")
        builder.button(text="1d üìâ", callback_data="interval_1d")
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="price_alerts")
        builder.adjust(3, 3, 1)
        
        if hasattr(event, 'message'):
            await event.answer(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        else:
            await event.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
            await event.answer()
    
    async def process_interval(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞."""
        interval = callback.data.split("_")[1]
        await state.update_data(interval=interval)
        await state.set_state(PresetStates.waiting_percent)
        
        data = await state.get_data()
        pairs_count = len(data.get('pairs', []))
        
        text = (
            f"‚úÖ <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª:</b> {interval}\n\n"
            
            "üìà <b>–®–∞–≥ 4/4: –ü—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è</b>\n\n"
            "–£–∫–∞–∂–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n\n"
            
            "üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
            "‚Ä¢ 1% - –º–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤\n"
            "‚Ä¢ 2-3% - –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞\n"
            "‚Ä¢ 5%+ - —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è"
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="1%", callback_data="percent_1")
        builder.button(text="2%", callback_data="percent_2")
        builder.button(text="3%", callback_data="percent_3")
        builder.button(text="5%", callback_data="percent_5")
        builder.button(text="10%", callback_data="percent_10")
        builder.button(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="percent_manual")
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="price_alerts")
        builder.adjust(3, 2, 1, 1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
    
    async def process_quick_percent(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞."""
        if callback.data == "percent_manual":
            text = (
                "üìù <b>–†—É—á–Ω–æ–π –≤–≤–æ–¥ –ø—Ä–æ—Ü–µ–Ω—Ç–∞</b>\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è (–æ—Ç 0.1 –¥–æ 100):\n"
                "–ü—Ä–∏–º–µ—Ä—ã: 1.5, 2.3, 7.5"
            )
            
            builder = InlineKeyboardBuilder()
            builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="price_alerts")
            
            await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
            await callback.answer()
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç
        percent = float(callback.data.split("_")[1])
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞
        await self._complete_preset_creation(callback, state, percent)
    
    async def process_percent(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞."""
        try:
            percent_text = message.text.strip().replace('%', '').replace(',', '.')
            percent = float(percent_text)
            
            if percent <= 0 or percent > 100:
                await message.answer("‚ùå –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0.1% –¥–æ 100%. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞
            await self._complete_preset_creation(message, state, percent)
            
        except ValueError:
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2.5):")
    
    async def _complete_preset_creation(self, event, state: FSMContext, percent: float):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–∞."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            data = await state.get_data()
            preset_data = {
                'preset_name': data['preset_name'],
                'symbols': data['pairs'],  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å pairs –Ω–∞ symbols
                'percent_threshold': percent,
                'interval': data['interval']
            }
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ—Å–µ—Ç —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
            user_id = event.from_user.id if hasattr(event, 'from_user') else event.message.chat.id
            
            await event_bus.publish(Event(
                type="price_alerts.create_preset",
                data={
                    "user_id": user_id,
                    "preset_data": preset_data
                },
                source_module="telegram"
            ))
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            text = (
                "‚úÖ <b>–ü—Ä–µ—Å–µ—Ç —Å–æ–∑–¥–∞–µ—Ç—Å—è...</b>\n\n"
                
                f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {preset_data['preset_name']}\n"
                f"üìä <b>–ü–∞—Ä:</b> {len(preset_data['symbols'])}\n"
                f"‚è∞ <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª:</b> {preset_data['interval']}\n"
                f"üìà <b>–ü—Ä–æ—Ü–µ–Ω—Ç:</b> {preset_data['percent_threshold']}%\n\n"
                
                "üéØ –ü—Ä–µ—Å–µ—Ç –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!\n"
                "üîî –í—ã –Ω–∞—á–Ω–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Ü–µ–Ω."
            )
            
            builder = InlineKeyboardBuilder()
            builder.button(text="üìã –ú–æ–∏ –ø—Ä–µ—Å–µ—Ç—ã", callback_data="price_my_presets")
            builder.button(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data="price_start_monitoring")
            builder.button(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="price_alerts")
            builder.adjust(1)
            
            if hasattr(event, 'message'):
                await event.answer(text, reply_markup=builder.as_markup(), parse_mode="HTML")
            else:
                await event.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
                await event.answer()
            
            await state.clear()
            
        except Exception as e:
            logger.error(f"Error completing preset creation: {e}")
            error_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ—Å–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            
            if hasattr(event, 'message'):
                await event.answer(error_text)
            else:
                await event.message.answer(error_text)
    
    async def show_user_presets(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑ –ø—Ä–µ—Å–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        user_id = callback.from_user.id
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–µ—Å–µ—Ç—ã
        await event_bus.publish(Event(
            type="price_alerts.get_user_presets",
            data={"user_id": user_id},
            source_module="telegram"
        ))
        
        text = "üìã <b>–ú–æ–∏ –ø—Ä–µ—Å–µ—Ç—ã</b>\n\nüîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞—à–∏ –ø—Ä–µ—Å–µ—Ç—ã..."
        
        builder = InlineKeyboardBuilder()
        builder.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–µ—Å–µ—Ç", callback_data="price_create_preset")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="price_alerts")
        builder.adjust(1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        self._response_cache[user_id] = {
            "type": "user_presets",
            "message": callback.message
        }
    
    async def start_monitoring(self, callback: types.CallbackQuery):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
        await event_bus.publish(Event(
            type="price_alerts.start_monitoring",
            data={"user_id": callback.from_user.id},
            source_module="telegram"
        ))
        
        await callback.answer("üöÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω! –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await self.show_main_menu(callback)
    
    async def stop_monitoring(self, callback: types.CallbackQuery):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
        await event_bus.publish(Event(
            type="price_alerts.stop_monitoring",
            data={"user_id": callback.from_user.id},
            source_module="telegram"
        ))
        
        await callback.answer("‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await self.show_main_menu(callback)
    
    async def show_current_prices(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑ —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω."""
        user_id = callback.from_user.id
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã
        await event_bus.publish(Event(
            type="price_alerts.get_current_prices",
            data={"user_id": user_id, "symbols": ["BTCUSDT", "ETHUSDT", "BNBUSDT"]},
            source_module="telegram"
        ))
        
        text = "üìä <b>–¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã</b>\n\nüîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ..."
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="price_current_prices")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="price_alerts")
        builder.adjust(1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        self._response_cache[user_id] = {
            "type": "current_prices",
            "message": callback.message
        }
    
    async def show_statistics(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        user_id = callback.from_user.id
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await event_bus.publish(Event(
            type="price_alerts.get_statistics",
            data={"user_id": user_id},
            source_module="telegram"
        ))
        
        text = "üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\nüîÑ –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ..."
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="price_statistics")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="price_alerts")
        builder.adjust(1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        self._response_cache[user_id] = {
            "type": "statistics",
            "message": callback.message
        }
    
    async def activate_preset(self, callback: types.CallbackQuery):
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–µ—Å–µ—Ç–∞."""
        preset_id = callback.data.split("_", 1)[1]
        
        await event_bus.publish(Event(
            type="price_alerts.activate_preset",
            data={"user_id": callback.from_user.id, "preset_id": preset_id},
            source_module="telegram"
        ))
        
        await callback.answer("‚úÖ –ü—Ä–µ—Å–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è...")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ—Å–µ—Ç–æ–≤
        await self.show_user_presets(callback)
    
    async def deactivate_preset(self, callback: types.CallbackQuery):
        """–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–µ—Å–µ—Ç–∞."""
        preset_id = callback.data.split("_", 1)[1]
        
        await event_bus.publish(Event(
            type="price_alerts.deactivate_preset",
            data={"user_id": callback.from_user.id, "preset_id": preset_id},
            source_module="telegram"
        ))
        
        await callback.answer("‚èπÔ∏è –ü—Ä–µ—Å–µ—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è...")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ—Å–µ—Ç–æ–≤
        await self.show_user_presets(callback)
    
    async def delete_preset(self, callback: types.CallbackQuery):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞."""
        preset_id = callback.data.split("_", 2)[2]
        
        await event_bus.publish(Event(
            type="price_alerts.delete_preset",
            data={"user_id": callback.from_user.id, "preset_id": preset_id},
            source_module="telegram"
        ))
        
        await callback.answer("üóëÔ∏è –ü—Ä–µ—Å–µ—Ç —É–¥–∞–ª—è–µ—Ç—Å—è...")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ—Å–µ—Ç–æ–≤
        await self.show_user_presets(callback)
    
    async def edit_preset(self, callback: types.CallbackQuery):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞."""
        await callback.answer("‚öôÔ∏è –§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    async def show_help(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑ —Å–ø—Ä–∞–≤–∫–∏."""
        text = (
            "‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ Price Alerts</b>\n\n"
            
            "üìù <b>–ü—Ä–µ—Å–µ—Ç—ã:</b>\n"
            "–ì—Ä—É–ø–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω—ã –ø–æ —Ç–µ–º–∞–º –∏–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º\n\n"
            
            "üìà <b>–ü—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è:</b>\n"
            "‚Ä¢ 1-2% - –º–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤\n"
            "‚Ä¢ 3-5% - –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ\n"
            "‚Ä¢ 10%+ - —Ç–æ–ª—å–∫–æ –∫—Ä—É–ø–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è\n\n"
            
            "‚è∞ <b>–¢–∞–π–º—Ñ—Ä–µ–π–º—ã:</b>\n"
            "‚Ä¢ 1m/5m - —Å–∫–∞–ª—å–ø–∏–Ω–≥\n"
            "‚Ä¢ 15m/1h - —Å–≤–∏–Ω–≥-—Ç—Ä–µ–π–¥–∏–Ω–≥\n"
            "‚Ä¢ 4h/1d - –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è\n\n"
            
            "üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>\n"
            "–ü—Ä–∏—Ö–æ–¥—è—Ç —Å—Ä–∞–∑—É –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —É—Å–ª–æ–≤–∏–π"
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–µ—Å–µ—Ç", callback_data="price_create_preset")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="price_alerts")
        builder.adjust(1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
    
    async def show_settings(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
        text = (
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Price Alerts</b>\n\n"
            
            "üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> –í–∫–ª—é—á–µ–Ω—ã\n"
            "üì± <b>–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞:</b> –í–∫–ª—é—á–µ–Ω–∞\n"
            "üîä <b>–ó–≤—É–∫:</b> –í–∫–ª—é—á–µ–Ω\n"
            "‚è∞ <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:</b> 15m\n"
            "üìà <b>–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:</b> 3%\n\n"
            
            "üí° –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω—è—Ç—Å—è –∫ –Ω–æ–≤—ã–º –ø—Ä–µ—Å–µ—Ç–∞–º"
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="settings_notifications")
        builder.button(text="üì± –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞", callback_data="settings_grouping")
        builder.button(text="üîä –ó–≤—É–∫", callback_data="settings_sound")
        builder.button(text="‚öôÔ∏è –î–µ—Ñ–æ–ª—Ç—ã", callback_data="settings_defaults")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="price_alerts")
        builder.adjust(2, 2, 1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
    
    async def export_data(self, callback: types.CallbackQuery):
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö."""
        text = (
            "üì§ <b>–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
            
            "üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
            "‚Ä¢ JSON - –≤—Å–µ –ø—Ä–µ—Å–µ—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
            "‚Ä¢ CSV - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤\n"
            "‚Ä¢ TXT - —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–∞—Ä\n\n"
            
            "‚ö†Ô∏è –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="price_alerts")
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
    
    # EVENT HANDLERS
    
    async def _handle_preset_created(self, event: Event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–∞."""
        success = event.data.get("success")
        user_id = event.data.get("user_id")
        
        if success:
            logger.info(f"Preset created successfully for user {user_id}")
        else:
            logger.warning(f"Failed to create preset for user {user_id}")
    
    async def _handle_user_presets_response(self, event: Event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å –ø—Ä–µ—Å–µ—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        user_id = event.data.get("user_id")
        presets = event.data.get("presets", [])
        
        if user_id not in self._response_cache:
            return
        
        context = self._response_cache[user_id]
        
        if context["type"] == "user_presets":
            await self._update_presets_display(context["message"], presets)
        elif context["type"] == "main_menu":
            await self._update_main_menu_with_presets(context["message"], presets, user_id)
        
        # –û—á–∏—â–∞–µ–º –∫–µ—à
        if user_id in self._response_cache:
            del self._response_cache[user_id]
    
    async def _update_presets_display(self, message: types.Message, presets: list):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–æ–≤."""
        if not presets:
            text = (
                "üìã <b>–ú–æ–∏ –ø—Ä–µ—Å–µ—Ç—ã</b>\n\n"
                "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤\n\n"
                "üí° –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–µ—Å–µ—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å\n"
                "–ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–≤–∏–∂–µ–Ω–∏—è—Ö —Ü–µ–Ω!"
            )
            
            builder = InlineKeyboardBuilder()
            builder.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π –ø—Ä–µ—Å–µ—Ç", callback_data="price_create_preset")
            builder.button(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="price_help")
            builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="price_alerts")
            builder.adjust(1)
        else:
            text = f"üìã <b>–ú–æ–∏ –ø—Ä–µ—Å–µ—Ç—ã ({len(presets)})</b>\n\n"
            
            builder = InlineKeyboardBuilder()
            
            for i, preset in enumerate(presets, 1):
                status = "üü¢" if preset.get('is_active', False) else "üî¥"
                
                text += (
                    f"{status} <b>{preset['name']}</b>\n"
                    f"   üìä {preset['symbols_count']} –ø–∞—Ä\n"
                    f"   ‚è∞ {preset['interval']}\n"
                    f"   üìà {preset['percent_threshold']}%\n"
                )
                
                if preset.get('alerts_count', 0) > 0:
                    text += f"   üîî {preset['alerts_count']} –∞–ª–µ—Ä—Ç–æ–≤\n"
                
                text += "\n"
                
                # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                preset_id = preset['id']
                if preset.get('is_active', False):
                    builder.button(text=f"‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å #{i}", callback_data=f"deactivate_{preset_id}")
                else:
                    builder.button(text=f"‚ñ∂Ô∏è –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å #{i}", callback_data=f"activate_{preset_id}")
                
                builder.button(text=f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å #{i}", callback_data=f"delete_preset_{preset_id}")
            
            builder.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–µ—Å–µ—Ç", callback_data="price_create_preset")
            builder.button(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ", callback_data="price_start_monitoring")
            builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="price_alerts")
            builder.adjust(2)
        
        try:
            await message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        except Exception as e:
            logger.error(f"Error updating presets display: {e}")
    
    async def _update_main_menu_with_presets(self, message: types.Message, presets: list, user_id: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–µ—Å–µ—Ç–∞—Ö."""
        active_presets = [p for p in presets if p.get('is_active', False)]
        total_pairs = sum(p.get('symbols_count', 0) for p in active_presets)
        
        text = (
            "üìà <b>Price Alerts</b>\n\n"
            "üöÄ <b>–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</b>\n\n"
            
            f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"‚Ä¢ –ü—Ä–µ—Å–µ—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {len(presets)}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤: {len(active_presets)}\n"
            f"‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–∞—Ä: {total_pairs}\n\n"
            
            "üéØ <b>–°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:</b> " + 
            ("üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if active_presets else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω") + "\n\n"
            
            "‚ö° –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–µ—Å–µ—Ç", callback_data="price_create_preset")
        builder.button(text="üìã –ú–æ–∏ –ø—Ä–µ—Å–µ—Ç—ã", callback_data="price_my_presets")
        
        if active_presets:
            builder.button(text="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data="price_stop_monitoring")
        else:
            builder.button(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data="price_start_monitoring")
        
        builder.button(text="üìä –¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã", callback_data="price_current_prices")
        builder.button(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="price_statistics")
        builder.button(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="price_settings")
        builder.button(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="price_help")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
        builder.adjust(2, 1, 2, 2, 1)
        
        try:
            await message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        except Exception as e:
            logger.error(f"Error updating main menu: {e}")
    
    async def _handle_prices_response(self, event: Event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å —Ç–µ–∫—É—â–∏–º–∏ —Ü–µ–Ω–∞–º–∏."""
        user_id = event.data.get("user_id")
        prices = event.data.get("prices", {})
        
        if user_id not in self._response_cache:
            return
        
        context = self._response_cache[user_id]
        if context["type"] != "current_prices":
            return
        
        message = context["message"]
        
        if not prices:
            text = (
                "üìä <b>–¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã</b>\n\n"
                "‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∂–µ"
            )
        else:
            text = "üìä <b>–¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã</b>\n\n"
            
            for symbol, price_data in prices.items():
                change_icon = "üü¢" if price_data['change_percent_24h'] > 0 else "üî¥"
                
                text += (
                    f"{change_icon} <b>{symbol}</b>\n"
                    f"   üí∞ ${price_data['price']:.4f}\n"
                    f"   üìà {price_data['change_percent_24h']:+.2f}%\n"
                    f"   üìä Volume: ${price_data['volume_24h']:,.0f}\n\n"
                )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="price_current_prices")
        builder.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∞–ª–µ—Ä—Ç", callback_data="price_create_preset")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="price_alerts")
        builder.adjust(2, 1)
        
        try:
            await message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        except Exception as e:
            logger.error(f"Error updating prices display: {e}")
        
        # –û—á–∏—â–∞–µ–º –∫–µ—à
        if user_id in self._response_cache:
            del self._response_cache[user_id]
    
    async def _handle_statistics_response(self, event: Event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π."""
        user_id = event.data.get("user_id")
        statistics = event.data.get("statistics", {})
        
        if user_id not in self._response_cache:
            return
        
        context = self._response_cache[user_id]
        if context["type"] != "statistics":
            return
        
        message = context["message"]
        
        text = (
            "üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Price Alerts</b>\n\n"
            
            f"üìä <b>–°–∏—Å—Ç–µ–º–∞:</b>\n"
            f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {'üü¢ –†–∞–±–æ—Ç–∞–µ—Ç' if statistics.get('running', False) else 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}\n"
            f"‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤: {statistics.get('monitored_symbols', 0)}\n"
            f"‚Ä¢ –¢–µ–∫—É—â–∏—Ö —Ü–µ–Ω –≤ –∫–µ—à–µ: {statistics.get('current_prices_count', 0)}\n\n"
            
            f"üë§ <b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∞–ª–µ—Ä—Ç–æ–≤: {statistics.get('total_alerts', 0)}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤: {statistics.get('active_alerts', 0)}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–µ—Å–µ—Ç–æ–≤: {statistics.get('total_presets', 0)}\n\n"
            
            f"üìà <b>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {statistics.get('total_updates', 0)}\n"
            f"‚Ä¢ –ù–µ—É–¥–∞—á–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {statistics.get('failed_updates', 0)}\n"
            f"‚Ä¢ API –≤—ã–∑–æ–≤–æ–≤: {statistics.get('api_calls', 0)}\n"
            f"‚Ä¢ –ê–ª–µ—Ä—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {statistics.get('alerts_triggered', 0)}\n"
        )
        
        if statistics.get('avg_response_time', 0) > 0:
            text += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {statistics['avg_response_time']:.2f}—Å\n"
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="price_statistics")
        builder.button(text="üìä –¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã", callback_data="price_current_prices")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="price_alerts")
        builder.adjust(2, 1)
        
        try:
            await message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        except Exception as e:
            logger.error(f"Error updating statistics display: {e}")
        
        # –û—á–∏—â–∞–µ–º –∫–µ—à
        if user_id in self._response_cache:
            del self._response_cache[user_id]