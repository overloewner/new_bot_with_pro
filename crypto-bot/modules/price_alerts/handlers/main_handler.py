# modules/price_alerts/handlers/main_handler.py
"""–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ price_alerts."""

from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from shared.events import event_bus, Event
from shared.utils.logger import get_module_logger
from .states import PresetStates

logger = get_module_logger("price_alerts_handler")


class PriceAlertsHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ —Ü–µ–Ω–æ–≤—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤."""
    
    def __init__(self):
        self.router = Router()
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ—Ç–≤–µ—Ç—ã –æ—Ç —Å–µ—Ä–≤–∏—Å–∞
        event_bus.subscribe("price_alerts.preset_created", self._handle_preset_created)
        event_bus.subscribe("price_alerts.preset_activated", self._handle_preset_activated)
        event_bus.subscribe("price_alerts.user_presets_response", self._handle_user_presets_response)
        event_bus.subscribe("price_alerts.tokens_response", self._handle_tokens_response)
        
        # –ö–µ—à –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤
        self._response_cache = {}
    
    def register_handlers(self, dp):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.router.callback_query(F.data == "price_alerts")(self.show_main_menu)
        self.router.callback_query(F.data == "price_create_preset")(self.start_create_preset)
        self.router.callback_query(F.data == "price_my_presets")(self.show_user_presets)
        self.router.callback_query(F.data == "price_start_monitoring")(self.start_monitoring)
        self.router.callback_query(F.data == "price_stop_monitoring")(self.stop_monitoring)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞
        self.router.message(PresetStates.waiting_name)(self.process_preset_name)
        self.router.callback_query(F.data.startswith("pairs_"))(self.process_pairs_selection)
        self.router.message(PresetStates.waiting_pairs)(self.process_manual_pairs)
        self.router.callback_query(F.data.startswith("interval_"))(self.process_interval)
        self.router.message(PresetStates.waiting_percent)(self.process_percent)
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞–º–∏
        self.router.callback_query(F.data.startswith("activate_"))(self.activate_preset)
        self.router.callback_query(F.data.startswith("deactivate_"))(self.deactivate_preset)
        
        dp.include_router(self.router)
    
    async def show_main_menu(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é price alerts."""
        text = (
            "üìà <b>Price Alerts</b>\n\n"
            "–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n\n"
            "üîß <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
            "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø –ø–∞—Ä\n"
            "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è\n"
            "‚Ä¢ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã\n"
            "‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –æ–±—ä–µ–º—É\n"
            "‚Ä¢ –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n"
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            "‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤: 0\n"
            "‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–µ—Å–µ—Ç", callback_data="price_create_preset")
        builder.button(text="üìã –ú–æ–∏ –ø—Ä–µ—Å–µ—Ç—ã", callback_data="price_my_presets")
        builder.button(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data="price_start_monitoring")
        builder.button(text="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data="price_stop_monitoring")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
        builder.adjust(1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
    
    async def start_create_preset(self, callback: types.CallbackQuery, state: FSMContext):
        """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–∞."""
        await state.set_state(PresetStates.waiting_name)
        
        text = (
            "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞</b>\n\n"
            "–®–∞–≥ 1/4: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ \"–¢–æ–ø –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã 2%\"\n"
            "‚Ä¢ \"–ê–ª—å—Ç–∫–æ–∏–Ω—ã 5%\"\n"
            "‚Ä¢ \"DeFi —Ç–æ–∫–µ–Ω—ã\""
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="price_alerts")
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
    
    async def process_preset_name(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–∞."""
        try:
            preset_name = message.text.strip()
            
            if len(preset_name) < 3:
                await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞)")
                return
            
            if len(preset_name) > 50:
                await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤)")
                return
            
            await state.update_data(preset_name=preset_name)
            await state.set_state(PresetStates.waiting_pairs)
            
            text = (
                f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{preset_name}</b>\n\n"
                "üìä –®–∞–≥ 2/4: –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã\n\n"
                "–ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å –ø–∞—Ä—ã?"
            )
            
            builder = InlineKeyboardBuilder()
            builder.button(text="üîù –¢–æ–ø 10 –ø–∞—Ä", callback_data="pairs_top10")
            builder.button(text="üìà –¢–æ–ø 50 –ø–∞—Ä", callback_data="pairs_top50")
            builder.button(text="üí∞ –ü–æ –æ–±—ä–µ–º—É —Ç–æ—Ä–≥–æ–≤", callback_data="pairs_volume")
            builder.button(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="pairs_manual")
            builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="price_alerts")
            builder.adjust(1)
            
            await message.answer(text, reply_markup=builder.as_markup(), parse_mode="HTML")
            
        except Exception as e:
            logger.error(f"Error processing preset name: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏—è")
    
    async def process_pairs_selection(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä."""
        selection = callback.data.split("_")[1]
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã —É —Å–µ—Ä–≤–∏—Å–∞
        await event_bus.publish(Event(
            type="price_alerts.get_all_tokens",
            data={"selection": selection, "user_id": callback.from_user.id},
            source_module="telegram"
        ))
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        await callback.message.edit_text("üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤...")
        await callback.answer()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞
        self._response_cache[callback.from_user.id] = {
            "type": "pairs_selection",
            "selection": selection,
            "state": state,
            "message": callback.message
        }
    
    async def process_manual_pairs(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ø–∞—Ä."""
        try:
            pairs_text = message.text.strip().upper()
            pairs = [pair.strip() for pair in pairs_text.split(",")]
            
            # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
            valid_pairs = []
            for pair in pairs:
                if pair.endswith("USDT") and len(pair) > 4:
                    valid_pairs.append(pair)
            
            if not valid_pairs:
                await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö USDT –ø–∞—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
            
            if len(valid_pairs) > 100:
                await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–∞—Ä (–º–∞–∫—Å–∏–º—É–º 100). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
            
            await state.update_data(pairs=valid_pairs)
            await self._show_interval_selection(message, state, len(valid_pairs))
            
        except Exception as e:
            logger.error(f"Error processing manual pairs: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä")
    
    async def process_interval(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞."""
        interval = callback.data.split("_")[1]
        await state.update_data(interval=interval)
        await state.set_state(PresetStates.waiting_percent)
        
        data = await state.get_data()
        pairs_count = len(data.get('pairs', []))
        
        text = (
            f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª: <b>{interval}</b>\n\n"
            "üìà –®–∞–≥ 4/4: –ü—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã: 1, 2.5, 5, 10"
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="1%", callback_data="percent_1")
        builder.button(text="2%", callback_data="percent_2")
        builder.button(text="5%", callback_data="percent_5")
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="price_alerts")
        builder.adjust(3)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
    
    async def process_percent(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è."""
        try:
            percent_text = message.text.strip().replace('%', '').replace(',', '.')
            percent = float(percent_text)
            
            if percent <= 0 or percent > 100:
                await message.answer("‚ùå –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0.1% –¥–æ 100%")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            data = await state.get_data()
            preset_data = {
                'preset_name': data['preset_name'],
                'pairs': data['pairs'],
                'interval': data['interval'],
                'percent': percent
            }
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ—Å–µ—Ç —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
            await event_bus.publish(Event(
                type="price_alerts.create_preset",
                data={
                    "user_id": message.from_user.id,
                    "preset_data": preset_data
                },
                source_module="telegram"
            ))
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            text = (
                "‚úÖ <b>–ü—Ä–µ—Å–µ—Ç —Å–æ–∑–¥–∞–µ—Ç—Å—è...</b>\n\n"
                f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {preset_data['preset_name']}\n"
                f"üìä –ü–∞—Ä: {len(preset_data['pairs'])}\n"
                f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {preset_data['interval']}\n"
                f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç: {preset_data['percent']}%"
            )
            
            await message.answer(text, parse_mode="HTML")
            await state.clear()
            
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
        except Exception as e:
            logger.error(f"Error processing percent: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–∞")
    
    async def show_user_presets(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑ –ø—Ä–µ—Å–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–µ—Å–µ—Ç—ã —É —Å–µ—Ä–≤–∏—Å–∞
        await event_bus.publish(Event(
            type="price_alerts.get_user_presets",
            data={"user_id": callback.from_user.id},
            source_module="telegram"
        ))
        
        await callback.message.edit_text("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –≤–∞—à–∏ –ø—Ä–µ—Å–µ—Ç—ã...")
        await callback.answer()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        self._response_cache[callback.from_user.id] = {
            "type": "user_presets",
            "message": callback.message
        }
    
    async def start_monitoring(self, callback: types.CallbackQuery):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
        await event_bus.publish(Event(
            type="price_alerts.start_monitoring",
            data={"user_id": callback.from_user.id},
            source_module="telegram"
        ))
        
        await callback.answer("üöÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω!")
    
    async def stop_monitoring(self, callback: types.CallbackQuery):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
        await event_bus.publish(Event(
            type="price_alerts.stop_monitoring",
            data={"user_id": callback.from_user.id},
            source_module="telegram"
        ))
        
        await callback.answer("‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    
    async def activate_preset(self, callback: types.CallbackQuery):
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–µ—Å–µ—Ç–∞."""
        preset_id = callback.data.split("_", 1)[1]
        
        await event_bus.publish(Event(
            type="price_alerts.activate_preset",
            data={"user_id": callback.from_user.id, "preset_id": preset_id},
            source_module="telegram"
        ))
        
        await callback.answer("‚úÖ –ü—Ä–µ—Å–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è...")
    
    async def deactivate_preset(self, callback: types.CallbackQuery):
        """–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–µ—Å–µ—Ç–∞."""
        preset_id = callback.data.split("_", 1)[1]
        
        await event_bus.publish(Event(
            type="price_alerts.deactivate_preset",
            data={"user_id": callback.from_user.id, "preset_id": preset_id},
            source_module="telegram"
        ))
        
        await callback.answer("‚èπÔ∏è –ü—Ä–µ—Å–µ—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è...")
    
    async def _show_interval_selection(self, message: types.Message, state: FSMContext, pairs_count: int):
        """–ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞."""
        await state.set_state(PresetStates.waiting_interval)
        
        text = (
            f"‚úÖ –í—ã–±—Ä–∞–Ω–æ –ø–∞—Ä: <b>{pairs_count}</b>\n\n"
            "‚è∞ –®–∞–≥ 3/4: –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–≤–µ—á–∏\n\n"
            "–ß–µ–º –º–µ–Ω—å—à–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª, —Ç–µ–º —á–∞—â–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:"
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="1m", callback_data="interval_1m")
        builder.button(text="5m", callback_data="interval_5m")
        builder.button(text="15m", callback_data="interval_15m")
        builder.button(text="1h", callback_data="interval_1h")
        builder.button(text="4h", callback_data="interval_4h")
        builder.button(text="1d", callback_data="interval_1d")
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="price_alerts")
        builder.adjust(3, 3, 1)
        
        await message.answer(text, reply_markup=builder.as_markup(), parse_mode="HTML")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç —Å–µ—Ä–≤–∏—Å–∞
    async def _handle_preset_created(self, event: Event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–∞."""
        # TODO: –£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        pass
    
    async def _handle_preset_activated(self, event: Event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–µ—Å–µ—Ç–∞."""
        # TODO: –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        pass
    
    async def _handle_user_presets_response(self, event: Event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å –ø—Ä–µ—Å–µ—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        user_id = event.data.get("user_id")
        presets = event.data.get("presets", {})
        
        if user_id in self._response_cache:
            context = self._response_cache[user_id]
            
            if context["type"] == "user_presets":
                await self._show_presets_list(context["message"], presets)
                del self._response_cache[user_id]
    
    async def _handle_tokens_response(self, event: Event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–æ–∫–µ–Ω–æ–≤."""
        tokens = event.data.get("tokens", [])
        
        # –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–µ—à–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
        for user_id, context in list(self._response_cache.items()):
            if context["type"] == "pairs_selection":
                selection = context["selection"]
                
                if selection == "top10":
                    selected_pairs = tokens[:10]
                elif selection == "top50":
                    selected_pairs = tokens[:50]
                else:
                    selected_pairs = tokens[:10]  # fallback
                
                await context["state"].update_data(pairs=selected_pairs)
                await self._show_interval_selection(context["message"], context["state"], len(selected_pairs))
                
                del self._response_cache[user_id]
                break
    
    async def _show_presets_list(self, message: types.Message, presets: dict):
        """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ—Å–µ—Ç–æ–≤."""
        if not presets:
            text = "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤"
            builder = InlineKeyboardBuilder()
            builder.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π –ø—Ä–µ—Å–µ—Ç", callback_data="price_create_preset")
            builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="price_alerts")
        else:
            text = f"üìã <b>–í–∞—à–∏ –ø—Ä–µ—Å–µ—Ç—ã ({len(presets)}):</b>\n\n"
            
            builder = InlineKeyboardBuilder()
            
            for preset_id, preset in presets.items():
                status = "üü¢" if preset.get('is_active', False) else "üî¥"
                text += f"{status} <b>{preset['preset_name']}</b>\n"
                text += f"   üìä {len(preset['pairs'])} –ø–∞—Ä, {preset['interval']}, {preset['percent']}%\n\n"
                
                if preset.get('is_active', False):
                    builder.button(
                        text=f"‚èπÔ∏è {preset['preset_name'][:20]}",
                        callback_data=f"deactivate_{preset_id}"
                    )
                else:
                    builder.button(
                        text=f"‚ñ∂Ô∏è {preset['preset_name'][:20]}",
                        callback_data=f"activate_{preset_id}"
                    )
            
            builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="price_alerts")
            builder.adjust(1)
        
        await message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")