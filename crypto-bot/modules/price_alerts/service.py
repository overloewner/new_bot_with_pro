# modules/price_alerts/service.py
"""–û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å —Ü–µ–Ω–æ–≤—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤."""

import asyncio
from typing import Dict, Any, Optional
from shared.events import event_bus, Event
from shared.utils.logger import get_module_logger
from shared.database.manager import DatabaseManager

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–µ—Ä–≤–∏—Å—ã
from .services.candle_service import CandleService
from .services.alert_service import AlertService
from .services.preset_service import PresetService
from .services.token_service import TokenService
from .websocket.client import BinanceWebSocketClient
from .websocket.message_handler import MessageHandler


class PriceAlertsService:
    """–û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å —Ü–µ–Ω–æ–≤—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤ –º–æ–¥—É–ª—å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É."""
    
    def __init__(self, db_manager: Optional[DatabaseManager] = None):
        self.db_manager = db_manager
        self.logger = get_module_logger("price_alerts")
        
        # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–µ—Ä–≤–∏—Å—ã (–∞–¥–∞–ø—Ç–∏—Ä—É–µ–º)
        self.token_service: Optional[TokenService] = None
        self.preset_service: Optional[PresetService] = None
        self.alert_service: Optional[AlertService] = None
        self.candle_service: Optional[CandleService] = None
        self.websocket_client: Optional[BinanceWebSocketClient] = None
        
        self.running = False
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
        event_bus.subscribe("price_alerts.create_preset", self._handle_create_preset)
        event_bus.subscribe("price_alerts.activate_preset", self._handle_activate_preset)
    
    async def initialize(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞."""
        try:
            self.logger.info("üîß Initializing Price Alerts service...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–µ—Ä–≤–∏—Å—ã
            self.token_service = TokenService()
            await self.token_service.initialize()
            
            self.preset_service = PresetService()
            self.alert_service = AlertService()
            
            self.candle_service = CandleService(
                alert_service=self.alert_service,
                storage=None,  # –ë—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏—è
                config=None
            )
            
            # WebSocket –∫–ª–∏–µ–Ω—Ç
            message_handler = MessageHandler()
            self.websocket_client = BinanceWebSocketClient(
                config=None,
                message_handler=message_handler,
                on_message_callback=self._handle_candle_message
            )
            
            self.logger.info("‚úÖ Price Alerts service initialized")
            
        except Exception as e:
            self.logger.error(f"‚ùå Failed to initialize Price Alerts: {e}")
            raise
    
    async def start(self) -> None:
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞."""
        if self.running:
            return
        
        self.running = True
        self.logger.info("üöÄ Starting Price Alerts service...")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
            await self.alert_service.start()
            await self.candle_service.start()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä–∏–º—ã –∏ –∑–∞–ø—É—Å–∫–∞–µ–º WebSocket
            streams = await self._generate_streams()
            if streams:
                await self.websocket_client.start(streams)
            
            # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –∑–∞–ø—É—Å–∫–∞
            await event_bus.publish(Event(
                type="system.module_started",
                data={"module": "price_alerts"},
                source_module="price_alerts"
            ))
            
            self.logger.info("‚úÖ Price Alerts service started")
            
        except Exception as e:
            self.logger.error(f"‚ùå Failed to start Price Alerts: {e}")
            self.running = False
            raise
    
    async def stop(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞."""
        if not self.running:
            return
        
        self.logger.info("üõë Stopping Price Alerts service...")
        self.running = False
        
        try:
            if self.websocket_client:
                await self.websocket_client.stop()
            
            if self.candle_service:
                await self.candle_service.stop()
            
            if self.alert_service:
                await self.alert_service.stop()
            
            await event_bus.publish(Event(
                type="system.module_stopped",
                data={"module": "price_alerts"},
                source_module="price_alerts"
            ))
            
            self.logger.info("‚úÖ Price Alerts service stopped")
            
        except Exception as e:
            self.logger.error(f"‚ùå Error stopping Price Alerts: {e}")
    
    async def _generate_streams(self) -> list:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è WebSocket —Å—Ç—Ä–∏–º–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤."""
        if not self.token_service:
            return []
        
        tokens = self.token_service.get_all_tokens()
        timeframes = self.token_service.get_all_timeframes()
        
        # TODO: –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ—Å–µ—Ç–∞—Ö
        streams = [
            f"{token.lower()}@kline_{interval}"
            for token in tokens[:100]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –Ω–∞—á–∞–ª–∞
            for interval in timeframes
        ]
        
        self.logger.info(f"Generated {len(streams)} WebSocket streams")
        return streams
    
    async def _handle_candle_message(self, candle_data: Dict[str, Any]) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–≤–µ—á–∏ –æ—Ç WebSocket."""
        try:
            if self.candle_service:
                await self.candle_service.add_candle(candle_data)
        except Exception as e:
            self.logger.error(f"Error handling candle message: {e}")
    
    async def _handle_create_preset(self, event: Event) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–∞."""
        try:
            user_id = event.data.get("user_id")
            preset_data = event.data.get("preset_data")
            
            if self.preset_service and user_id and preset_data:
                preset_id = await self.preset_service.create_preset(user_id, preset_data)
                
                # –ü—É–±–ª–∏–∫—É–µ–º –æ—Ç–≤–µ—Ç
                await event_bus.publish(Event(
                    type="price_alerts.preset_created",
                    data={"user_id": user_id, "preset_id": preset_id, "success": preset_id is not None},
                    source_module="price_alerts"
                ))
        except Exception as e:
            self.logger.error(f"Error creating preset: {e}")
    
    async def _handle_activate_preset(self, event: Event) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–µ—Å–µ—Ç–∞."""
        try:
            user_id = event.data.get("user_id")
            preset_id = event.data.get("preset_id")
            
            if self.preset_service and user_id and preset_id:
                success = await self.preset_service.activate_preset(user_id, preset_id)
                
                await event_bus.publish(Event(
                    type="price_alerts.preset_activated",
                    data={"user_id": user_id, "preset_id": preset_id, "success": success},
                    source_module="price_alerts"
                ))
        except Exception as e:
            self.logger.error(f"Error activating preset: {e}")