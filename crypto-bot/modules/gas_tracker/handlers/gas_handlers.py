# modules/gas_tracker/handlers/gas_handlers.py
"""–ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—á–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –≥–∞–∑ —Ç—Ä–µ–∫–µ—Ä–∞."""

from aiogram import types, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime
from typing import Dict, Any, List

from shared.events import event_bus, Event, USER_COMMAND_RECEIVED
from shared.cache.memory_cache import cache_manager

import logging

logger = logging.getLogger(__name__)


class GasStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–∞–∑ –∞–ª–µ—Ä—Ç–æ–≤."""
    waiting_threshold = State()
    waiting_alert_type = State()
    waiting_cooldown = State()
    editing_alert = State()


class GasHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –≥–∞–∑ —Ç—Ä–µ–∫–µ—Ä–∞ —Å –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é."""
    
    def __init__(self, gas_service=None):
        self.gas_service = gas_service
        self.router = Router()
        self.cache = cache_manager.get_cache('gas_handlers')
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ—Ç–≤–µ—Ç—ã –æ—Ç —Å–µ—Ä–≤–∏—Å–∞
        event_bus.subscribe("gas_tracker.current_price_response", self._handle_price_response)
        event_bus.subscribe("gas_tracker.user_alerts_response", self._handle_alerts_response)
        event_bus.subscribe("gas_tracker.alert_added", self._handle_alert_added)
        event_bus.subscribe("gas_tracker.alert_removed", self._handle_alert_removed)
        event_bus.subscribe("gas_tracker.price_history_response", self._handle_history_response)
        
        # –ö–µ—à –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤
        self._response_cache = {}
    
    def register_handlers(self, dp):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.router.callback_query(F.data == "gas_tracker")(self.show_gas_menu)
        self.router.callback_query(F.data == "gas_current")(self.show_current_gas)
        self.router.callback_query(F.data == "gas_alerts")(self.show_user_alerts)
        self.router.callback_query(F.data == "gas_add_alert")(self.start_add_alert)
        self.router.callback_query(F.data == "gas_chart")(self.show_price_chart)
        self.router.callback_query(F.data == "gas_settings")(self.show_gas_settings)
        
        # –°–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–∞
        self.router.message(GasStates.waiting_threshold)(self.process_threshold)
        self.router.callback_query(F.data.startswith("gas_type_"))(self.process_alert_type)
        self.router.message(GasStates.waiting_cooldown)(self.process_cooldown)
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞–º–∏
        self.router.callback_query(F.data.startswith("gas_toggle_"))(self.toggle_alert)
        self.router.callback_query(F.data.startswith("gas_delete_"))(self.delete_alert)
        self.router.callback_query(F.data.startswith("gas_edit_"))(self.edit_alert)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        self.router.callback_query(F.data == "gas_statistics")(self.show_statistics)
        self.router.callback_query(F.data == "gas_refresh")(self.refresh_data)
        self.router.callback_query(F.data.startswith("gas_history_"))(self.show_history)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.router.callback_query(F.data == "gas_settings_notifications")(self.toggle_notifications)
        self.router.callback_query(F.data == "gas_settings_cooldown")(self.set_default_cooldown)
        
        dp.include_router(self.router)
    
    async def show_gas_menu(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –≥–∞–∑ —Ç—Ä–µ–∫–µ—Ä–∞."""
        user_id = callback.from_user.id
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        await event_bus.publish(Event(
            type="gas_tracker.get_current_price",
            data={"user_id": user_id},
            source_module="telegram"
        ))
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–ª–µ—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await event_bus.publish(Event(
            type="gas_tracker.get_user_alerts",
            data={"user_id": user_id},
            source_module="telegram"
        ))
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º loading
        text = (
            "‚õΩ <b>Gas Tracker</b>\n\n"
            "üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...\n\n"
            "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω –Ω–∞ –≥–∞–∑ Ethereum –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üìä –¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã", callback_data="gas_current")
        builder.button(text="üîî –ú–æ–∏ –∞–ª–µ—Ä—Ç—ã", callback_data="gas_alerts")
        builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç", callback_data="gas_add_alert")
        builder.button(text="üìà –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω", callback_data="gas_chart")
        builder.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="gas_statistics")
        builder.button(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="gas_settings")
        builder.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="gas_refresh")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
        builder.adjust(2, 2, 2, 1, 1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self._response_cache[user_id] = {
            "type": "main_menu",
            "message": callback.message
        }
    
    async def show_current_gas(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑ —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω –Ω–∞ –≥–∞–∑."""
        user_id = callback.from_user.id
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã
        await event_bus.publish(Event(
            type="gas_tracker.get_current_price",
            data={"user_id": user_id},
            source_module="telegram"
        ))
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º loading
        loading_text = "üìä <b>–¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –Ω–∞ –≥–∞–∑</b>\n\nüîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ..."
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="gas_current")
        builder.button(text="üìà –ò—Å—Ç–æ—Ä–∏—è", callback_data="gas_chart")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="gas_tracker")
        builder.adjust(2, 1)
        
        await callback.message.edit_text(loading_text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        self._response_cache[user_id] = {
            "type": "current_price",
            "message": callback.message
        }
    
    async def show_user_alerts(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑ –∞–ª–µ—Ä—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        user_id = callback.from_user.id
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–ª–µ—Ä—Ç—ã
        await event_bus.publish(Event(
            type="gas_tracker.get_user_alerts",
            data={"user_id": user_id},
            source_module="telegram"
        ))
        
        loading_text = "üîî <b>–ú–æ–∏ –≥–∞–∑ –∞–ª–µ—Ä—Ç—ã</b>\n\nüîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞—à–∏ –∞–ª–µ—Ä—Ç—ã..."
        
        builder = InlineKeyboardBuilder()
        builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç", callback_data="gas_add_alert")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="gas_tracker")
        builder.adjust(1)
        
        await callback.message.edit_text(loading_text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        self._response_cache[user_id] = {
            "type": "user_alerts",
            "message": callback.message
        }
    
    async def start_add_alert(self, callback: types.CallbackQuery, state: FSMContext):
        """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞."""
        await state.set_state(GasStates.waiting_threshold)
        
        text = (
            "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–∞–∑ –∞–ª–µ—Ä—Ç–∞</b>\n\n"
            
            "üí∞ <b>–®–∞–≥ 1/3:</b> –ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\n\n"
            
            "–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ gwei:\n"
            "‚Ä¢ –ú–∏–Ω–∏–º—É–º: 1 gwei\n"
            "‚Ä¢ –ú–∞–∫—Å–∏–º—É–º: 1000 gwei\n"
            "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ: 15-50 gwei\n\n"
            
            "üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
            "‚Ä¢ 15 - –¥–ª—è –¥–µ—à–µ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n"
            "‚Ä¢ 30 - –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π\n"
            "‚Ä¢ 50 - –¥–ª—è —Å—Ä–æ—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"
        )
        
        builder = InlineKeyboardBuilder()
        # –ë—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏
        builder.button(text="15 gwei", callback_data="gas_quick_15")
        builder.button(text="20 gwei", callback_data="gas_quick_20")
        builder.button(text="30 gwei", callback_data="gas_quick_30")
        builder.button(text="50 gwei", callback_data="gas_quick_50")
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="gas_tracker")
        builder.adjust(2, 2, 1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
    
    async def process_threshold(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ä–æ–≥–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è."""
        try:
            threshold = float(message.text.strip())
            
            if threshold <= 0 or threshold > 1000:
                await message.answer(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 1000 gwei:"
                )
                return
            
            await state.update_data(threshold=threshold)
            await state.set_state(GasStates.waiting_alert_type)
            
            text = (
                f"‚úÖ –ü–æ—Ä–æ–≥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: <b>{threshold:.1f} gwei</b>\n\n"
                
                "üéØ <b>–®–∞–≥ 2/3:</b> –¢–∏–ø –∞–ª–µ—Ä—Ç–∞\n\n"
                
                "–ö–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ?"
            )
            
            builder = InlineKeyboardBuilder()
            builder.button(text="‚¨áÔ∏è –ö–æ–≥–¥–∞ —Ü–µ–Ω–∞ –£–ü–ê–î–ï–¢ –Ω–∏–∂–µ", callback_data="gas_type_below")
            builder.button(text="‚¨ÜÔ∏è –ö–æ–≥–¥–∞ —Ü–µ–Ω–∞ –ü–û–î–ù–ò–ú–ï–¢–°–Ø –≤—ã—à–µ", callback_data="gas_type_above")
            builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="gas_tracker")
            builder.adjust(1)
            
            await message.answer(text, reply_markup=builder.as_markup(), parse_mode="HTML")
            
        except ValueError:
            await message.answer(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!\n\n"
                "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.5):"
            )
    
    async def process_alert_type(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞ –∞–ª–µ—Ä—Ç–∞."""
        alert_type = callback.data.split("_")[-1]  # below –∏–ª–∏ above
        data = await state.get_data()
        threshold = data.get("threshold")
        
        await state.update_data(alert_type=alert_type)
        await state.set_state(GasStates.waiting_cooldown)
        
        direction = "—É–ø–∞–¥–µ—Ç –Ω–∏–∂–µ" if alert_type == "below" else "–ø–æ–¥–Ω–∏–º–µ—Ç—Å—è –≤—ã—à–µ"
        
        text = (
            f"‚úÖ –¢–∏–ø –∞–ª–µ—Ä—Ç–∞: –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ <b>{direction}</b> {threshold:.1f} gwei\n\n"
            
            "‚è∞ <b>–®–∞–≥ 3/3:</b> –ò–Ω—Ç–µ—Ä–≤–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n"
            
            "–ö–∞–∫ —á–∞—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è?\n"
            "(–µ—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è)"
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üöÄ –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É", callback_data="gas_cooldown_1")
        builder.button(text="‚ö° –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç", callback_data="gas_cooldown_5")
        builder.button(text="üîî –ö–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç", callback_data="gas_cooldown_15")
        builder.button(text="üì± –ö–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç", callback_data="gas_cooldown_30")
        builder.button(text="üí§ –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑", callback_data="gas_cooldown_once")
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="gas_tracker")
        builder.adjust(2, 2, 1, 1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
    
    async def process_cooldown(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
        if callback.data.startswith("gas_cooldown_"):
            cooldown_str = callback.data.split("_")[-1]
            
            if cooldown_str == "once":
                cooldown_minutes = 999999  # –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å
                cooldown_text = "—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑"
            else:
                cooldown_minutes = int(cooldown_str)
                cooldown_text = f"–∫–∞–∂–¥—ã–µ {cooldown_minutes} –º–∏–Ω"
        else:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        data = await state.get_data()
        threshold = data.get("threshold")
        alert_type = data.get("alert_type")
        
        # –°–æ–∑–¥–∞–µ–º –∞–ª–µ—Ä—Ç —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        await event_bus.publish(Event(
            type="gas_tracker.add_alert",
            data={
                "user_id": callback.from_user.id,
                "threshold_gwei": threshold,
                "alert_type": alert_type,
                "cooldown_minutes": cooldown_minutes
            },
            source_module="telegram"
        ))
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        direction = "—É–ø–∞–¥–µ—Ç –Ω–∏–∂–µ" if alert_type == "below" else "–ø–æ–¥–Ω–∏–º–µ—Ç—Å—è –≤—ã—à–µ"
        
        text = (
            "‚úÖ <b>–ê–ª–µ—Ä—Ç —Å–æ–∑–¥–∞–µ—Ç—Å—è...</b>\n\n"
            
            f"üéØ <b>–£—Å–ª–æ–≤–∏–µ:</b> –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ {direction} {threshold:.1f} gwei\n"
            f"‚è∞ <b>–ü–æ–≤—Ç–æ—Ä:</b> {cooldown_text}\n\n"
            
            "üîî –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ —Ç–æ–ª—å–∫–æ —É—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è!"
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üìä –¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã", callback_data="gas_current")
        builder.button(text="üîî –ú–æ–∏ –∞–ª–µ—Ä—Ç—ã", callback_data="gas_alerts")
        builder.button(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="gas_tracker")
        builder.adjust(2, 1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
        
        await state.clear()
    
    async def show_price_chart(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑ –≥—Ä–∞—Ñ–∏–∫–∞ —Ü–µ–Ω."""
        user_id = callback.from_user.id
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω
        await event_bus.publish(Event(
            type="gas_tracker.get_price_history",
            data={"user_id": user_id, "hours": 24},
            source_module="telegram"
        ))
        
        text = "üìà <b>–ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω –Ω–∞ –≥–∞–∑</b>\n\nüîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞..."
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üìä 1 —á–∞—Å", callback_data="gas_history_1")
        builder.button(text="üìà 6 —á–∞—Å–æ–≤", callback_data="gas_history_6")
        builder.button(text="üìâ 24 —á–∞—Å–∞", callback_data="gas_history_24")
        builder.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="gas_chart")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="gas_tracker")
        builder.adjust(3, 1, 1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        self._response_cache[user_id] = {
            "type": "price_chart",
            "message": callback.message
        }
    
    async def show_history(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."""
        hours = int(callback.data.split("_")[-1])
        user_id = callback.from_user.id
        
        await event_bus.publish(Event(
            type="gas_tracker.get_price_history",
            data={"user_id": user_id, "hours": hours},
            source_module="telegram"
        ))
        
        await callback.answer(f"üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ {hours}—á")
    
    async def show_statistics(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥–∞–∑–∞."""
        user_id = callback.from_user.id
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        await event_bus.publish(Event(
            type="gas_tracker.get_current_price",
            data={"user_id": user_id},
            source_module="telegram"
        ))
        
        text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–∞–∑–∞</b>\n\nüîÑ –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É..."
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="gas_statistics")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="gas_tracker")
        builder.adjust(1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        self._response_cache[user_id] = {
            "type": "statistics",
            "message": callback.message
        }
    
    async def show_gas_settings(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≥–∞–∑ —Ç—Ä–µ–∫–µ—Ä–∞."""
        user_id = callback.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        settings_key = f"gas_settings:{user_id}"
        user_settings = await self.cache.get(settings_key, {
            'notifications_enabled': True,
            'default_cooldown': 5,
            'sound_alerts': True,
            'telegram_notifications': True
        })
        
        text = (
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Gas Tracker</b>\n\n"
            
            f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'üü¢ –í–∫–ª—é—á–µ–Ω—ã' if user_settings.get('notifications_enabled') else 'üî¥ –û—Ç–∫–ª—é—á–µ–Ω—ã'}\n"
            f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {user_settings.get('default_cooldown', 5)} –º–∏–Ω\n"
            f"üîä –ó–≤—É–∫–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã: {'üü¢ –í–∫–ª' if user_settings.get('sound_alerts') else 'üî¥ –í—ã–∫–ª'}\n"
            f"üì± Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'üü¢ –í–∫–ª' if user_settings.get('telegram_notifications') else 'üî¥ –í—ã–∫–ª'}\n\n"
            
            "üéõÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:"
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(
            text=f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'–í–∫–ª' if user_settings.get('notifications_enabled') else '–í—ã–∫–ª'}",
            callback_data="gas_settings_notifications"
        )
        builder.button(text="‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", callback_data="gas_settings_cooldown")
        builder.button(text="üîä –ó–≤—É–∫", callback_data="gas_settings_sound")
        builder.button(text="üì± Telegram", callback_data="gas_settings_telegram")
        builder.button(text="üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="gas_settings_reset")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="gas_tracker")
        builder.adjust(1, 1, 2, 1, 1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await callback.answer()
    
    async def refresh_data(self, callback: types.CallbackQuery):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö."""
        await callback.answer("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ...")
        await self.show_gas_menu(callback)
    
    async def toggle_alert(self, callback: types.CallbackQuery):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–ª–µ—Ä—Ç–∞."""
        alert_id = int(callback.data.split("_")[-1])
        user_id = callback.from_user.id
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        await callback.answer("üîÑ –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–ª–µ—Ä—Ç–∞...")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–ª–µ—Ä—Ç–æ–≤
        await self.show_user_alerts(callback)
    
    async def delete_alert(self, callback: types.CallbackQuery):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞."""
        alert_id = int(callback.data.split("_")[-1])
        user_id = callback.from_user.id
        
        # –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        await event_bus.publish(Event(
            type="gas_tracker.remove_alert",
            data={
                "user_id": user_id,
                "alert_id": alert_id
            },
            source_module="telegram"
        ))
        
        await callback.answer("üóëÔ∏è –£–¥–∞–ª—è–µ–º –∞–ª–µ—Ä—Ç...")
    
    async def toggle_notifications(self, callback: types.CallbackQuery):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
        user_id = callback.from_user.id
        settings_key = f"gas_settings:{user_id}"
        
        settings = await self.cache.get(settings_key, {})
        current_state = settings.get('notifications_enabled', True)
        new_state = not current_state
        
        settings['notifications_enabled'] = new_state
        await self.cache.set(settings_key, settings, ttl=86400)
        
        status = "–≤–∫–ª—é—á–µ–Ω—ã" if new_state else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
        await callback.answer(f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        await self.show_gas_settings(callback)
    
    # EVENT RESPONSE HANDLERS
    
    async def _handle_price_response(self, event: Event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å —Ü–µ–Ω–∞–º–∏ –Ω–∞ –≥–∞–∑."""
        user_id = event.data.get("user_id")
        gas_price = event.data.get("gas_price")
        statistics = event.data.get("statistics", {})
        
        if user_id not in self._response_cache:
            return
        
        context = self._response_cache[user_id]
        message = context["message"]
        
        if context["type"] == "current_price":
            await self._update_current_price_display(message, gas_price, statistics)
        elif context["type"] == "main_menu":
            await self._update_main_menu_display(message, gas_price, statistics, user_id)
        elif context["type"] == "statistics":
            await self._update_statistics_display(message, gas_price, statistics)
        
        # –û—á–∏—â–∞–µ–º –∫–µ—à
        if user_id in self._response_cache:
            del self._response_cache[user_id]
    
    async def _update_current_price_display(self, message: types.Message, gas_price: Dict, statistics: Dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω."""
        if not gas_price:
            text = (
                "üìä <b>–¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –Ω–∞ –≥–∞–∑</b>\n\n"
                "‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∂–µ"
            )
        else:
            updated_time = datetime.fromisoformat(gas_price['timestamp']).strftime('%H:%M:%S')
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            standard_price = gas_price['standard']
            if standard_price <= 15:
                recommendation = "üü¢ –û—Ç–ª–∏—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π!"
            elif standard_price <= 30:
                recommendation = "üü° –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞"
            elif standard_price <= 50:
                recommendation = "üü† –í—ã—Å–æ–∫–∞—è —Ü–µ–Ω–∞"
            else:
                recommendation = "üî¥ –û—á–µ–Ω—å –¥–æ—Ä–æ–≥–æ!"
            
            text = (
                f"üìä <b>–¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –Ω–∞ –≥–∞–∑</b>\n\n"
                
                f"üí∞ <b>–£—Ä–æ–≤–Ω–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏:</b>\n"
                f"üêå –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π: <b>{gas_price['safe']:.1f}</b> gwei\n"
                f"üö∂ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π: <b>{gas_price['standard']:.1f}</b> gwei\n"
                f"üèÉ –ë—ã—Å—Ç—Ä—ã–π: <b>{gas_price['fast']:.1f}</b> gwei\n"
                f"üöÄ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π: <b>{gas_price['instant']:.1f}</b> gwei\n\n"
                
                f"üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> {recommendation}\n\n"
            )
            
            if statistics:
                text += (
                    f"üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                    f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∑–∞ —á–∞—Å: {statistics.get('avg_1h', 0):.1f} gwei\n"
                    f"‚Ä¢ –ú–∏–Ω–∏–º—É–º –∑–∞ —á–∞—Å: {statistics.get('min_1h', 0):.1f} gwei\n"
                    f"‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –∑–∞ —á–∞—Å: {statistics.get('max_1h', 0):.1f} gwei\n"
                    f"‚Ä¢ –¢—Ä–µ–Ω–¥: {statistics.get('trend', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
                )
            
            text += f"üïê <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {updated_time}"
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="gas_current")
        builder.button(text="üìà –ò—Å—Ç–æ—Ä–∏—è", callback_data="gas_chart")
        builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç", callback_data="gas_add_alert")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="gas_tracker")
        builder.adjust(2, 1, 1)
        
        try:
            await message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        except Exception as e:
            logger.error(f"Error updating current price display: {e}")
    
    async def _update_main_menu_display(self, message: types.Message, gas_price: Dict, statistics: Dict, user_id: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
        text = "‚õΩ <b>Gas Tracker</b>\n\n"
        
        if gas_price:
            text += (
                f"üí∞ <b>–¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã:</b>\n"
                f"üü¢ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π: {gas_price['safe']:.1f} gwei\n"
                f"üü° –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π: {gas_price['standard']:.1f} gwei\n"
                f"üü† –ë—ã—Å—Ç—Ä—ã–π: {gas_price['fast']:.1f} gwei\n"
                f"üî¥ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π: {gas_price['instant']:.1f} gwei\n\n"
            )
        else:
            text += "‚ùå –î–∞–Ω–Ω—ã–µ –æ –≥–∞–∑–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n\n"
        
        if statistics:
            text += (
                f"üîî <b>–í–∞—à–∏ –∞–ª–µ—Ä—Ç—ã:</b>\n"
                f"‚Ä¢ –í—Å–µ–≥–æ: {statistics.get('total_alerts', 0)}\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {statistics.get('active_alerts', 0)}\n\n"
            )
        
        text += "‚ö° –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üìä –¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã", callback_data="gas_current")
        builder.button(text="üîî –ú–æ–∏ –∞–ª–µ—Ä—Ç—ã", callback_data="gas_alerts")
        builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç", callback_data="gas_add_alert")
        builder.button(text="üìà –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω", callback_data="gas_chart")
        builder.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="gas_statistics")
        builder.button(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="gas_settings")
        builder.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="gas_refresh")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
        builder.adjust(2, 2, 2, 1, 1)
        
        try:
            await message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        except Exception as e:
            logger.error(f"Error updating main menu: {e}")
    
    async def _handle_alerts_response(self, event: Event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å –∞–ª–µ—Ä—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        user_id = event.data.get("user_id")
        alerts = event.data.get("alerts", [])
        
        if user_id not in self._response_cache:
            return
        
        context = self._response_cache[user_id]
        if context["type"] != "user_alerts":
            return
        
        message = context["message"]
        
        if not alerts:
            text = (
                "üîî <b>–ú–æ–∏ –≥–∞–∑ –∞–ª–µ—Ä—Ç—ã</b>\n\n"
                "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤\n\n"
                "üí° –°–æ–∑–¥–∞–π—Ç–µ –∞–ª–µ—Ä—Ç, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
                "–∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –Ω–∞ –≥–∞–∑ –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç –Ω—É–∂–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è!"
            )
            
            builder = InlineKeyboardBuilder()
            builder.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π –∞–ª–µ—Ä—Ç", callback_data="gas_add_alert")
            builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="gas_tracker")
            builder.adjust(1)
        else:
            text = f"üîî <b>–ú–æ–∏ –≥–∞–∑ –∞–ª–µ—Ä—Ç—ã ({len(alerts)})</b>\n\n"
            
            builder = InlineKeyboardBuilder()
            
            for i, alert in enumerate(alerts, 1):
                status = "üü¢" if alert['is_active'] else "üî¥"
                alert_type = "‚¨áÔ∏è" if alert['alert_type'] == 'below' else "‚¨ÜÔ∏è"
                
                text += (
                    f"{status} <b>–ê–ª–µ—Ä—Ç #{i}</b>\n"
                    f"   {alert_type} {alert['threshold_gwei']:.1f} gwei\n"
                    f"   üîî –°—Ä–∞–±–∞—Ç—ã–≤–∞–ª: {alert['times_triggered']} —Ä–∞–∑\n"
                )
                
                if alert['last_triggered']:
                    last_time = datetime.fromisoformat(alert['last_triggered'])
                    text += f"   üïê –ü–æ—Å–ª–µ–¥–Ω–∏–π: {last_time.strftime('%d.%m %H:%M')}\n"
                
                text += "\n"
                
                # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–º
                alert_id = alert['id']
                if alert['is_active']:
                    builder.button(text=f"‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å #{i}", callback_data=f"gas_toggle_{alert_id}")
                else:
                    builder.button(text=f"‚ñ∂Ô∏è –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å #{i}", callback_data=f"gas_toggle_{alert_id}")
                
                builder.button(text=f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å #{i}", callback_data=f"gas_delete_{alert_id}")
            
            builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç", callback_data="gas_add_alert")
            builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="gas_tracker")
            builder.adjust(2)  # –ü–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞–º–∏
        
        try:
            await message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        except Exception as e:
            logger.error(f"Error updating alerts display: {e}")
        
        # –û—á–∏—â–∞–µ–º –∫–µ—à
        if user_id in self._response_cache:
            del self._response_cache[user_id]
    
    async def _handle_alert_added(self, event: Event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞."""
        user_id = event.data.get("user_id")
        success = event.data.get("success")
        threshold = event.data.get("threshold")
        alert_type = event.data.get("alert_type")
        
        if success:
            direction = "—É–ø–∞–¥–µ—Ç –Ω–∏–∂–µ" if alert_type == "below" else "–ø–æ–¥–Ω–∏–º–µ—Ç—Å—è –≤—ã—à–µ"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
            try:
                await event_bus.publish(Event(
                    type="telegram.send_message",
                    data={
                        "user_id": user_id,
                        "message": (
                            f"‚úÖ <b>–ê–ª–µ—Ä—Ç —Å–æ–∑–¥–∞–Ω!</b>\n\n"
                            f"üéØ –£—Å–ª–æ–≤–∏–µ: –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ {direction} {threshold:.1f} gwei\n"
                            f"üîî –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏"
                        ),
                        "parse_mode": "HTML"
                    },
                    source_module="gas_tracker"
                ))
            except Exception as e:
                logger.error(f"Error sending alert creation notification: {e}")
        else:
            try:
                await event_bus.publish(Event(
                    type="telegram.send_message",
                    data={
                        "user_id": user_id,
                        "message": (
                            "‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–∞</b>\n\n"
                            "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                            "‚Ä¢ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∞–ª–µ—Ä—Ç–æ–≤ (10)\n"
                            "‚Ä¢ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n"
                            "‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞"
                        ),
                        "parse_mode": "HTML"
                    },
                    source_module="gas_tracker"
                ))
            except Exception as e:
                logger.error(f"Error sending alert creation error: {e}")
    
    async def _handle_alert_removed(self, event: Event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞."""
        user_id = event.data.get("user_id")
        success = event.data.get("success")
        alert_id = event.data.get("alert_id")
        
        if success:
            try:
                await event_bus.publish(Event(
                    type="telegram.send_message",
                    data={
                        "user_id": user_id,
                        "message": f"üóëÔ∏è –ê–ª–µ—Ä—Ç #{alert_id} —É–¥–∞–ª–µ–Ω",
                        "parse_mode": "HTML"
                    },
                    source_module="gas_tracker"
                ))
            except Exception as e:
                logger.error(f"Error sending alert removal notification: {e}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–ª–µ—Ä—Ç–æ–≤ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–º–æ—Ç—Ä–∏—Ç –∏—Ö
        if user_id in self._response_cache and self._response_cache[user_id]["type"] == "user_alerts":
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
            await event_bus.publish(Event(
                type="gas_tracker.get_user_alerts",
                data={"user_id": user_id},
                source_module="telegram"
            ))
    
    async def _handle_history_response(self, event: Event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Ü–µ–Ω."""
        user_id = event.data.get("user_id")
        history = event.data.get("history", [])
        hours = event.data.get("hours", 24)
        
        if user_id not in self._response_cache:
            return
        
        context = self._response_cache[user_id]
        if context["type"] != "price_chart":
            return
        
        message = context["message"]
        
        if not history:
            text = (
                f"üìà <b>–ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω –Ω–∞ –≥–∞–∑ ({hours}—á)</b>\n\n"
                "‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n"
                "–ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω –ø–æ–∫–∞ –Ω–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∞"
            )
        else:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            prices = [entry['standard'] for entry in history]
            
            if prices:
                min_price = min(prices)
                max_price = max(prices)
                avg_price = sum(prices) / len(prices)
                current_price = prices[-1] if prices else 0
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–Ω–¥
                if len(prices) > 1:
                    trend_start = sum(prices[:len(prices)//4]) / max(1, len(prices)//4)
                    trend_end = sum(prices[-len(prices)//4:]) / max(1, len(prices)//4)
                    
                    if trend_end > trend_start * 1.05:
                        trend = "üìà –†–∞—Å—Ç–µ—Ç"
                        trend_icon = "‚¨ÜÔ∏è"
                    elif trend_end < trend_start * 0.95:
                        trend = "üìâ –ü–∞–¥–∞–µ—Ç"
                        trend_icon = "‚¨áÔ∏è"
                    else:
                        trend = "‚û°Ô∏è –°—Ç–∞–±–∏–ª—å–Ω–æ"
                        trend_icon = "üîÑ"
                else:
                    trend = "‚û°Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö"
                    trend_icon = "‚ùì"
                
                text = (
                    f"üìà <b>–ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω –Ω–∞ –≥–∞–∑ ({hours}—á)</b>\n\n"
                    
                    f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–∏–æ–¥–∞:</b>\n"
                    f"‚Ä¢ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: <b>{current_price:.1f}</b> gwei\n"
                    f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: <b>{avg_price:.1f}</b> gwei\n"
                    f"‚Ä¢ –ú–∏–Ω–∏–º—É–º: <b>{min_price:.1f}</b> gwei\n"
                    f"‚Ä¢ –ú–∞–∫—Å–∏–º—É–º: <b>{max_price:.1f}</b> gwei\n"
                    f"‚Ä¢ –†–∞–∑–±—Ä–æ—Å: <b>{max_price - min_price:.1f}</b> gwei\n\n"
                    
                    f"{trend_icon} <b>–¢—Ä–µ–Ω–¥:</b> {trend}\n\n"
                    
                    f"üìù <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
                )
                
                if current_price <= min_price * 1.1:
                    text += "üü¢ –°–µ–π—á–∞—Å —Ö–æ—Ä–æ—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π!\n"
                elif current_price >= max_price * 0.9:
                    text += "üî¥ –°–µ–π—á–∞—Å –≥–∞–∑ –¥–æ—Ä–æ–≥–æ–π, –ª—É—á—à–µ –ø–æ–¥–æ–∂–¥–∞—Ç—å\n"
                else:
                    text += "üü° –¶–µ–Ω–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã\n"
                
                if trend_icon == "‚¨áÔ∏è":
                    text += "üí° –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –ø–æ–¥–æ–∂–¥–∞—Ç—å –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ"
                elif trend_icon == "‚¨ÜÔ∏è":
                    text += "‚ö° –õ—É—á—à–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å–µ–π—á–∞—Å"
                
                text += f"\n\nüìâ –î–∞–Ω–Ω—ã—Ö –≤ –∏—Å—Ç–æ—Ä–∏–∏: {len(history)} —Ç–æ—á–µ–∫"
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üìä 1 —á–∞—Å", callback_data="gas_history_1")
        builder.button(text="üìà 6 —á–∞—Å–æ–≤", callback_data="gas_history_6")
        builder.button(text="üìâ 24 —á–∞—Å–∞", callback_data="gas_history_24")
        builder.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="gas_chart")
        builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç", callback_data="gas_add_alert")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="gas_tracker")
        builder.adjust(3, 1, 1, 1)
        
        try:
            await message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        except Exception as e:
            logger.error(f"Error updating history display: {e}")
        
        # –û—á–∏—â–∞–µ–º –∫–µ—à
        if user_id in self._response_cache:
            del self._response_cache[user_id]
    
    async def _update_statistics_display(self, message: types.Message, gas_price: Dict, statistics: Dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        if not gas_price or not statistics:
            text = (
                "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–∞–∑–∞</b>\n\n"
                "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
            )
        else:
            current_price = gas_price['standard']
            
            text = (
                f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–∞–∑–∞</b>\n\n"
                
                f"üí∞ <b>–¢–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n"
                f"‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ü–µ–Ω–∞: <b>{current_price:.1f}</b> gwei\n"
                f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∑–∞ —á–∞—Å: <b>{statistics.get('avg_1h', 0):.1f}</b> gwei\n"
                f"‚Ä¢ –ú–∏–Ω–∏–º—É–º –∑–∞ —á–∞—Å: <b>{statistics.get('min_1h', 0):.1f}</b> gwei\n"
                f"‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –∑–∞ —á–∞—Å: <b>{statistics.get('max_1h', 0):.1f}</b> gwei\n\n"
                
                f"üìà <b>–¢—Ä–µ–Ω–¥:</b> {statistics.get('trend', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
                
                f"üîî <b>–í–∞—à–∏ –∞–ª–µ—Ä—Ç—ã:</b>\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: {statistics.get('total_alerts', 0)}\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {statistics.get('active_alerts', 0)}\n\n"
                
                f"üìä <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ü–µ–Ω–µ:</b>\n"
            )
            
            if current_price <= 15:
                text += "üü¢ –û—Ç–ª–∏—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ª—é–±—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n"
            elif current_price <= 30:
                text += "üü° –ü–æ–¥—Ö–æ–¥—è—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π\n"
            elif current_price <= 50:
                text += "üü† –í—ã—Å–æ–∫–∞—è —Ü–µ–Ω–∞, —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ—Ç—Å—Ä–æ—á–∫—É\n"
            else:
                text += "üî¥ –û—á–µ–Ω—å –¥–æ—Ä–æ–≥–æ! –õ—É—á—à–µ –ø–æ–¥–æ–∂–¥–∞—Ç—å\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ volatility –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
            min_price = statistics.get('min_1h', 0)
            max_price = statistics.get('max_1h', 0)
            if min_price and max_price:
                volatility = ((max_price - min_price) / min_price) * 100
                text += f"\nüìä <b>–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞ —á–∞—Å:</b> {volatility:.1f}%"
                
                if volatility > 20:
                    text += " (–≤—ã—Å–æ–∫–∞—è)"
                elif volatility > 10:
                    text += " (—Å—Ä–µ–¥–Ω—è—è)"
                else:
                    text += " (–Ω–∏–∑–∫–∞—è)"
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üìà –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω", callback_data="gas_chart")
        builder.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="gas_statistics")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="gas_tracker")
        builder.adjust(2, 1)
        
        try:
            await message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        except Exception as e:
            logger.error(f"Error updating statistics display: {e}")
    
    # QUICK THRESHOLD HANDLERS (–¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤)
    
    async def handle_quick_threshold(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä—ã—Ö –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –ø–æ—Ä–æ–≥–∞."""
        if callback.data.startswith("gas_quick_"):
            threshold = float(callback.data.split("_")[-1])
            
            await state.update_data(threshold=threshold)
            await state.set_state(GasStates.waiting_alert_type)
            
            text = (
                f"‚úÖ –ü–æ—Ä–æ–≥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: <b>{threshold:.1f} gwei</b>\n\n"
                
                "üéØ <b>–®–∞–≥ 2/3:</b> –¢–∏–ø –∞–ª–µ—Ä—Ç–∞\n\n"
                
                "–ö–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ?"
            )
            
            builder = InlineKeyboardBuilder()
            builder.button(text="‚¨áÔ∏è –ö–æ–≥–¥–∞ —Ü–µ–Ω–∞ –£–ü–ê–î–ï–¢ –Ω–∏–∂–µ", callback_data="gas_type_below")
            builder.button(text="‚¨ÜÔ∏è –ö–æ–≥–¥–∞ —Ü–µ–Ω–∞ –ü–û–î–ù–ò–ú–ï–¢–°–Ø –≤—ã—à–µ", callback_data="gas_type_above")
            builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="gas_tracker")
            builder.adjust(1)
            
            await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
            await callback.answer()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —ç—Ç–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–æ–∂–µ
        self.router.callback_query(F.data.startswith("gas_quick_"))(self.handle_quick_threshold)
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
        return {
            "active_responses": len(self._response_cache),
            "registered_handlers": "gas_handlers_module",
            "service_connected": self.gas_service is not None
        }# modules/gas_tracker/handlers/gas_handlers.py
"""–ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—á–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –≥–∞–∑ —Ç—Ä–µ–∫–µ—Ä–∞."""

from aiogram import types, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime
from typing import Dict, Any, List

from shared.events import event_bus, Event, USER_COMMAND_RECEIVED
from shared.cache.memory_cache import cache_manager

import logging

logger = logging.getLogger(__name__)


class GasStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–∞–∑ –∞–ª–µ—Ä—Ç–æ–≤."""
    waiting_threshold = State()
    waiting_alert_type = State()
    waiting_cooldown = State()
    editing_alert = State()


class GasHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –≥–∞–∑ —Ç—Ä–µ–∫–µ—Ä–∞ —Å –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é."""
    
    def __init__(self, gas_service=None):
        self.gas_service = gas_service
        self.router = Router()
        self.cache = cache_manager.get_cache('gas_handlers')
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ—Ç–≤–µ—Ç—ã –æ—Ç —Å–µ—Ä–≤–∏—Å–∞
        event_bus.subscribe("gas_tracker.current_price_response", self._handle_price_response)
        event_bus.subscribe("gas_tracker.user_alerts_response", self._handle_alerts_response)
        event_bus.subscribe("gas_tracker.alert_added", self._handle_alert_added)
        event_bus.subscribe("gas_tracker.alert_removed", self._handle_alert_removed)
        event_bus.subscribe("gas_tracker.price_history_response", self._handle_history_response)
        
        # –ö–µ—à –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤
        self._response_cache = {}
    
    def register_handlers(self, dp):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.router.callback_query(F.data == "gas_tracker")(self.show_gas_menu)
        self.router.callback_query(F.data == "gas_current")(self.show_current_gas)
        self.router.callback_query(F.data == "gas_alerts")(self.show_user_alerts)
        self.router.callback_query(F.data == "gas_add_alert")(self.start_add_alert)
        self.router.callback_query(F.data == "gas_chart")(self.show_price_chart)
        self.router.callback_query(F.data == "gas_settings")(self.show_gas_settings)
        
        # –°–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–∞
        self.router.message(GasStates.waiting_threshold)(self.process_threshold)
        self.router.callback_query(F.data.startswith("gas_type_"))(self.process_alert_type)
        self.router.message(GasStates.waiting_cooldown)(self.process_cooldown)
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞–º–∏
        self.router.callback_query(F.data.startswith("gas_toggle_"))(self.toggle_alert)
        self.router.callback_query(F.data.startswith("gas_delete_"))(self.delete_alert)
        self.router.callback_query(F.data.startswith("gas_edit_"))(self.edit_alert)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        self.router.callback_query(F.data == "gas_statistics")(self.show_statistics)
        self.router.callback_query(F.data == "gas_refresh")(self.refresh_data)
        self.router.callback_query(F.data.startswith("gas_history_"))(self.show_history)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.router.callback_query(F.data == "gas_settings_notifications")(self.toggle_notifications)