# modules/gas_tracker/handlers/gas_handlers.py
"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –≥–∞–∑ —Ç—Ä–µ–∫–µ—Ä–∞."""

from aiogram import types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from shared.events import event_bus, Event, USER_COMMAND_RECEIVED


class GasStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–∞–∑ –∞–ª–µ—Ä—Ç–æ–≤."""
    waiting_threshold = State()
    waiting_alert_type = State()


class GasHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –≥–∞–∑ —Ç—Ä–µ–∫–µ—Ä–∞."""
    
    def __init__(self, gas_service):
        self.gas_service = gas_service
    
    async def show_gas_menu(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑ –º–µ–Ω—é –≥–∞–∑ —Ç—Ä–µ–∫–µ—Ä–∞."""
        current_gas = self.gas_service.get_current_gas_price()
        user_alerts = self.gas_service.get_user_alerts(callback.from_user.id)
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üìä –¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã", callback_data="gas_current")
        builder.button(text="üîî –ú–æ–∏ –∞–ª–µ—Ä—Ç—ã", callback_data="gas_alerts")
        builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç", callback_data="gas_add_alert")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
        builder.adjust(1)
        
        text = "‚õΩ –ì–∞–∑ –¢—Ä–µ–∫–µ—Ä\n\n"
        
        if current_gas:
            text += (
                f"–¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã:\n"
                f"üü¢ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π: {current_gas['safe']:.1f} gwei\n"
                f"üü° –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π: {current_gas['standard']:.1f} gwei\n"
                f"üü† –ë—ã—Å—Ç—Ä—ã–π: {current_gas['fast']:.1f} gwei\n"
                f"üî¥ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π: {current_gas['instant']:.1f} gwei\n\n"
            )
        else:
            text += "‚ùå –î–∞–Ω–Ω—ã–µ –æ –≥–∞–∑–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n\n"
        
        text += f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤: {len([a for a in user_alerts if a['is_active']])}"
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup())
        await callback.answer()
    
    async def show_current_gas(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑ —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω –Ω–∞ –≥–∞–∑."""
        current_gas = self.gas_service.get_current_gas_price()
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="gas_current")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="gas_menu")
        builder.adjust(1)
        
        if current_gas:
            from datetime import datetime
            updated = datetime.fromisoformat(current_gas['timestamp'])
            
            text = (
                f"‚õΩ –¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –Ω–∞ –≥–∞–∑\n\n"
                f"üü¢ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π: {current_gas['safe']:.1f} gwei\n"
                f"üü° –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π: {current_gas['standard']:.1f} gwei\n"
                f"üü† –ë—ã—Å—Ç—Ä—ã–π: {current_gas['fast']:.1f} gwei\n"
                f"üî¥ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π: {current_gas['instant']:.1f} gwei\n\n"
                f"üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated.strftime('%H:%M:%S')}"
            )
        else:
            text = "‚ùå –î–∞–Ω–Ω—ã–µ –æ –≥–∞–∑–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup())
        await callback.answer()
    
    async def add_gas_alert_start(self, callback: types.CallbackQuery, state: FSMContext):
        """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥–∞–∑ –∞–ª–µ—Ä—Ç–∞."""
        await state.set_state(GasStates.waiting_threshold)
        
        builder = InlineKeyboardBuilder()
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="gas_menu")
        
        await callback.message.edit_text(
            "üîî –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–∞–∑ –∞–ª–µ—Ä—Ç–∞\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ gwei (1-500):\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 20",
            reply_markup=builder.as_markup()
        )
        await callback.answer()
    
    async def process_gas_threshold(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ä–æ–≥–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è."""
        try:
            threshold = float(message.text.strip())
            
            if threshold <= 0 or threshold > 500:
                await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 1 –¥–æ 500 gwei")
                return
            
            await state.update_data(threshold=threshold)
            await state.set_state(GasStates.waiting_alert_type)
            
            builder = InlineKeyboardBuilder()
            builder.button(text="‚¨áÔ∏è –ù–∏–∂–µ –ø–æ—Ä–æ–≥–∞", callback_data="gas_type_below")
            builder.button(text="‚¨ÜÔ∏è –í—ã—à–µ –ø–æ—Ä–æ–≥–∞", callback_data="gas_type_above")
            builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="gas_menu")
            builder.adjust(1)
            
            await message.answer(
                f"–ü–æ—Ä–æ–≥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {threshold:.1f} gwei\n\n"
                "–ö–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∞–ª–µ—Ä—Ç?",
                reply_markup=builder.as_markup()
            )
            
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
    
    async def process_alert_type(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞ –∞–ª–µ—Ä—Ç–∞."""
        alert_type = callback.data.split("_")[-1]  # below –∏–ª–∏ above
        data = await state.get_data()
        threshold = data.get("threshold")
        
        success = await self.gas_service.add_user_alert(
            callback.from_user.id,
            threshold,
            alert_type
        )
        
        if success:
            direction = "–Ω–∏–∂–µ" if alert_type == "below" else "–≤—ã—à–µ"
            text = f"‚úÖ –ê–ª–µ—Ä—Ç –¥–æ–±–∞–≤–ª–µ–Ω!\n–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ —Ü–µ–Ω–µ {direction} {threshold:.1f} gwei"
        else:
            text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–ª–µ—Ä—Ç–∞"
        
        await state.clear()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –≥–∞–∑–∞
        await self.show_gas_menu(callback)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await callback.message.answer(text)
