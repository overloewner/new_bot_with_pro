# shared/database/manager.py
"""–£–ª—É—á—à–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã."""

import asyncio
from contextlib import asynccontextmanager
from typing import AsyncGenerator, Dict, Any
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession, async_sessionmaker
from sqlalchemy.exc import SQLAlchemyError
from sqlalchemy.pool import NullPool
from sqlalchemy import text  # –î–û–ë–ê–í–õ–ï–ù–û: –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ SQL
import logging

from .models import Base

logger = logging.getLogger(__name__)


class DatabaseManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –ø—É–ª–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π."""
    
    def __init__(self, database_url: str):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ë–î."""
        self.database_url = self._prepare_url(database_url)
        
        # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
        self.engine = create_async_engine(
            self.database_url,
            pool_size=20,           # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—É–ª –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
            max_overflow=30,        # –ë–æ–ª—å—à–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è –ø–∏–∫–æ–≤–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
            pool_pre_ping=True,     # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            pool_recycle=3600,      # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∫–∞–∂–¥—ã–π —á–∞—Å
            echo=False,             # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ True –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ SQL
            # –î–ª—è –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –≤–∞–∂–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—É–ª
            connect_args={
                "server_settings": {
                    "client_encoding": "utf8",
                    "application_name": "crypto_bot_modular"
                },
                "command_timeout": 60
            }
        )
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–±—Ä–∏–∫—É —Å–µ—Å—Å–∏–π
        self.async_session = async_sessionmaker(
            bind=self.engine,
            expire_on_commit=False,
            class_=AsyncSession
        )
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        self._connection_stats = {
            "total_connections": 0,
            "active_connections": 0,
            "failed_connections": 0
        }
    
    def _prepare_url(self, url: str) -> str:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ URL –¥–ª—è asyncpg."""
        clean_url = url.split('?')[0]
        
        if clean_url.startswith('postgresql://'):
            return clean_url.replace('postgresql://', 'postgresql+asyncpg://')
        elif clean_url.startswith('postgres://'):
            return clean_url.replace('postgres://', 'postgresql+asyncpg://')
        
        return clean_url
    
    async def initialize(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        try:
            async with self.engine.begin() as conn:
                await conn.run_sync(Base.metadata.create_all)
            logger.info("‚úÖ Database initialized successfully")
        except SQLAlchemyError as e:
            logger.error(f"‚ùå Failed to initialize database: {e}")
            raise
    
    @asynccontextmanager
    async def get_session(self) -> AsyncGenerator[AsyncSession, None]:
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ë–î."""
        session = self.async_session()
        self._connection_stats["active_connections"] += 1
        self._connection_stats["total_connections"] += 1
        
        try:
            yield session
        except SQLAlchemyError as e:
            await session.rollback()
            self._connection_stats["failed_connections"] += 1
            logger.error(f"Database session error: {e}")
            raise
        except Exception as e:
            await session.rollback()
            self._connection_stats["failed_connections"] += 1
            logger.error(f"Unexpected session error: {e}")
            raise
        finally:
            await session.close()
            self._connection_stats["active_connections"] -= 1
    
    async def health_check(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î."""
        try:
            async with self.get_session() as session:
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º text() –¥–ª—è SQL –∑–∞–ø—Ä–æ—Å–∞
                await session.execute(text("SELECT 1"))
                return True
        except Exception as e:
            logger.error(f"Database health check failed: {e}")
            return False
    
    async def close(self) -> None:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""
        try:
            await self.engine.dispose()
            logger.info("üìä Database connections closed")
        except Exception as e:
            logger.error(f"Error closing database connections: {e}")
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        pool = self.engine.pool
        return {
            "pool_size": pool.size(),
            "checked_in": pool.checkedin(),
            "checked_out": pool.checkedout(),
            "overflow": pool.overflow(),
            "invalid": pool.invalid(),
            "connection_stats": self._connection_stats.copy()
        }