# main.py
"""–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –≥–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫."""

import asyncio
import signal
import sys
import warnings
from typing import Dict, Any, List
import logging

# –ü–æ–¥–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
warnings.filterwarnings("ignore", category=DeprecationWarning)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)

# –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from config.settings import get_config
from shared.events import event_bus, Event
from shared.cache.memory_cache import cache_manager

# –ò–º–ø–æ—Ä—Ç —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
from modules.telegram.service import TelegramService
from modules.price_alerts.service import PriceAlertsService
from modules.gas_tracker.service import GasTrackerService
from modules.whales.service import LimitedWhaleService
from modules.wallet_tracker.service import LimitedWalletTrackerService

logger = logging.getLogger(__name__)


class FullyFunctionalCryptoBot:
    """–ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ü–û–õ–ù–û–°–¢–¨–Æ –†–ê–ë–û–ß–ò–ú–ò –∫–Ω–æ–ø–∫–∞–º–∏."""
    
    def __init__(self):
        self.config = get_config()
        self.running = False
        
        # –°–µ—Ä–≤–∏—Å—ã (–í–ê–ñ–ù–û: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ)
        self.telegram_service: TelegramService = None
        self.price_alerts_service: PriceAlertsService = None
        self.gas_tracker_service: GasTrackerService = None
        self.whale_service: LimitedWhaleService = None
        self.wallet_service: LimitedWalletTrackerService = None
        
        # –ó–∞–¥–∞—á–∏
        self.tasks: List[asyncio.Task] = []
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
        self._setup_signal_handlers()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—É—Å–∫–∞
        self._startup_stats = {
            "start_time": None,
            "modules_started": 0,
            "modules_failed": 0,
            "handlers_registered": 0
        }
    
    def _setup_signal_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤."""
        if sys.platform != 'win32':
            for sig in (signal.SIGTERM, signal.SIGINT):
                signal.signal(sig, self._signal_handler)
    
    def _signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤."""
        logger.info(f"Received signal {signum}")
        if self.running:
            asyncio.create_task(self.stop())
    
    async def initialize(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π."""
        import time
        self._startup_stats["start_time"] = time.time()
        
        logger.info("üöÄ Initializing Fully Functional Crypto Bot...")
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É
            await self._initialize_infrastructure()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –º–æ–¥—É–ª–∏
            await self._initialize_all_modules()
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Telegram —Å–µ—Ä–≤–∏—Å —Å –í–°–ï–ú–ò –º–æ–¥—É–ª—è–º–∏
            await self._setup_telegram_with_all_modules()
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–µ–∂–º–æ–¥—É–ª—å–Ω—ã–µ —Å–≤—è–∑–∏
            await self._setup_module_connections()
            
            startup_time = time.time() - self._startup_stats["start_time"]
            logger.info(f"‚úÖ All modules initialized in {startup_time:.2f}s")
            logger.info(f"üìä Stats: {self._startup_stats['modules_started']} started, {self._startup_stats['modules_failed']} failed")
            
        except Exception as e:
            logger.error(f"‚ùå Failed to initialize application: {e}")
            raise
    
    async def _initialize_infrastructure(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã."""
        logger.info("üèóÔ∏è Initializing infrastructure...")
        
        # Event Bus
        await event_bus.start()
        logger.info("‚úÖ Event Bus started")
        
        # Cache Manager
        await cache_manager.start_all()
        logger.info("‚úÖ Cache system started")
        
        # –ë–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
        logger.info("‚úÖ Infrastructure ready")
    
    async def _initialize_all_modules(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –í–°–ï–• –º–æ–¥—É–ª–µ–π."""
        logger.info("üîß Initializing all modules...")
        
        # Price Alerts (–æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å)
        try:
            self.price_alerts_service = PriceAlertsService()
            logger.info("‚úÖ Price Alerts service created")
            self._startup_stats["modules_started"] += 1
        except Exception as e:
            logger.error(f"‚ùå Failed to create Price Alerts: {e}")
            self._startup_stats["modules_failed"] += 1
        
        # Gas Tracker
        try:
            self.gas_tracker_service = GasTrackerService()
            logger.info("‚úÖ Gas Tracker service created")
            self._startup_stats["modules_started"] += 1
        except Exception as e:
            logger.error(f"‚ùå Failed to create Gas Tracker: {e}")
            self._startup_stats["modules_failed"] += 1
        
        # Whale Tracker
        try:
            self.whale_service = LimitedWhaleService()
            logger.info("‚úÖ Whale service created")
            self._startup_stats["modules_started"] += 1
        except Exception as e:
            logger.error(f"‚ùå Failed to create Whale service: {e}")
            self._startup_stats["modules_failed"] += 1
        
        # Wallet Tracker
        try:
            self.wallet_service = LimitedWalletTrackerService()
            logger.info("‚úÖ Wallet service created")
            self._startup_stats["modules_started"] += 1
        except Exception as e:
            logger.error(f"‚ùå Failed to create Wallet service: {e}")
            self._startup_stats["modules_failed"] += 1
        
        # Telegram Service
        try:
            self.telegram_service = TelegramService(self.config.bot_token)
            logger.info("‚úÖ Telegram service created")
            self._startup_stats["modules_started"] += 1
        except Exception as e:
            logger.error(f"‚ùå Failed to create Telegram service: {e}")
            self._startup_stats["modules_failed"] += 1
            raise  # Telegram –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–µ–Ω
    
    async def _setup_telegram_with_all_modules(self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram —Å –í–°–ï–ú–ò –º–æ–¥—É–ª—è–º–∏."""
        logger.info("üì± Setting up Telegram with ALL modules...")
        
        if not self.telegram_service:
            raise RuntimeError("Telegram service not initialized")
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ø–µ—Ä–µ–¥–∞–µ–º –í–°–ï —Å–µ—Ä–≤–∏—Å—ã
        self.telegram_service.set_services(
            price_alerts=self.price_alerts_service,
            gas_tracker=self.gas_tracker_service,
            whale_tracker=self.whale_service,
            wallet_tracker=self.wallet_service
        )
        
        logger.info("‚úÖ All services injected into Telegram handlers")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        stats = self.telegram_service.get_stats()
        self._startup_stats["handlers_registered"] = stats.get("handlers_registered", 0)
        
        logger.info(f"üìä Handlers registered: {self._startup_stats['handlers_registered']}")
    
    async def _setup_module_connections(self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏."""
        logger.info("üîó Setting up module connections...")
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        event_bus.subscribe("system.module_started", self._on_module_started)
        event_bus.subscribe("system.module_stopped", self._on_module_stopped)
        event_bus.subscribe("system.error", self._on_system_error)
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∞–ª–µ—Ä—Ç—ã –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –≤ Telegram
        event_bus.subscribe("price_alert.triggered", self._forward_to_telegram)
        event_bus.subscribe("gas_alert_triggered", self._forward_to_telegram)
        event_bus.subscribe("whale_alert_triggered", self._forward_to_telegram)
        event_bus.subscribe("wallet_alert_triggered", self._forward_to_telegram)
        
        logger.info("‚úÖ Module connections established")
    
    async def start(self) -> None:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π."""
        if self.running:
            return
        
        logger.info("üéØ Starting all modules...")
        self.running = True
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
            await self._start_core_services()
            await self._start_feature_services()
            
            # Telegram –∑–∞–ø—É—Å–∫–∞–µ–º –ü–û–°–õ–ï–î–ù–ò–ú (–æ–Ω –±–ª–æ–∫–∏—Ä—É—é—â–∏–π)
            logger.info("üì± Starting Telegram service (this will block)...")
            
            # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –ø–æ–ª–Ω–æ–π –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            await event_bus.publish(Event(
                type="system.application_ready",
                data={
                    "modules_started": self._startup_stats["modules_started"],
                    "handlers_registered": self._startup_stats["handlers_registered"],
                    "version": "2.0.0"
                },
                source_module="main"
            ))
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            self.tasks = [
                asyncio.create_task(self._system_monitor()),
                asyncio.create_task(self._health_checker())
            ]
            
            logger.info("üöÄ ALL MODULES STARTED! Bot is fully functional!")
            logger.info("üì± Starting Telegram polling...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram (–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤)
            await self.telegram_service.start()
            
        except Exception as e:
            logger.error(f"‚ùå Error starting application: {e}")
            raise
    
    async def _start_core_services(self) -> None:
        """–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤."""
        logger.info("üîß Starting core services...")
        
        # Price Alerts
        if self.price_alerts_service:
            try:
                await self.price_alerts_service.start()
                logger.info("‚úÖ Price Alerts started")
            except Exception as e:
                logger.error(f"‚ùå Failed to start Price Alerts: {e}")
        
        logger.info("‚úÖ Core services started")
    
    async def _start_feature_services(self) -> None:
        """–ó–∞–ø—É—Å–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤."""
        logger.info("‚≠ê Starting feature services...")
        
        # Gas Tracker
        if self.gas_tracker_service:
            try:
                await self.gas_tracker_service.start()
                logger.info("‚úÖ Gas Tracker started")
            except Exception as e:
                logger.error(f"‚ùå Failed to start Gas Tracker: {e}")
        
        # Whale Service
        if self.whale_service:
            try:
                await self.whale_service.start()
                logger.info("‚úÖ Whale service started (limited mode)")
            except Exception as e:
                logger.error(f"‚ùå Failed to start Whale service: {e}")
        
        # Wallet Service
        if self.wallet_service:
            try:
                await self.wallet_service.start()
                logger.info("‚úÖ Wallet service started (limited mode)")
            except Exception as e:
                logger.error(f"‚ùå Failed to start Wallet service: {e}")
        
        logger.info("‚úÖ Feature services started")
    
    async def stop(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π."""
        if not self.running:
            return
        
        logger.info("üõë Stopping application...")
        self.running = False
        
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            for task in self.tasks:
                task.cancel()
            
            if self.tasks:
                await asyncio.gather(*self.tasks, return_exceptions=True)
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
            await self._stop_all_services()
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É
            await self._stop_infrastructure()
            
            logger.info("‚úÖ Application stopped cleanly")
            
        except Exception as e:
            logger.error(f"‚ùå Error during shutdown: {e}")
    
    async def _stop_all_services(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤."""
        logger.info("üõë Stopping all services...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        services = [
            ("Telegram", self.telegram_service),
            ("Wallet", self.wallet_service),
            ("Whale", self.whale_service),
            ("Gas Tracker", self.gas_tracker_service),
            ("Price Alerts", self.price_alerts_service)
        ]
        
        for service_name, service in services:
            if service:
                try:
                    await service.stop()
                    logger.info(f"‚úÖ {service_name} stopped")
                except Exception as e:
                    logger.error(f"‚ùå Error stopping {service_name}: {e}")
    
    async def _stop_infrastructure(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã."""
        logger.info("üèóÔ∏è Stopping infrastructure...")
        
        try:
            await cache_manager.stop_all()
            logger.info("üíæ Cache system stopped")
        except Exception as e:
            logger.error(f"Error stopping cache: {e}")
        
        try:
            await event_bus.stop()
            logger.info("üì° Event Bus stopped")
        except Exception as e:
            logger.error(f"Error stopping Event Bus: {e}")
    
    # EVENT HANDLERS
    
    async def _on_module_started(self, event: Event) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –∑–∞–ø—É—Å–∫–∞ –º–æ–¥—É–ª—è."""
        module_name = event.data.get("module", "unknown")
        logger.info(f"‚úÖ Module '{module_name}' started successfully")
    
    async def _on_module_stopped(self, event: Event) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–¥—É–ª—è."""
        module_name = event.data.get("module", "unknown")
        logger.info(f"‚èπÔ∏è Module '{module_name}' stopped")
    
    async def _on_system_error(self, event: Event) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –æ—à–∏–±–æ–∫."""
        error = event.data.get("error", "unknown")
        module_name = event.source_module
        logger.error(f"‚ùå System error in '{module_name}': {error}")
    
    async def _forward_to_telegram(self, event: Event) -> None:
        """–ü–µ—Ä–µ—Å—ã–ª–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ –≤ Telegram."""
        if self.telegram_service and self.running:
            user_id = event.data.get("user_id")
            message = event.data.get("message")
            
            if user_id and message:
                try:
                    await self.telegram_service.send_message(user_id, message, parse_mode="HTML")
                except Exception as e:
                    logger.error(f"Error forwarding message to Telegram: {e}")
    
    # –ú–û–ù–ò–¢–û–†–ò–ù–ì
    
    async def _system_monitor(self) -> None:
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã."""
        while self.running:
            try:
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ EventBus
                event_stats = event_bus.get_stats()
                cache_stats = cache_manager.get_all_stats()
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
                services_status = {
                    "price_alerts": getattr(self.price_alerts_service, 'running', False) if self.price_alerts_service else False,
                    "gas_tracker": getattr(self.gas_tracker_service, 'running', False) if self.gas_tracker_service else False,
                    "whale_tracker": getattr(self.whale_service, 'running', False) if self.whale_service else False,
                    "wallet_tracker": getattr(self.wallet_service, 'running', False) if self.wallet_service else False,
                    "telegram": getattr(self.telegram_service, 'running', False) if self.telegram_service else False
                }
                
                running_services = sum(1 for status in services_status.values() if status)
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
                logger.info(
                    f"üìä System Monitor - Services: {running_services}/5 running, "
                    f"Events: {event_stats.get('event_types', 0)} types, "
                    f"Cache: {sum(s.get('total_entries', 0) for s in cache_stats.values())} entries"
                )
                
                # –ü—É–±–ª–∏–∫—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                await event_bus.publish(Event(
                    type="system.monitor_stats",
                    data={
                        "services_status": services_status,
                        "running_services": running_services,
                        "event_stats": event_stats,
                        "cache_stats": cache_stats
                    },
                    source_module="main"
                ))
                
                await asyncio.sleep(600)  # 10 –º–∏–Ω—É—Ç
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"Error in system monitor: {e}")
                await asyncio.sleep(60)
    
    async def _health_checker(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –º–æ–¥—É–ª–µ–π."""
        while self.running:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º Event Bus
                event_health = await event_bus.health_check()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–∏—Å—ã
                unhealthy_services = []
                
                services_to_check = [
                    ("price_alerts", self.price_alerts_service),
                    ("gas_tracker", self.gas_tracker_service),
                    ("whale_tracker", self.whale_service),
                    ("wallet_tracker", self.wallet_service),
                    ("telegram", self.telegram_service)
                ]
                
                for service_name, service in services_to_check:
                    if service:
                        try:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
                            if not getattr(service, 'running', False):
                                unhealthy_services.append(service_name)
                        except Exception as e:
                            logger.warning(f"Health check failed for {service_name}: {e}")
                            unhealthy_services.append(service_name)
                
                # –ü—É–±–ª–∏–∫—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç health check
                await event_bus.publish(Event(
                    type="system.health_check",
                    data={
                        "timestamp": asyncio.get_event_loop().time(),
                        "event_bus_healthy": event_health.get('status') == 'healthy',
                        "unhealthy_services": unhealthy_services,
                        "total_services": len(services_to_check)
                    },
                    source_module="main"
                ))
                
                if unhealthy_services:
                    logger.warning(f"‚ö†Ô∏è Unhealthy services: {unhealthy_services}")
                
                await asyncio.sleep(120)  # 2 –º–∏–Ω—É—Ç—ã
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"Error in health checker: {e}")
                await asyncio.sleep(120)
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        return {
            "running": self.running,
            "startup_stats": self._startup_stats,
            "services": {
                "price_alerts": {
                    "initialized": self.price_alerts_service is not None,
                    "running": getattr(self.price_alerts_service, 'running', False) if self.price_alerts_service else False
                },
                "gas_tracker": {
                    "initialized": self.gas_tracker_service is not None,
                    "running": getattr(self.gas_tracker_service, 'running', False) if self.gas_tracker_service else False
                },
                "whale_tracker": {
                    "initialized": self.whale_service is not None,
                    "running": getattr(self.whale_service, 'running', False) if self.whale_service else False
                },
                "wallet_tracker": {
                    "initialized": self.wallet_service is not None,
                    "running": getattr(self.wallet_service, 'running', False) if self.wallet_service else False
                },
                "telegram": {
                    "initialized": self.telegram_service is not None,
                    "running": getattr(self.telegram_service, 'running', False) if self.telegram_service else False
                }
            },
            "infrastructure": {
                "event_bus_running": event_bus._running if hasattr(event_bus, '_running') else False,
                "cache_manager_active": len(cache_manager._caches) > 0
            },
            "tasks_count": len(self.tasks)
        }


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    logger.info("üöÄ Starting Fully Functional Crypto Bot...")
    
    app = FullyFunctionalCryptoBot()
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –º–æ–¥—É–ª–∏
        await app.initialize()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤)
        await app.start()
        
    except KeyboardInterrupt:
        logger.info("üõë Application interrupted by user")
    except Exception as e:
        logger.error(f"üí• Fatal error: {e}")
        import traceback
        traceback.print_exc()
        return 1
    finally:
        try:
            await app.stop()
        except Exception as e:
            logger.error(f"Error during cleanup: {e}")
    
    return 0


if __name__ == "__main__":
    try:
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—Å–∫–µ
        print("=" * 60)
        print("ü§ñ CRYPTO MONITOR BOT v2.0")
        print("üöÄ Fully Functional Version")
        print("üì± All buttons and features working!")
        print("=" * 60)
        
        exit_code = asyncio.run(main())
        sys.exit(exit_code)
        
    except KeyboardInterrupt:
        logger.info("üõë Application interrupted")
        sys.exit(0)
    except Exception as e:
        logger.error(f"üí• Unhandled exception: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)