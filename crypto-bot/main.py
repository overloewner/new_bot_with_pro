# main.py
"""–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –≥–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –∏–º–ø–æ—Ä—Ç–∞–º–∏."""

import asyncio
import signal
import sys
import warnings
from typing import Dict, Any, List
import logging

# –ü–æ–¥–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ deprecation
warnings.filterwarnings("ignore", category=DeprecationWarning)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)

from config.settings import get_config
from shared.events.bus import EventBus, Event
from shared.cache.memory_cache import cache_manager
from shared.database.manager import DatabaseManager

# –ò–º–ø–æ—Ä—Ç —Å–µ—Ä–≤–∏—Å–æ–≤
from modules.telegram.service import TelegramService
from modules.price_alerts.service import PriceAlertsService
from modules.gas_tracker.service import GasTrackerService
from modules.whales.service import LimitedWhaleService
from modules.wallet_tracker.service import LimitedWalletTrackerService

logger = logging.getLogger(__name__)


class ModularCryptoBot:
    """–ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –∏–º–ø–æ—Ä—Ç–∞–º–∏ –∏ –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é."""
    
    def __init__(self):
        self.config = get_config()
        self.running = False
        
        # Event Bus (—Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä)
        self.event_bus = EventBus()
        
        # –°–µ—Ä–≤–∏—Å—ã
        self.db_manager: DatabaseManager = None
        self.telegram_service: TelegramService = None
        self.price_alerts_service: PriceAlertsService = None
        self.gas_tracker_service: GasTrackerService = None
        self.whale_service: LimitedWhaleService = None
        self.wallet_service: LimitedWalletTrackerService = None
        
        # –ó–∞–¥–∞—á–∏
        self.tasks: List[asyncio.Task] = []
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
        self._setup_signal_handlers()
        
        # –°—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –º–æ–¥—É–ª–µ–π
        self._module_errors = {}
        self._max_module_errors = 5
    
    def _setup_signal_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown."""
        if sys.platform != 'win32':
            for sig in (signal.SIGTERM, signal.SIGINT):
                signal.signal(sig, self._signal_handler)
    
    def _signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤."""
        logger.info(f"Received signal {signum}")
        if self.running:
            asyncio.create_task(self.stop())
    
    async def initialize(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π —Å error handling."""
        logger.info("üöÄ Initializing Modular Crypto Bot v2.0...")
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Event Bus
            await self._initialize_event_bus()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
            await self._initialize_caching()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            await self._initialize_database()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
            await self._initialize_modules()
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–µ–∂–º–æ–¥—É–ª—å–Ω—ã–µ —Å–≤—è–∑–∏
            await self._setup_module_connections()
            
            logger.info("‚úÖ All modules initialized successfully")
            
        except Exception as e:
            logger.error(f"‚ùå Failed to initialize application: {e}")
            raise
    
    async def _initialize_event_bus(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Event Bus."""
        logger.info("üì° Initializing Event Bus...")
        
        try:
            await self.event_bus.start()
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º middleware –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            self.event_bus.add_middleware(self._event_monitor_middleware)
            
            logger.info("‚úÖ Event Bus initialized")
            
        except Exception as e:
            logger.error(f"‚ùå Failed to initialize Event Bus: {e}")
            raise
    
    async def _initialize_caching(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è."""
        logger.info("üíæ Initializing cache system...")
        
        try:
            await cache_manager.start_all()
            
            cache_stats = cache_manager.get_all_stats()
            logger.info(f"‚úÖ Cache system initialized with {len(cache_stats)} caches")
            
        except Exception as e:
            logger.error(f"‚ùå Failed to initialize cache system: {e}")
            raise
    
    async def _initialize_database(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)."""
        logger.info("üìä Initializing database...")
        
        try:
            self.db_manager = DatabaseManager(self.config.get_database_url())
            await self.db_manager.initialize()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            health = await self.db_manager.health_check()
            if not health:
                logger.warning("‚ö†Ô∏è Database health check failed, using cache-only mode")
                self.db_manager = None
            else:
                logger.info("‚úÖ Database initialized successfully")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Database initialization failed: {e}, using cache-only mode")
            self.db_manager = None
    
    async def _initialize_modules(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π."""
        logger.info("üîß Initializing modules...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ —Å error handling
        modules_config = [
            ("Price Alerts", self._init_price_alerts),
            ("Gas Tracker", self._init_gas_tracker),
            ("Whale Tracker", self._init_whale_tracker),
            ("Wallet Tracker", self._init_wallet_tracker),
            ("Telegram Service", self._init_telegram_service),
        ]
        
        for module_name, init_func in modules_config:
            try:
                await init_func()
                logger.info(f"‚úÖ {module_name} initialized")
            except Exception as e:
                logger.error(f"‚ùå Failed to initialize {module_name}: {e}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –µ—Å–ª–∏ –º–æ–¥—É–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        
        logger.info("‚úÖ All modules initialization completed")
    
    async def _init_price_alerts(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Price Alerts."""
        self.price_alerts_service = PriceAlertsService()
    
    async def _init_gas_tracker(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Gas Tracker."""
        self.gas_tracker_service = GasTrackerService()
    
    async def _init_whale_tracker(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Whale Tracker."""
        self.whale_service = LimitedWhaleService()
    
    async def _init_wallet_tracker(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Wallet Tracker."""
        self.wallet_service = LimitedWalletTrackerService()
    
    async def _init_telegram_service(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Service."""
        self.telegram_service = TelegramService(self.config.bot_token)
    
    async def _setup_module_connections(self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏ —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏—è."""
        logger.info("üîó Setting up module connections...")
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        self.event_bus.subscribe("system.module_started", self._on_module_started)
        self.event_bus.subscribe("system.module_stopped", self._on_module_stopped)
        self.event_bus.subscribe("system.error", self._on_system_error)
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∞–ª–µ—Ä—Ç—ã –¥–ª—è Telegram
        self.event_bus.subscribe("price_alert.triggered", self._forward_to_telegram)
        self.event_bus.subscribe("gas_alert_triggered", self._forward_to_telegram)
        self.event_bus.subscribe("whale_alert_triggered", self._forward_to_telegram)
        self.event_bus.subscribe("wallet_alert_triggered", self._forward_to_telegram)
        
        logger.info("‚úÖ Module connections established")
    
    async def _event_monitor_middleware(self, event: Event) -> None:
        """Middleware –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–±—ã—Ç–∏–π."""
        logger.debug(f"Event: {event.type} from {event.source_module}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–±—ã—Ç–∏–π
        try:
            cache = cache_manager.get_cache('system_stats')
            stats_key = f"events:{event.type}"
            current_count = await cache.get(stats_key, 0)
            await cache.set(stats_key, current_count + 1, ttl=3600)
        except Exception:
            pass  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    
    async def _on_module_started(self, event: Event) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –∑–∞–ø—É—Å–∫–∞ –º–æ–¥—É–ª—è."""
        module_name = event.data.get("module", "unknown")
        logger.info(f"‚úÖ Module '{module_name}' started")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        if module_name in self._module_errors:
            del self._module_errors[module_name]
    
    async def _on_module_stopped(self, event: Event) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–¥—É–ª—è."""
        module_name = event.data.get("module", "unknown")
        logger.info(f"‚èπÔ∏è Module '{module_name}' stopped")
    
    async def _on_system_error(self, event: Event) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –æ—à–∏–±–æ–∫."""
        error = event.data.get("error", "unknown")
        module_name = event.source_module
        
        logger.error(f"‚ùå Error in module '{module_name}': {error}")
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        if module_name not in self._module_errors:
            self._module_errors[module_name] = 0
        
        self._module_errors[module_name] += 1
        
        # –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–¥—É–ª—å
        if self._module_errors[module_name] >= self._max_module_errors:
            logger.warning(f"‚ö†Ô∏è Module '{module_name}' has too many errors, attempting restart...")
            await self._restart_module(module_name)
    
    async def _forward_to_telegram(self, event: Event) -> None:
        """–ü–µ—Ä–µ—Å—ã–ª–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ –≤ Telegram."""
        if self.telegram_service:
            user_id = event.data.get("user_id")
            message = event.data.get("message")
            
            if user_id and message:
                try:
                    await self.telegram_service.send_message(user_id, message, parse_mode="HTML")
                except Exception as e:
                    logger.error(f"Error forwarding message to Telegram: {e}")
    
    async def _restart_module(self, module_name: str):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –º–æ–¥—É–ª—è."""
        try:
            if module_name == "price_alerts" and self.price_alerts_service:
                await self.price_alerts_service.stop()
                await asyncio.sleep(5)
                await self.price_alerts_service.start()
                
            elif module_name == "gas_tracker" and self.gas_tracker_service:
                await self.gas_tracker_service.stop()
                await asyncio.sleep(5)
                await self.gas_tracker_service.start()
                
            elif module_name == "whale_tracker" and self.whale_service:
                await self.whale_service.stop()
                await asyncio.sleep(5)
                await self.whale_service.start()
                
            elif module_name == "wallet_tracker" and self.wallet_service:
                await self.wallet_service.stop()
                await asyncio.sleep(5)
                await self.wallet_service.start()
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
            self._module_errors[module_name] = 0
            logger.info(f"‚úÖ Module '{module_name}' restarted successfully")
            
        except Exception as e:
            logger.error(f"‚ùå Failed to restart module '{module_name}': {e}")
    
    async def start(self) -> None:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π —Å –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å—é."""
        if self.running:
            return
        
        logger.info("üéØ Starting all modules...")
        self.running = True
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–¥—É–ª–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ —Å error handling
            await self._start_core_modules()
            await self._start_feature_modules()
            await self._start_telegram_service()
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            self.tasks = [
                asyncio.create_task(self._system_monitor()),
                asyncio.create_task(self._health_checker())
            ]
            
            logger.info("üöÄ All modules started successfully!")
            
            # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            await self.event_bus.publish(Event(
                type="system.application_started",
                data={"modules_count": 5, "version": "2.0.0"},
                source_module="main"
            ))
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            await self._wait_for_shutdown()
            
        except Exception as e:
            logger.error(f"‚ùå Error starting application: {e}")
            raise
    
    async def _start_core_modules(self) -> None:
        """–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π."""
        logger.info("üîß Starting core modules...")
        
        # Price Alerts (–æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª)
        if self.price_alerts_service:
            try:
                await self.price_alerts_service.start()
                logger.info("‚úÖ Price Alerts started")
            except Exception as e:
                logger.error(f"‚ùå Failed to start Price Alerts: {e}")
        
        logger.info("‚úÖ Core modules started")
    
    async def _start_feature_modules(self) -> None:
        """–ó–∞–ø—É—Å–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π."""
        logger.info("‚≠ê Starting feature modules...")
        
        # Gas Tracker
        if self.gas_tracker_service:
            try:
                await self.gas_tracker_service.start()
                logger.info("‚úÖ Gas Tracker started")
            except Exception as e:
                logger.error(f"‚ùå Failed to start Gas Tracker: {e}")
        
        # Whale Tracker (—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –æ–± –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è—Ö)
        if self.whale_service:
            try:
                await self.whale_service.start()
                logger.info("‚úÖ Whale Tracker started (limited mode)")
            except Exception as e:
                logger.error(f"‚ùå Failed to start Whale Tracker: {e}")
        
        # Wallet Tracker (—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –æ–± –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è—Ö)
        if self.wallet_service:
            try:
                await self.wallet_service.start()
                logger.info("‚úÖ Wallet Tracker started (limited mode)")
            except Exception as e:
                logger.error(f"‚ùå Failed to start Wallet Tracker: {e}")
        
        logger.info("‚úÖ Feature modules started")
    
    async def _start_telegram_service(self) -> None:
        """–ó–∞–ø—É—Å–∫ Telegram —Å–µ—Ä–≤–∏—Å–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–º."""
        logger.info("üì± Starting Telegram service...")
        
        if self.telegram_service:
            try:
                # –ò–Ω–∂–µ–∫—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã –≤ handlers
                self.telegram_service.set_services(
                    price_alerts=self.price_alerts_service,
                    gas_tracker=self.gas_tracker_service,
                    whale_tracker=self.whale_service,
                    wallet_tracker=self.wallet_service
                )
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è Telegram (–æ–Ω–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ)
                telegram_task = asyncio.create_task(self.telegram_service.start())
                self.tasks.append(telegram_task)
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                await asyncio.sleep(3)
                
                logger.info("‚úÖ Telegram service started")
                
            except Exception as e:
                logger.error(f"‚ùå Failed to start Telegram service: {e}")
                # –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –µ—Å–ª–∏ Telegram –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
    
    async def _wait_for_shutdown(self) -> None:
        """–û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."""
        try:
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á –∏–ª–∏ —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            await asyncio.gather(*self.tasks)
        except asyncio.CancelledError:
            logger.info("üõë Shutdown signal received")
        except Exception as e:
            logger.error(f"‚ùå Error in main loop: {e}")
    
    async def stop(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π."""
        if not self.running:
            return
        
        logger.info("üõë Stopping application...")
        self.running = False
        
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            for task in self.tasks:
                task.cancel()
            
            if self.tasks:
                await asyncio.gather(*self.tasks, return_exceptions=True)
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–¥—É–ª–∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
            await self._stop_telegram_service()
            await self._stop_feature_modules()
            await self._stop_core_modules()
            await self._stop_infrastructure()
            
            # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            await self.event_bus.publish(Event(
                type="system.application_stopped",
                data={"clean_shutdown": True},
                source_module="main"
            ))
            
            logger.info("‚úÖ Application stopped cleanly")
            
        except Exception as e:
            logger.error(f"‚ùå Error during shutdown: {e}")
    
    async def _stop_telegram_service(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram —Å–µ—Ä–≤–∏—Å–∞."""
        if self.telegram_service:
            try:
                await self.telegram_service.stop()
                logger.info("üì± Telegram service stopped")
            except Exception as e:
                logger.error(f"Error stopping Telegram service: {e}")
    
    async def _stop_feature_modules(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π."""
        logger.info("‚≠ê Stopping feature modules...")
        
        modules = [
            ("Wallet Tracker", self.wallet_service),
            ("Whale Tracker", self.whale_service),
            ("Gas Tracker", self.gas_tracker_service)
        ]
        
        for module_name, service in modules:
            if service:
                try:
                    await service.stop()
                    logger.info(f"‚úÖ {module_name} stopped")
                except Exception as e:
                    logger.error(f"Error stopping {module_name}: {e}")
    
    async def _stop_core_modules(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π."""
        logger.info("üîß Stopping core modules...")
        
        if self.price_alerts_service:
            try:
                await self.price_alerts_service.stop()
                logger.info("‚úÖ Price Alerts stopped")
            except Exception as e:
                logger.error(f"Error stopping Price Alerts: {e}")
    
    async def _stop_infrastructure(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã."""
        logger.info("üèóÔ∏è Stopping infrastructure...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        try:
            await cache_manager.stop_all()
            logger.info("üíæ Cache system stopped")
        except Exception as e:
            logger.error(f"Error stopping cache system: {e}")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Event Bus
        try:
            await self.event_bus.stop()
            logger.info("üì° Event Bus stopped")
        except Exception as e:
            logger.error(f"Error stopping Event Bus: {e}")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if self.db_manager:
            try:
                await self.db_manager.close()
                logger.info("üìä Database connection closed")
            except Exception as e:
                logger.error(f"Error closing database: {e}")
    
    async def _system_monitor(self) -> None:
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã."""
        while self.running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–±—ã—Ç–∏–π
                event_stats = self.event_bus.get_stats()
                cache_stats = cache_manager.get_all_stats()
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
                logger.info(
                    f"üìä System stats - Events: {event_stats.get('event_types', 0)} types, "
                    f"Handlers: {event_stats.get('total_handlers', 0)}, "
                    f"Cache entries: {sum(s.get('total_entries', 0) for s in cache_stats.values())}"
                )
                
                await asyncio.sleep(600)  # 10 –º–∏–Ω—É—Ç
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"Error in system monitor: {e}")
                await asyncio.sleep(60)
    
    async def _health_checker(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –º–æ–¥—É–ª–µ–π."""
        while self.running:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ Event Bus
                event_health = await self.event_bus.health_check()
                if event_health.get('status') != 'healthy':
                    logger.warning(f"‚ö†Ô∏è Event Bus unhealthy: {event_health}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                if self.db_manager:
                    db_healthy = await self.db_manager.health_check()
                    if not db_healthy:
                        logger.warning("‚ö†Ô∏è Database health check failed")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–º—è—Ç—å –∫–µ—à–µ–π
                cache_stats = cache_manager.get_all_stats()
                for cache_name, stats in cache_stats.items():
                    memory_usage = stats.get('memory_usage_percent', 0)
                    if memory_usage > 90:
                        logger.warning(f"‚ö†Ô∏è Cache '{cache_name}' memory usage high: {memory_usage}%")
                
                # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
                await self.event_bus.publish(Event(
                    type="system.health_check",
                    data={
                        "timestamp": asyncio.get_event_loop().time(),
                        "modules_running": self.running,
                        "event_bus_health": event_health.get('status'),
                        "db_healthy": await self.db_manager.health_check() if self.db_manager else None
                    },
                    source_module="main"
                ))
                
                await asyncio.sleep(120)  # 2 –º–∏–Ω—É—Ç—ã
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"Error in health checker: {e}")
                await asyncio.sleep(120)
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        return {
            "running": self.running,
            "modules": {
                "price_alerts": self.price_alerts_service is not None and getattr(self.price_alerts_service, 'running', False),
                "gas_tracker": self.gas_tracker_service is not None and getattr(self.gas_tracker_service, 'running', False),
                "whale_tracker": self.whale_service is not None and getattr(self.whale_service, 'running', False),
                "wallet_tracker": self.wallet_service is not None and getattr(self.wallet_service, 'running', False),
                "telegram": self.telegram_service is not None
            },
            "infrastructure": {
                "event_bus": self.event_bus._running if self.event_bus else False,
                "database": self.db_manager is not None,
                "cache_manager": len(cache_manager._caches) > 0
            },
            "errors": dict(self._module_errors),
            "tasks": len(self.tasks)
        }


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    app = ModularCryptoBot()
    
    try:
        await app.initialize()
        await app.start()
    except KeyboardInterrupt:
        logger.info("üõë Application interrupted by user")
    except Exception as e:
        logger.error(f"üí• Fatal error: {e}")
        return 1
    finally:
        await app.stop()
    
    return 0


if __name__ == "__main__":
    try:
        exit_code = asyncio.run(main())
        sys.exit(exit_code)
    except KeyboardInterrupt:
        logger.info("üõë Application interrupted")
        sys.exit(0)
    except Exception as e:
        logger.error(f"üí• Unhandled exception: {e}")
        sys.exit(1)