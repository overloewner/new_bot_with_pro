# main.py
"""–ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π."""

import asyncio
import signal
import sys
import warnings
from typing import Dict, Any, List
import logging

# –ü–æ–¥–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ deprecation
warnings.filterwarnings("ignore", category=DeprecationWarning)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)

from config.settings import AppConfig
from shared.events import event_bus, Event
from shared.database.manager import DatabaseManager

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
from modules.telegram.service import TelegramService
from modules.price_alerts.service import PriceAlertsService
from modules.gas_tracker.service import GasTrackerService
from modules.whales.service import LimitedWhaleService
from modules.wallet_tracker.service import LimitedWalletTrackerService

logger = logging.getLogger(__name__)


class ModularCryptoBot:
    """–ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π."""
    
    def __init__(self):
        self.config = AppConfig.from_env()
        self.running = False
        
        # –°–µ—Ä–≤–∏—Å—ã
        self.db_manager: DatabaseManager = None
        self.telegram_service: TelegramService = None
        self.price_alerts_service: PriceAlertsService = None
        self.gas_tracker_service: GasTrackerService = None
        self.whale_service: LimitedWhaleService = None
        self.wallet_service: LimitedWalletTrackerService = None
        
        # –ó–∞–¥–∞—á–∏
        self.tasks: List[asyncio.Task] = []
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
        self._setup_signal_handlers()
    
    def _setup_signal_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown."""
        if sys.platform != 'win32':
            for sig in (signal.SIGTERM, signal.SIGINT):
                signal.signal(sig, self._signal_handler)
    
    def _signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤."""
        logger.info(f"Received signal {signum}")
        if self.running:
            asyncio.create_task(self.stop())
    
    async def initialize(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π."""
        logger.info("üöÄ Initializing Modular Crypto Bot...")
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await self._initialize_database()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
            await self._initialize_modules()
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–µ–∂–º–æ–¥—É–ª—å–Ω—ã–µ —Å–≤—è–∑–∏
            await self._setup_module_connections()
            
            logger.info("‚úÖ All modules initialized successfully")
            
        except Exception as e:
            logger.error(f"‚ùå Failed to initialize application: {e}")
            raise
    
    async def _initialize_database(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        logger.info("üìä Initializing database...")
        
        self.db_manager = DatabaseManager(self.config.database_url)
        await self.db_manager.initialize()
        
        logger.info("‚úÖ Database initialized")
    
    async def _initialize_modules(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π."""
        logger.info("üîß Initializing modules...")
        
        # Telegram —Å–µ—Ä–≤–∏—Å
        self.telegram_service = TelegramService(self.config.bot_token)
        
        # Price Alerts (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª)
        self.price_alerts_service = PriceAlertsService()
        
        # Gas Tracker
        self.gas_tracker_service = GasTrackerService()
        
        # Whale Tracker (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        self.whale_service = LimitedWhaleService()
        
        # Wallet Tracker (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        self.wallet_service = LimitedWalletTrackerService()
        
        logger.info("‚úÖ All services created")
    
    async def _setup_module_connections(self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏ —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏—è."""
        logger.info("üîó Setting up module connections...")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º middleware –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–±—ã—Ç–∏–π
        event_bus.add_middleware(self._event_monitor_middleware)
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        event_bus.subscribe("system.module_started", self._on_module_started)
        event_bus.subscribe("system.module_stopped", self._on_module_stopped)
        event_bus.subscribe("system.error", self._on_system_error)
        
        logger.info("‚úÖ Module connections established")
    
    async def _event_monitor_middleware(self, event: Event) -> None:
        """Middleware –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–±—ã—Ç–∏–π."""
        logger.debug(f"Event: {event.type} from {event.source_module}")
    
    async def _on_module_started(self, event: Event) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –∑–∞–ø—É—Å–∫–∞ –º–æ–¥—É–ª—è."""
        module_name = event.data.get("module", "unknown")  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ —Å module
        logger.info(f"‚úÖ Module '{module_name}' started")
    
    async def _on_module_stopped(self, event: Event) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–¥—É–ª—è."""
        module_name = event.data.get("module", "unknown")  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ —Å module
        logger.info(f"‚èπÔ∏è Module '{module_name}' stopped")
    
    async def _on_system_error(self, event: Event) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –æ—à–∏–±–æ–∫."""
        error = event.data.get("error", "unknown")
        module_name = event.source_module
        logger.error(f"‚ùå Error in module '{module_name}': {error}")
    
    async def start(self) -> None:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π."""
        if self.running:
            return
        
        logger.info("üéØ Starting all modules...")
        self.running = True
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–¥—É–ª–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
            await self._start_core_modules()
            await self._start_feature_modules()
            await self._start_telegram_service()
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            self.tasks = [
                asyncio.create_task(self._system_monitor()),
                asyncio.create_task(self._health_checker())
            ]
            
            logger.info("üöÄ All modules started successfully!")
            
            # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            await event_bus.publish(Event(
                type="system.application_started",
                data={"modules_count": 5},
                source_module="main"
            ))
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            await self._wait_for_shutdown()
            
        except Exception as e:
            logger.error(f"‚ùå Error starting application: {e}")
            raise
    
    async def _start_core_modules(self) -> None:
        """–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π."""
        logger.info("üîß Starting core modules...")
        
        # Price Alerts (–æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª)
        if self.price_alerts_service:
            await self.price_alerts_service.start()
        
        logger.info("‚úÖ Core modules started")
    
    async def _start_feature_modules(self) -> None:
        """–ó–∞–ø—É—Å–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π."""
        logger.info("‚≠ê Starting feature modules...")
        
        # Gas Tracker
        if self.gas_tracker_service:
            await self.gas_tracker_service.start()
        
        # Whale Tracker (—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –æ–± –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è—Ö)
        if self.whale_service:
            await self.whale_service.start()
        
        # Wallet Tracker (—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –æ–± –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è—Ö)
        if self.wallet_service:
            await self.wallet_service.start()
        
        logger.info("‚úÖ Feature modules started")
    
    async def _start_telegram_service(self) -> None:
        """–ó–∞–ø—É—Å–∫ Telegram —Å–µ—Ä–≤–∏—Å–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–º."""
        logger.info("üì± Starting Telegram service...")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è Telegram (–æ–Ω–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ)
        if self.telegram_service:
            telegram_task = asyncio.create_task(self.telegram_service.start())
            self.tasks.append(telegram_task)
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        await asyncio.sleep(2)
        
        logger.info("‚úÖ Telegram service started")
    
    async def _wait_for_shutdown(self) -> None:
        """–û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."""
        try:
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á –∏–ª–∏ —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            await asyncio.gather(*self.tasks)
        except asyncio.CancelledError:
            logger.info("üõë Shutdown signal received")
        except Exception as e:
            logger.error(f"‚ùå Error in main loop: {e}")
    
    async def stop(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π."""
        if not self.running:
            return
        
        logger.info("üõë Stopping application...")
        self.running = False
        
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏
            for task in self.tasks:
                task.cancel()
            
            if self.tasks:
                await asyncio.gather(*self.tasks, return_exceptions=True)
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–¥—É–ª–∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
            await self._stop_telegram_service()
            await self._stop_feature_modules()
            await self._stop_core_modules()
            await self._stop_database()
            
            # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            await event_bus.publish(Event(
                type="system.application_stopped",
                data={"clean_shutdown": True},
                source_module="main"
            ))
            
            logger.info("‚úÖ Application stopped cleanly")
            
        except Exception as e:
            logger.error(f"‚ùå Error during shutdown: {e}")
    
    async def _stop_telegram_service(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram —Å–µ—Ä–≤–∏—Å–∞."""
        if self.telegram_service:
            await self.telegram_service.stop()
    
    async def _stop_feature_modules(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π."""
        logger.info("‚≠ê Stopping feature modules...")
        
        if self.wallet_service:
            await self.wallet_service.stop()
        
        if self.whale_service:
            await self.whale_service.stop()
            
        if self.gas_tracker_service:
            await self.gas_tracker_service.stop()
        
        logger.info("‚úÖ Feature modules stopped")
    
    async def _stop_core_modules(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π."""
        logger.info("üîß Stopping core modules...")
        
        if self.price_alerts_service:
            await self.price_alerts_service.stop()
        
        logger.info("‚úÖ Core modules stopped")
    
    async def _stop_database(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        if self.db_manager:
            await self.db_manager.close()
            logger.info("üìä Database connection closed")
    
    async def _system_monitor(self) -> None:
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã."""
        while self.running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–±—ã—Ç–∏–π
                event_stats = event_bus.get_stats()
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                logger.info(
                    f"üìä System stats - Events: {event_stats['total_event_types']} types, "
                    f"History: {event_stats['history_size']} events"
                )
                
                await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"Error in system monitor: {e}")
                await asyncio.sleep(60)
    
    async def _health_checker(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –º–æ–¥—É–ª–µ–π."""
        while self.running:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                if self.db_manager:
                    db_healthy = await self.db_manager.health_check()
                    if not db_healthy:
                        logger.warning("‚ö†Ô∏è Database health check failed")
                
                # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
                await event_bus.publish(Event(
                    type="system.health_check",
                    data={
                        "timestamp": asyncio.get_event_loop().time(),
                        "modules_running": self.running
                    },
                    source_module="main"
                ))
                
                await asyncio.sleep(120)  # 2 –º–∏–Ω—É—Ç—ã
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"Error in health checker: {e}")
                await asyncio.sleep(120)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    app = ModularCryptoBot()
    
    try:
        await app.initialize()
        await app.start()
    except KeyboardInterrupt:
        logger.info("üõë Application interrupted by user")
    except Exception as e:
        logger.error(f"üí• Fatal error: {e}")
        return 1
    finally:
        await app.stop()
    
    return 0


if __name__ == "__main__":
    try:
        exit_code = asyncio.run(main())
        sys.exit(exit_code)
    except KeyboardInterrupt:
        logger.info("üõë Application interrupted")
        sys.exit(0)
    except Exception as e:
        logger.error(f"üí• Unhandled exception: {e}")
        sys.exit(1)